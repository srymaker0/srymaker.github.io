<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Effective C++</title>
      <link href="posts/ec29.html"/>
      <url>posts/ec29.html</url>
      
        <content type="html"><![CDATA[<h1 id="Effective-C"><a href="#Effective-C" class="headerlink" title="Effective C++"></a>Effective C++</h1><p>刚开始看第一遍， 记录一些关键、有趣、不是很懂的地方</p><h2 id="static-amp-const-amp-inline"><a href="#static-amp-const-amp-inline" class="headerlink" title="static&amp;const&amp;inline"></a>static&amp;const&amp;inline</h2><h2 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h2><p>看到条款15懵b了 </p><pre class="line-numbers language-CPP" data-language="CPP"><code class="language-CPP">class Font {public:    ...    operator FontHandle() const    { return f;}    ...};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到这个我开始怀疑自己有没有学过C++了<span class="github-emoji"><span>😢</span><img src="/img/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>，我在想运算符重载还能这样写？后面查了资料才知道这并不是运算符重载</p><p>关于隐式类型转换的规则<span class="github-emoji"><span>👇</span><img src="/img/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/1f447.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><ul><li>接受单个实参的构造函数，定义了从形参类型到该类类型的一个隐式转换。</li></ul><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210919212342.png" alt=""></p><p>explicit关键字</p><ul><li>类的构造函数被声明为<code>explicit</code>方式，可以用来<strong>阻止隐式类型转换</strong>，但被声明为explicit的构造函数依然可被用来执行<strong>显示类型转换</strong>。即，explicit构造函数必须显示调用。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>InnoDB索引</title>
      <link href="posts/a128.html"/>
      <url>posts/a128.html</url>
      
        <content type="html"><![CDATA[<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/%E7%B4%A2%E5%BC%95.png" alt=""></p><h2 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h2><p>Change buff——针对次要索引</p><p> LRU——数据预热（yong， old）</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p><img src="/img/loading.gif" data-original="https://i.loli.net/2021/09/23/N2ABoeCxpcWnKbZ.png" style="zoom:50%;"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Script</title>
      <link href="posts/e826.html"/>
      <url>posts/e826.html</url>
      
        <content type="html"><![CDATA[<h1 id="脚本获取系统信息"><a href="#脚本获取系统信息" class="headerlink" title="脚本获取系统信息"></a>脚本获取系统信息</h1><h2 id="MemLog"><a href="#MemLog" class="headerlink" title="MemLog"></a>MemLog</h2><p>最终效果：</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210913150405.png" alt=""></p><p>显示：时间 总量 剩余量  当前占用  占用百分比动态平均值</p><p>使用free命令查看当前内存使用情况</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210913145254.png" alt=""></p><ul><li><p>-m表示单位为兆M</p></li><li><p>红框为我们需要的数据</p></li></ul><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210913150944.png" alt=""></p><ul><li><p>MemValue是一个数组，使用awk命令去获取total，used这两个值</p></li><li><p>MemPrec为当前占用率，NowDyAver为占用百分比动态平均值</p><ul><li><p>利用bc命令去计算，<code>scale=2</code>表示保留2位小数</p></li><li><p>$ 动态平均值 =  0.8*加权平均值（上一次)+0.2当前占用比$​</p></li></ul></li></ul><h2 id="Disk"><a href="#Disk" class="headerlink" title="Disk"></a>Disk</h2><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210913171937.png" alt=""></p><p>最终效果：</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210913171921.png" alt=""></p><p>使用df命令查看磁盘使用情况，-T表示类型</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210913165756.png" alt=""></p><ul><li>红框内是我们需要的，<code>devtmpfs</code>和<code>tmpfs</code>是虚拟内存文件系统<ul><li>tmpfs是一种基于内存的文件系统，不像其他的文件系统需要格式化后才可以挂载，而是直接使用，由于是在内存中存储数据，那么在断电后会导致数据丢失。在使用到tmpfs文件系统存储数据效率会得到一定的提升。</li><li>devtmpfs 的功用是在 Linux 核心 启动早期建立一个初步的 /dev，令一般启动程序不用等待 udev，缩短 GNU/Linux 的开机时间</li></ul></li></ul><p>取得数据</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210913171709.png" alt=""></p><ul><li>tail -n +2——显示的第二条以后的数据</li><li>-x——表示过滤</li></ul><h3 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h3><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210913174139.png" alt=""></p><ul><li>awk -v 表示定义一个变量<ul><li>NR是awk内置变量——已经读出的记录数: 注意是从0开始</li></ul></li><li>eval——<a href="https://blog.51cto.com/u_10706198/1788573">eval的使用</a></li></ul><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210913181125.png" alt=""></p><ul><li>先输出总的磁盘情况，再输出分区的磁盘情况<ul><li>parnum里面存的是读到的记录数</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>reactor反应堆</title>
      <link href="posts/1fd0.html"/>
      <url>posts/1fd0.html</url>
      
        <content type="html"><![CDATA[<h1 id="reactor"><a href="#reactor" class="headerlink" title="reactor"></a>reactor</h1><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210912184500.png" style="zoom: 25%;"></p><p>Reactor thread : 反应堆线程——epoll实例，感知业务发生，直接给<code>Thread Pool</code>的线程做对应的工作</p><p>这里会引发几个问题：</p><p>1⃣️线程池中的线程量设计多少才合理？是越多越好吗？</p><ul><li>结论：不超过cpu核心数，要想性能最高，就让线程数等于cpu核心数</li><li>原因：若是超过了cpu核心数，那么线程池中的线程之间也会发生调度，尽管线程间调度消耗的时间很少，但还是付出了损失性能的代价</li></ul><p>2⃣️既然不能超过cpu核心数，那主线程或者辅助的心跳线程放哪里呢？假设有8个cpu，是不是应该在线程池中设计6个呢？</p><ul><li>在我们设计这个反应堆模式时，线程池中处理的应该是繁忙的业务(由reactor分发过来的，ready状态的，无需等待)，应该要一直运行在cpu上的（cpu密集型）</li><li>主线程和心跳线程——IO约束型的，更多时候在<code>sleep</code>，可以插空执行，</li></ul><p>3⃣️那既然这样，是不是意味着cpu越多，我处理并发的性能就越高呢？</p><ul><li>并不是，cpu越多，则任务在cpu中协调更困难（可靠性）</li></ul><h1 id="主从反应堆"><a href="#主从反应堆" class="headerlink" title="主从反应堆"></a>主从反应堆</h1><blockquote><p>类比：理发店问题</p><p>假设<code>reactor dispatch</code>为理发店老板，<code>sub-reactor dispatch</code>为合伙人，<code>client</code>为客户，<code>Thread Pool</code>为理发师。</p><p>现在老板拉来了3个客人，老板只负责分配任务交给两个合伙人（从反应堆），两个合伙人一个给男孩剪头，一个给女孩剪头（也就是说现在客户跟合伙人有关联），并且合伙人只负责维护这些客户，这些客户之后和老板没有直接关系，如果客户要剪头发了（任务，可放在任务队列中），那么通知合伙人，由合伙人再去通知理发师线程去抢生意（抢占任务）</p><p>假设客人要离开了，只需要通知合伙人就行，在合伙人这里进行删除，注销操作。</p></blockquote><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210912190559.png" style="zoom:25%;"><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210912191314.png" style="zoom:25%;"></p><p>为什么需要从反应堆？</p><ul><li>因为主反应堆不够用，处理的能力不行，需要从反应堆分担压力</li></ul><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>什么是IO多路复用</p><p>什么是线程池，原理是什么，线程池设计多少的并发量比较适合，最大化使用应该设置为多少——线程池中的线程不能超过cpu核心数</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于MySQL那点事儿</title>
      <link href="posts/d4d4.html"/>
      <url>posts/d4d4.html</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h1><p><a href="https://srymaker0.com/posts/54a3">1.关于MySQL架构</a></p><p><a href="https://srymaker0.com/posts/5a4f">2.InnoDB的RC和RR隔离级别的实现</a></p><p><a href="https://srymaker0.com/posts/7c75">3.InnoDB与事务持久性</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Innodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO多路复用</title>
      <link href="posts/0.html"/>
      <url>posts/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h1><p><span class="github-emoji"><span>❓</span><img src="/img/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>为什么会出现IO多路复用</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210721145201.png" alt=""></p><ul><li><p>系统调用会带来额外的开销：</p><ul><li>操作系统层面(准确)：作为用户程序如何调用系统资源</li><li>更宏观的层面：调用系统函数(system call)</li></ul></li><li><p>内核态：执行特权指令 ｜ 用户态：执行非特权指令</p><ul><li>从用户态到内核态：通过系统调用（主要）、中断、异常</li></ul></li></ul><blockquote><p>  高并发需要考虑系统调用的开销<br>  因为从用户态下沉到内核态往往伴随着数据的拷贝，加上本身切换的时间成本，会影响性能，因此减少数据的拷贝次数是提高高并发性能的关键。</p></blockquote><ul><li>NIO（非阻塞IO）实现并发：在循环中采用轮询机制——同时和100个女朋友聊天，其中一个不理我，那就找下一个聊，过会再来看看(EAGAIN)<ul><li>弊端，需要自己反复的查看，而没有一种通知机制</li></ul></li><li>解决：使用IO多路复用</li></ul><h1 id="select"><a href="#select" class="headerlink" title="select"></a>select</h1><blockquote><p>  船长奇特类比：假设我拥有很多女朋友（文件描述符），每天只关心三件事，女友想跟我说话（可读），女友想听我说话（可写），女友想跟我分手（异常），<code>select</code>会在女朋友的思想里（内核中）监控，告诉你有多少女朋友想跟你说话、你可以跟她说话、或者要跟你分手（这三个都是就绪态），但是不会具体指出哪一个。此时我想知道是哪个女朋友能跟我进行对话（就绪），我只能去问<code>select</code>，并且是一个一个问三种状态（可选择）。</p></blockquote><p>通过这个类比可以得出一些结论：</p><ul><li><p><code>select</code>时间复杂度高：假设有1000个女朋友，只有第999个是就绪态的，那么我需要从第一个轮询到第999个</p><ul><li><p>用户态和内核态都需要轮询</p></li><li><p>三种状态可以选择，若是只需要监听有哪些文件是可读的，只需要问一种状态即可，在较小的客户量下使用select完全可以处理过来</p></li></ul></li><li><p>拷贝次数多：<code>select</code>执行先从用户态拿到需要监听的集合，然后下沉到内核态进行监听，接着返回给用户态有哪些文件描述符是就绪的，这里发生了两次数据拷贝行为</p><ul><li>通过<code>FD_ISSET</code>去轮询</li></ul></li><li><p>并发量有上限</p></li></ul><p>原型</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210721150123.png" alt=""></p><ul><li>nfds: 文件描述符集合——底层使用数组维护，数量有一个上限，一般为1024</li><li>fd_set: 定义文件描述符的集合状态——可读，可写，异常</li><li>timeout: 时间间隔——一直等（NULL），等多久（&gt;0），立即返回（0）</li><li>四个宏操作集合<ul><li>FD_CLR——从集合中删除一个文件描述符</li><li>FD_ISSET——查看一个文件描述符是否在集合中</li><li>FD_SET——添加一个文件描述符到集合中</li><li>FD_ZERO——清空集合</li></ul></li></ul><p>描述</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210721151433.png"></p><p><code>select</code>和 <code>pselect</code> 允许程序监视多个文件描述符，等待一个或多个文件描述符变成“ready”进行某类 I/O 操作</p><ul><li>ready：就绪态，无阻塞的读或足够小的写</li></ul><p><code>select</code>和<code>pselect</code>的区别：</p><ol><li><p>精度不一样：前者的timeval结构体使用秒和微秒，后者的timespec使用秒和纳秒</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210721153619.png" style="zoom: 33%;"></p></li><li><p><code>select</code> 可能会更新超时参数以指示还剩多少时间。  <code>pselect</code>不会改变这个参数。</p></li><li><p><code>select</code>没有 <code>sigmask</code> 参数，其行为与使用<code>NULL sigmask</code>调用的<code>pselect</code> 一样。</p><ul><li><code>pselect</code>可以忽略<code>sigmask</code>设置的信号</li></ul></li></ol><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210721152415.png" alt=""></p><p>select监视三组独立的文件描述集合</p><ol><li>可读的——文件描述符是否有内容</li><li>可写的——监视文件描述符中是否有可用空间写入</li><li>异常的——文件描述符是否存在异常</li></ol><p>退出的时候，每个文件描述符集合会被修改，只留下状态发生变化的文件描述符，起指示作用</p><ul><li>所以，如果循环使用select，每次调用select前需要重新初始化每个集合</li></ul><p><code>nfds</code>的值应该是最大文件描述符+1，因为文件描述符从0开始</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210721175220.png" alt=""></p><ul><li>使用<code>select</code>可以制作更加精确的计时器，并且可移植</li><li>nfds设置为0，三个集合设置为NULL，timeout非NUL</li></ul><p>返回值</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210721153718.png" alt=""></p><ul><li>成功时，select() 和 pselect() 返回三个返回的描述符集中包含的文件描述符的数量（readfds、writefds、exceptfds）</li><li><p>如果超时，可能返回0</p></li><li><p>出错，返回-1</p></li></ul><h1 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h1><blockquote><p>本质上和select是一样的，只是底层数据结构不一样</p><p>继承了基本上select的所有缺点，除了最大文件描述符的限制</p></blockquote><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210721212821.png" alt=""></p><ul><li>fds：一个结构体数组</li><li>nfds：数组大小</li><li>timeout：时间间隔</li></ul><p><code>struct pollfd</code>结构体成员</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210721213301.png" alt=""></p><ul><li>fd：打开文件的文件描述符<ul><li>若为负数，events字段被忽略，revents返回0</li></ul></li><li>events：输入参数，下沉到内核<ul><li>16位的位掩码，每一位可表示一个状态</li><li>指定感兴趣的事件文件描述符fd</li></ul></li><li>revents：输出参数，返回给用户态<ul><li>由内核填充实际发生的事件</li><li>返回包括事件中指定的任何值</li><li>还可以返回<code>POLLERR</code>,<code>POLLHUP</code>,<code>POLLNVAL</code>，这三个值在events中没有意义</li></ul></li></ul><p><code>标志位</code></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210721214246.png" alt=""></p><ul><li>POLLIN：可读标志位</li><li>POLLOUT：可写标志位</li></ul><p>返回值</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210721220024.png" alt=""></p><ul><li>&gt;0: 返回一个revents字段不是0的结构体个数<ul><li>可能包含events或者出错</li></ul></li><li>=0: 超时或者没有文件描述符就绪</li><li>-1：出错，设置errno值</li></ul><h1 id="star-epoll"><a href="#star-epoll" class="headerlink" title=":star:epoll"></a><span class="github-emoji"><span>⭐</span><img src="/img/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>epoll</h1><p>描述</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210722003304.png" alt=""></p><ul><li><code>epoll</code>——IO事件驱动设备</li><li>三个系统调用<ul><li><code>epoll_create</code>：创建一个实例，返回一个指向该实例的文件描述符</li><li><code>epoll_ctl</code>：注册感兴趣的文件描述符</li><li><code>epoll_wait</code>：等待IO事件，若当前没有可用事件，则一直阻塞</li></ul></li><li>两种触发模式——水平触发（LT）、边缘触发（ET）</li></ul><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210722004313.png" alt=""></p><p>man手册中举了一种情况解释边缘触发：</p><ol><li>代表管道<code>rfd</code>读取端的文件描述符注册在<code>epoll</code> 实例上。</li><li>管道写入器在管道的写入端写入 2 kB 的数据。</li><li>调用<code>epoll_wait</code>将返回 <code>rfd</code> 作为<code>ready</code>的文件描述符。</li><li>管道读取器从 <code>rfd</code> 读取 1 kB 的数据。</li><li>完成对 <code>epoll_wait</code> 的调用。</li></ol><p>如果此时使用边缘触发，则<code>epoll_wait</code>将一直阻塞在第5步中，原因是边缘触发仅在受监视的文件描述符发生更改时才传递事件。</p><ul><li>在此例中，管道读取了数据，文件描述符发生了改变，并完成第5步。但是其实并没有把全部数据读取出来，并且在完成调用后文件描述符并没有发生改变，因此<code>epoll_wait</code>会一直阻塞</li></ul><p>要避免这种情况发生，必须设置相应的文件描述符为非阻塞</p><h2 id="epoll-creat"><a href="#epoll-creat" class="headerlink" title="epoll_creat"></a>epoll_creat</h2><p>描述</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210722010315.png" alt=""></p><ul><li>创建一个epoll实例<ul><li>返回一个文件描述符指向该实例</li><li>当不需要使用文件描述符时，调用close关闭</li><li>当所有的文件描述符都关闭时，才销毁实例</li></ul></li></ul><p>返回值</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210722010927.png" alt=""></p><ul><li>返回一个非负的文件描述符</li></ul><p>注意点</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210722011130.png" alt=""></p><ul><li>size的值<ul><li>此参数会提示内核分配多少空间给events</li><li>但是在现在的内核中会忽略此参数，因为内核可以动态调用events需要的空间，填上此值只是为了兼容旧内核的程序</li></ul></li></ul><h2 id="epoll-ctl"><a href="#epoll-ctl" class="headerlink" title="epoll_ctl"></a>epoll_ctl</h2><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210722011929.png" alt=""></p><ul><li>epfd：是创建实例返回的文件描述符</li><li><p>op：对应三种操作——增，删，改</p><ul><li><code>EPOLL_CTL_ADD</code>：在文件描述符 epfd 引用的 epoll 实例上注册目标文件描述符<code>fd</code>并关联<code>event</code></li><li><code>EPOLL_CTL_MOD</code>：更改与目标文件描述符<code>fd</code>关联的事件<code>event</code></li><li><code>EPOLL_CTL_DEL</code>：从<code>epfd</code>引用的<code>epoll</code>实例中移除（注销）目标文件描述符 fd。 </li></ul></li><li><p>event</p></li></ul><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210722013901.png" alt=""></p><ul><li>events和poll中的events一样，都是位掩码<ul><li><span class="github-emoji"><span>❗</span><img src="/img/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>但是返回的状态信息也在此events中修改，原来的状态可以在data中找回</li></ul></li><li>data可以指向一个文件描述符指针，也可以等于一个文件描述符，很灵活</li><li>data中存储的是原fd的数据，可以通过data找回</li></ul><p>返回值</p><ul><li>成功，返回0. </li><li>失败，返回-1</li></ul><h2 id="epoll-wait"><a href="#epoll-wait" class="headerlink" title="epoll_wait"></a>epoll_wait</h2><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210722014639.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210722015226.png" alt=""></p><ul><li><p>返回epfd指向的实例中的所有就绪文件描述符个数</p></li><li><p>events中存放的是<code>ready</code>的文件描述符</p></li></ul><h1 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h1><p>思考点</p><ol><li>epoll使用了mmap吗？<ul><li>对于mmap，在早起的Linux内核版本中，需要用户自己使用mmap将自己的文件描述符给内核空间，内核升级之后，这个过程不需要用户自己去做了。</li><li>早起需要用户去做，现在是epoll自己已经实现的，但是需要注意的是，这个只是对fd的映射，也就是在进行ready状态的fd传递的时候做，并不会映射其他的</li><li>网上有很多文章会把这个点误解为：epoll使用了mmap，所以当用户在read和write的时候，可以直接从内核中拷贝。但是实际是，在文件描述符的传递上，做了这个操作，不需要像select，poll一样来回传递，但是对于fd真实的IO操作，不可能做到这一点</li><li>select/poll每次调用时都要传递你所要监控的所有socket给select/poll系统调用，这意味着需要将用户态的socket列表copy到内核态，但是epoll就不用，因为在epoll-ctl时已经在内核态存储了需要监控的sock列表。</li></ul></li><li>关于最大文件描述符，<code>epoll</code>真的可以无限存储吗？<ul><li><code>select</code> 的上限是默认是1024，这个值之所以默认是1024，是因为在早起的Linux中，默认打开最大文件数就是1024，所以FD_SETSIZE设置为1024,那么打开的文件数就不会超过1024。修改 FD_SETSIZE 重新编译内核可增大并发数，但因为 O(n) 轮询时间复杂度高治标不治本所以不采纳 </li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="posts/0.html"/>
      <url>posts/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-S文件传输软件的设计与实现"><a href="#C-S文件传输软件的设计与实现" class="headerlink" title="C/S文件传输软件的设计与实现"></a>C/S文件传输软件的设计与实现</h1><p>理解整包，拆包，粘包</p><p>理解拆包和粘包的产生原因，掌握处理方法</p><p>进一步了解底层协议乃至所有网络编程中对数据流的处理方法</p><h2 id="理解三个包"><a href="#理解三个包" class="headerlink" title="理解三个包"></a>理解三个包</h2><p>需要明白这是出现在哪一层的设计</p><ul><li>这应该是应用层的逻辑，tcp不会管这些数据是否是按协议规定的，tcp只需要达到发送条件(=size)发送即可</li><li>“TCP粘包”这个说法——在TCP传输协议下，应用层数据拼装发送和接收解析问题</li></ul><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20211002232711.png" style="zoom:50%;"></p><p>Nagle算法存在的原因</p><blockquote><p>  Small Packet Problem<br>  在使用一些协议通讯的时候，比如Telnet，会有一个字节字节的发送的情景，每次发送一个字节的有用数据，就会产生41个字节长的分组，20个字节的IP Header 和 20个字节的TCP Header，这就导致了1个字节的有用信息要浪费掉40个字节的头部信息，这是一笔巨大的字节开销，而且这种Small packet在广域网上会增加拥塞的出现。<br>  如果解决这种问题？ Nagle就提出了一种通过减少需要通过网络发送包的数量来提高TCP/IP传输的效率，这就是Nagle算法</p></blockquote><p>参考：</p><p>——<a href="https://blog.csdn.net/wdscq1234/article/details/52432095">CSDN: Nagle算法</a></p><p>——<a href="https://www.zhihu.com/question/20210025">知乎：怎么解决TCP网络传输「粘包」问题？</a></p><p>我们这里其实设计的第一种“粘“<span class="github-emoji"><span>👇</span><img src="/img/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/1f447.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20211002225044.png" alt=""></p><p>三个都可以看成是结构体，可以理解为某种约定好的协议</p><ul><li><p><code>packet_pre</code>——存放临时的数据包，其实可以和packet合二为一</p></li><li><p><code>packet_t</code>——存放临时的数据包</p></li><li><p><code>packet</code>——真正的数据包的大小</p></li><li><p><code>offset</code>——偏移量</p></li><li><p><code>recv_size</code>——接收大小——其实就是设计好的缓存大小</p></li></ul><p>整包：$offset + recv_size = packet_size$  收到的等于发送的</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20211002230802.png" alt=""></p><p>拆包：</p><h1 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h1><p>关于视频流tcp与udp的问题——<a href="https://stackoverflow.com/questions/6187456/tcp-vs-udp-on-video-stream">TCP vs UDP on video stream</a></p><p><code>stream oriented</code> VS <code>message oriented</code>—— <a href="https://stackoverflow.com/questions/17446491/tcp-stream-vs-udp-message">TCP stream vs UDP message</a></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20211002224652.png" alt=""></p><ul><li><p>udp——发一个收一个</p></li><li><p>tcp——可以制定规则，可以发很多次，只接收一次。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>shell</title>
      <link href="posts/9924.html"/>
      <url>posts/9924.html</url>
      
        <content type="html"><![CDATA[<h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><p><strong>我们用的是bash解释器 写的脚本</strong></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/05/gsWrkvQLZd432Vb.png" alt=""></p><ul><li><p>创建👉 以<code>.sh</code>为文件结尾</p></li><li><p>执行👉 </p><ul><li><p>第一种 刚创建的<code>1.first.sh</code>没有可执行权限</p>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> a+x <span class="token number">1</span>.first.sh <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>输入上面的命令让所有人获得可执行的权限</p></li><li><p>接着可以输入<code>./1.first.sh</code>执行文件</p></li></ul></li><li><p>第二种</p>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> <span class="token number">1</span>.first.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>直接用<code>bash</code>命令可以直接运行<code>.sh</code>文件</li></ul></li></ul></li></ul><h2 id="变量与局部变量"><a href="#变量与局部变量" class="headerlink" title="变量与局部变量"></a>变量与局部变量</h2><ul><li><p><strong>变量的定义</strong></p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">12</span><span class="token assign-left variable">a</span><span class="token operator">=</span>helloworld<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">pwd</span><span class="token variable">`</span></span>  <span class="token comment">#pwd是一个命令  ``这两个点是命令替换符 把命令的输出替换到``中去 再赋值gei</span><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token variable">$a</span>:a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>注意⚡： <code>=</code>号两边的空格不能省略 否则会被终端理解为是一个命令而不是变量</p></li><li><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/05/4ACLGdW1TgaBHJD.png" style="zoom: 50%;"></p></li><li><p><code>''</code>硬转义→将<code>''</code>内的直接解释成字符</p></li><li><p><code>""</code>软转义→在<code>""</code>内的变量会被解释成原来的值</p></li><li><p>==这是一种弱类型语言 <code>a=123</code> 可以理解为整型 也可以理解为字符  但是在系统中就认为a是一个普通变量==</p></li><li><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/05/QI2RwChaFJ9bqGe.png" alt=""></p></li><li><p>在一个变量后面加上一个字符串 实际上做的是简单的字符串拼接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash </span><span class="token comment">#这是注释  用#开始  #！这是固定格式 表示用什么解释器解释这个程序这里是用bin目录下的bash解释器</span><span class="token builtin class-name">echo</span> <span class="token string">"Hello shit of Ynnubs!"</span><span class="token assign-left variable">WorkDir</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">pwd</span><span class="token variable">`</span></span><span class="token builtin class-name">echo</span> -e <span class="token string">"In<span class="token entity" title="\033">\033</span>[31;32m <span class="token variable">${WorkDir}</span> <span class="token entity" title="\033">\033</span>[0m"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/05/lvutx3qCR64LecT.png" alt=""></p><p>​        </p><ul><li><p><strong>局部变量</strong></p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">local</span> <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>特殊变量</strong></p><ul><li><strong>位置变量</strong>：讲的是参数是怎么用的</li><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/05/BlEYjNO8VoRuCQI.png" style="zoom: 50%;"></li></ul></li><li><p>我们用脚本语言应该也能传参  那么如何传参呢</p><ul><li>如下图 我已经将arg1和arg2传进去了  只是我的程序并没有对参数进行处理  所以我要改写程序</li></ul></li><li><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/05/B8ZOFqQDYPkWihV.png" alt=""></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash </span><span class="token comment">#这是注释  用#开始  #！这是固定格式 表示用什么解释器解释这个程序这里是用bin目录下的bash解释器</span><span class="token builtin class-name">echo</span> <span class="token string">"Hello shit of Ynnubs!"</span><span class="token assign-left variable">WorkDir</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">pwd</span><span class="token variable">`</span></span><span class="token builtin class-name">echo</span> -e <span class="token string">"In<span class="token entity" title="\033">\033</span>[31;32m <span class="token variable">${WorkDir}</span> <span class="token entity" title="\033">\033</span>[0m"</span> <span class="token comment">#-e是打开转义的意思</span><span class="token builtin class-name">echo</span> <span class="token string">"Program Name : <span class="token variable">$0</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"Arg1 : <span class="token variable">$1</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"Arg2 : <span class="token variable">$2</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"Arg3 : <span class="token variable">$3</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"Arg4 : <span class="token variable">$4</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"Arg5 : <span class="token variable">$5</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"Arg6 : <span class="token variable">$6</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"\<span class="token variable">$@</span> : <span class="token variable">$@</span>"</span>    <span class="token comment"># \ 为转义字符 你懂的 和c语言一样的</span><span class="token builtin class-name">echo</span> <span class="token string">"\<span class="token variable">$*</span> : <span class="token variable">$*</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"\<span class="token variable">$#</span> : <span class="token variable">$#</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行效果</p></li></ul><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210713125759.png" style="zoom:50%;"></p><p>​        </p><p>​         </p><p>​                    </p><ul><li><strong>输入输出</strong></li><li><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/05/8nVIiBEpe7qKGMD.png" style="zoom: 33%;"></p></li><li><p><code>-p</code>和<code>-s</code>用的最多</p><ul><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/05/FI2rC3AmqvXwdNZ.png" style="zoom: 80%;"></li></ul></li><li><p><code>-t</code>用的也挺多  若超过响应时间 会自动判定执行失败</p><p>  <img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/05/hyXEI269qOBeKWj.png" style="zoom: 80%;"></p></li><li><p>输出：echo</p><ul><li>-e：开启转义</li></ul></li><li><p>输出：printf</p><ul><li>和C语言的printf非常像！</li><li><a href="https://gitee.com/doubleL3/blog-imgs/raw/master/img/eDTN857.png"><img src="/img/loading.gif" data-original="https://gitee.com/doubleL3/blog-imgs/raw/master/img/eDTN857.png" alt="图片"></a></li><li>[PS] !和\n放一起有特殊含义，需要分开<ul><li>bash下需要分开</li><li>zsh下可以分开，或用\转义</li><li>一般对于<a href="https://www.runoob.com/w3cnote/shell-special-char.html">特殊符号</a>——菜鸟教程，需要警觉！</li></ul></li></ul></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/05/JVNw3ILP9YhlpTu.png" style="zoom: 33%;"></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>  <span class="token comment">#最好保留function 和() 增加可读性</span><span class="token keyword">function</span> <span class="token function-name function">__printf__</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">#两个下划线</span>      <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$1</span>"</span>      <span class="token builtin class-name">return</span>  <span class="token punctuation">}</span>    __printf__ <span class="token string">"Hello shit of Ynnubs"</span>  <span class="token comment">#这是函数的调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>没有形参</li><li>定义：写法很多，function、()、{}组合搭配，第3种更类似C语言写法</li><li>调用：函数名 参数…</li><li>加function方便阅读</li><li>❗【注意】shell中函数return的返回值有限制，范围是0-255，溢出会循环换算</li></ul><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a><strong>流程控制</strong></h2><ul><li><p><strong><code>if</code>语句</strong></p></li><li><p>建议写成这种形式 因为兼容性更强</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">read</span> a  <span class="token comment">#表示输入一个参数 个人感觉类似与scanf</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${a}</span> -gt <span class="token number">10</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$a</span> &gt; 10"</span><span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${a}</span> -eq <span class="token number">10</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$a</span> = 10"</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${a}</span> &lt; 10"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>​    </p><ul><li><p><code>[[  ]]</code>  这个里面写的是<code>test</code>表达式  可以通过<code>man</code>手册查阅   </p><ul><li>可判断类型：字符串、整型、文件</li><li>❗ 【注意】条件为真时，返回0，否则返回非0<ul><li>Linux中命令的返回值也是如此，0才代表成功</li></ul></li><li>[PS]<ul><li>STRING1 = STRING2 也可以用== 【推荐后者，两个中括号[[ ]]支持】</li><li>-G FILE：文件存在并且被有效组ID拥有</li><li>如果组被解散了，则组控制的文件的组ID就是无效的</li></ul></li></ul></li><li><p>我们再来举个例子</p>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">TargetFile</span><span class="token operator">=</span><span class="token string">"a.c"</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> -r <span class="token variable">${TargetFile}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token comment"># -r 文件存在并且可读</span>gcc a.c -o a  <span class="token comment"># 编译a.c</span>    ./a      <span class="token comment"># 执行</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${TargetFile}</span> not Found!"</span> <span class="token comment"># 否则输出找不到</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>   <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//a.c文件</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Czpei is my son!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/06/Lp3KBva6qQdgTDI.png" alt=""></li></ul></li><li><p><strong><code>case</code>语句</strong></p>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">read</span> a<span class="token keyword">case</span> <span class="token variable">$a</span> <span class="token keyword">in</span>    <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token number">1</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token number">2</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span> <span class="token comment">#默认情况</span>        <span class="token builtin class-name">echo</span> <span class="token string">"Not Found"</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>用的比较少 做菜单的时候可以使用case语句</li></ul></li><li><p><strong>循环</strong></p><ul><li><p><code>for</code>两种形式</p></li><li><p>双小括号<code>(())</code>中的内容只要符合C语言运算规则即可，变量可以不使用变量前缀$，可以写i++，平常不可以用++</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable">$@</span><span class="token punctuation">;</span><span class="token keyword">do</span>    <span class="token comment">#$@表示对所有参数</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>while</code>语句</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$num</span> -lt <span class="token number">100</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">${num}</span>    <span class="token assign-left variable">num</span><span class="token operator">=</span>$<span class="token punctuation">[</span> <span class="token variable">${num}</span> + <span class="token number">1</span> <span class="token punctuation">]</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>until</code>语句</p><ul><li><p>直到 满足某个条件才会结束循环</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token number">0</span><span class="token keyword">until</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$num</span> -eq <span class="token number">100</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">do</span>      <span class="token builtin class-name">echo</span> <span class="token variable">$num</span>    <span class="token assign-left variable">num</span><span class="token operator">=</span>$<span class="token punctuation">[</span> <span class="token variable">${num}</span> + <span class="token number">1</span> <span class="token punctuation">]</span><span class="token keyword">done</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>for循环求偶数和</p>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment">#for i in `seq 1 100`  #seq表示生成1-100的序列 但是效率低下 因为seq是个进程 系统会每次调用</span><span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">))</span></span><span class="token punctuation">;</span><span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> $<span class="token punctuation">[</span> <span class="token variable">${i}</span> % <span class="token number">2</span> <span class="token punctuation">]</span> -eq <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token assign-left variable">sum</span><span class="token operator">=</span>$<span class="token punctuation">[</span> <span class="token variable">${sum}</span> + <span class="token variable">${i}</span><span class="token punctuation">]</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token builtin class-name">echo</span> <span class="token string">"sum = <span class="token variable">${sum}</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="求素数和"><a href="#求素数和" class="headerlink" title="求素数和"></a>求素数和</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">function</span> <span class="token function-name function">Usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Usage : <span class="token variable">$0</span> start_num end_num"</span> <span class="token comment">#$0获取当前执行shell脚本的文件名，包括路径</span>    <span class="token builtin class-name">exit</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">is_prime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token variable">$1</span>    <span class="token builtin class-name">local</span> i    <span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>${num}<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">))</span></span><span class="token punctuation">;</span><span class="token keyword">do</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> $<span class="token punctuation">[</span> <span class="token variable">${num}</span> % <span class="token variable">$i</span> <span class="token punctuation">]</span> -eq <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>            <span class="token builtin class-name">return</span> <span class="token number">1</span>        <span class="token keyword">fi</span>    <span class="token keyword">done</span>    <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$#</span> -ne <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span> <span class="token comment"># $#得到执行当前脚本的参数个数</span>    Usage<span class="token keyword">fi</span><span class="token assign-left variable">Start</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token assign-left variable">End</span><span class="token operator">=</span><span class="token variable">$2</span><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span>${Start}<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>${End}<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span><span class="token keyword">do</span>    is_prime <span class="token variable">$i</span>  <span class="token comment">#函数的调用</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$?</span> -eq <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token assign-left variable">sum</span><span class="token operator">=</span>$<span class="token punctuation">[</span> <span class="token variable">${sum}</span> + <span class="token variable">$i</span> <span class="token punctuation">]</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token builtin class-name">echo</span> <span class="token variable">$sum</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>⚡注意这种方法求解素数效率低下  求10-20000 内的素数和 cpu就快爆了  但是利用算法是可以提高效率的 </p></li><li><p>$+变量名 == 取值</p></li><li><p>调试 </p><ul><li><p>全局调试<code>bash -x</code></p></li><li><p>局部调试</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> -x<span class="token comment">#...代码段..#</span><span class="token builtin class-name">set</span> +x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li></li></ul></li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/06/IKH7jPWdJ9yCGaf.png" style="zoom: 50%;"></p><h2 id="让我们先来了解下数组"><a href="#让我们先来了解下数组" class="headerlink" title="让我们先来了解下数组"></a><strong>让我们先来了解下数组</strong></h2><ul><li>声明</li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/06/qcQWA7PbMFXKSpw.png" style="zoom: 50%;"></p><ul><li><p>bash中对数组的一些操作</p><p>  <img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/06/vJK6j8L2HsDd3et.png" style="zoom: 80%;"></p><p>  <img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/06/ZDrE4X5g3IyOoQ1.png" alt=""></p></li></ul><h3 id="素数筛求解"><a href="#素数筛求解" class="headerlink" title="素数筛求解"></a><strong>素数筛求解</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$#</span> -ne <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Error"</span>    <span class="token builtin class-name">exit</span><span class="token keyword">fi</span><span class="token assign-left variable">Start</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token assign-left variable">End</span><span class="token operator">=</span><span class="token variable">$2</span><span class="token builtin class-name">declare</span> -a Prime<span class="token keyword">function</span> <span class="token function-name function">init_prime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">end</span><span class="token operator">=</span><span class="token variable">$1</span> <span class="token comment"># 此时的$1表示传进去的第一个参数</span>    <span class="token builtin class-name">local</span> i    Prime<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>${end}<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span><span class="token keyword">do</span>        <span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>j<span class="token operator">=</span>$[ ${i} <span class="token operator">*</span> ${i} ]<span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>${end}<span class="token punctuation">;</span> j<span class="token operator">+=</span>i<span class="token punctuation">))</span></span><span class="token punctuation">;</span><span class="token keyword">do</span>            Prime<span class="token punctuation">[</span><span class="token variable">${j}</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">done</span>    <span class="token keyword">done</span><span class="token punctuation">}</span>init_prime <span class="token variable">${End}</span>  <span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span>${Start}<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>${End}<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span><span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${Prime<span class="token punctuation">[</span>$i<span class="token punctuation">]</span>}</span>x <span class="token operator">==</span> x <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  <span class="token comment">#x表示字符串拼接 这句话判断Prime[i]是否为空 若为空 则为素数</span>        <span class="token assign-left variable">sum</span><span class="token operator">=</span>$<span class="token punctuation">[</span> <span class="token variable">${sum}</span> + <span class="token variable">${i}</span> <span class="token punctuation">]</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token builtin class-name">echo</span> <span class="token variable">${sum}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="附加知识点"><a href="#附加知识点" class="headerlink" title="附加知识点"></a>附加知识点</h3><ul><li><p>.sh脚本可以直接bash或source执行，如果要使用./需要有可执行权限</p><ul><li><a href="https://www.cnblogs.com/pcat/p/5467188.html">source、sh、bash、./有什么区别</a>——cnblogs</li></ul></li><li><p>set -x可以开启shell调试</p></li><li><p>Shell命令替换：将命令的输出结果赋值给变量</p><p>  ——C语言中文网</p><ul><li>$() 支持嵌套，反引号``不行</li><li>$() 仅在 Bash 中有效 [似乎zsh、sh都支持]，而反引号``可在多种 Shell 中使用</li></ul></li><li><p>双小括号(())中的内容</p><ul><li>只要符合C语言运算规则即可</li><li>变量可以不使用变量前缀$</li><li>可以写i++，平常不可以用++</li></ul></li><li><p>⭐在Shell中，变量还未定义时，其值为空，echo输出表现为空行</p></li><li><p>⭐空格问题【严格】</p><ul><li>赋值语句：=左右不能有空格</li><li>TEST表达式：[[ ]]两端必须有空格</li></ul></li><li><p>对于变量名i，如果想将$i与_i拼接，用$i_i，会去找变量i_i，所以要用${i}_i</p></li></ul><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ul><li>写Shell脚本<ul><li>不要太考虑性能，单纯做数学计算效率低</li><li>为的是快速解决一个问题，用来规划所有任务的流程</li><li>做操作前记得加【备份】操作</li><li>一般是让系统做事情，难于操作特定的程序做事情<ul><li>程序一般有自己的参数设置，但不具有普适性</li></ul></li></ul></li><li>API一般指服务</li><li>⭐<a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-shell-styleguide/contents/">Shell 风格指南</a>——Google 开源项目风格指南——Shell编程规范</li><li><a href="https://sukbeta.github.io/shell-comment/">Shell脚本多行注释和单行注释的方法</a>——博客</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">:<span class="token operator">&lt;&lt;</span><span class="token operator">!</span><span class="token punctuation">[</span>要注释的代码<span class="token punctuation">]</span><span class="token operator">!</span>复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以了解<a href="https://www.runoob.com/linux/linux-comm-let.html">let</a>——菜鸟教程，方便的语法</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表与布隆过滤器</title>
      <link href="posts/69d8.html"/>
      <url>posts/69d8.html</url>
      
        <content type="html"><![CDATA[<h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><blockquote><p>哈希表是利用数组的快速存取的特性<span class="github-emoji"><span>👉</span><img src="/img/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>关键是利用哈希函数——设计感极强</p><p>哈希函数：将任意数据类型映射成数组下标，数据类型不同，映射过程也不相同</p><p><span class="github-emoji"><span>⭐</span><img src="/img/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>哈希的过程本质是 高维-&gt;低维的转换，哈希冲突一定会发生，但是可以通过很多方式预防这种冲突，但是这种冲突是无法避免的</p><p>冲突处理方法：开放定址法，再哈希法，建立公共溢出区，链式地址法（拉链法）</p></blockquote><p>可查看中<a href="https://srymaker0.com/posts/73f4">数据结构基础——C语言实验</a>哈希过程</p><h2 id="开放定址法"><a href="#开放定址法" class="headerlink" title="开放定址法"></a>开放定址法</h2><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210710205559.png" style="zoom:50%;"></p><p>注意扩容操作——装填因子：$\frac{存储元素个数}{哈希总容量}=0.75$ ，假设有100个容量存储数据，当容量为75个时就应该进行扩容操作</p><p>扩容的时间复杂度——算的是均摊时间复杂度$O(1)$, $\frac{n}{2}+\frac{n}{4}+\frac{n}{8}+…\approx n$ </p><p>估算：假设有n个元素，并且第一次发生扩容操作在$\frac{n}{2}$处，那么第一次的时间复杂度为$\frac{n}{2}$，依次类推所有元素进行的扩容操作为$O(n)$,但是算均摊，每一个元素进行的扩容操作为$O(1)$</p><h2 id="建立公共溢出缓冲区"><a href="#建立公共溢出缓冲区" class="headerlink" title="建立公共溢出缓冲区"></a>建立公共溢出缓冲区</h2><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210710222603.png" style="zoom:50%;"></p><p>当发生冲突，直接将元素放入set容器中（公共溢出缓冲区）</p><p>set底层是红黑树，单次查找，插入时间复杂度都是$O(logn)$</p><p>注意扩容的时候 缓冲区的值也要拷贝给新的哈希表</p><h2 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h2><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210710223124.png" style="zoom:50%;"></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210710223208.png" style="zoom:50%;"></p><h2 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h2><p>传统哈希表——存储空间与元素数量有关</p><p>布隆过滤器——存储空间与元素数量无关</p><p>关于爬虫：爬网站可以将这些存储在哈希表中，一样的url会被去重，但是动态网络的url可能非常庞大，使用传统哈希表存储可能占用几TB的存储空间</p><p>布隆过滤器的应用：大数据量；有信息安全要求</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210710224832.png" style="zoom: 33%;"></p><p>设计巧妙之处：一个数据经过3个哈希函数，得到3个数组下标，查找数组若这3个下标对应的值都为1，则说明这个数据大概率存在，若有一个是0，则一定不存在</p><p>缺点：存在误判，只能准确判断一个数据不存在</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面向面试选择题之查漏补缺</title>
      <link href="posts/2dfc.html"/>
      <url>posts/2dfc.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>  选择题包含Linux， 计算机网络，C++语法，操作系统，数据结构等方面的知识点，非常适合查漏补缺</p><p>  这些错题个人感觉比较基础，对于操作系统知识需要加强，有一些个人不常见的Linux命令也会考到</p><p>  <span class="github-emoji"><span>⭐</span><img src="/img/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>需要了解对于图这样的数据结构，对于二叉树来说（结点=边数+1）经常考到</p><p>  计算机网络考查最多的——TCP、UDP等一系列知识，需重点注意</p></blockquote><h1 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h1><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210520105933.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210520105856.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210517133930.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210520105811.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210520110007.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210520110102.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210520110118.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210520110154.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210520110318.png" alt=""></p><p><img src="/img/loading.gif" data-original="/Users/sorrymaker/Library/Application Support/typora-user-images/image-20210520110411001.png" alt="image-20210520110411001"></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210520110445.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210524134029.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210524134125.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620201107.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620201015.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620201200.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620201234.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620201302.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620201320.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620201344.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620201403.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620201424.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620201442.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620201501.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620201519.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620201543.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620201601.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620201620.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620201635.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620201656.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620201720.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620201738.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620201756.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620201849.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620201912.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620201930.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620202132.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620202151.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620202209.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620202230.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620202249.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620202306.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620202337.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620202355.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620202413.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620202429.png" alt=""></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络概述</title>
      <link href="posts/2a8a.html"/>
      <url>posts/2a8a.html</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><p>推荐书籍</p><ul><li>《计算机网络——自顶向下方法》</li></ul><p>视频理解</p><ul><li>Youtube——How it works? Internet TCP/IP model explained, data transfer</li><li>以动画形式通俗易懂的解释访问网站数据包转移的过程</li></ul><p>如何学习计算机网络</p><ul><li>抱着认识计算机网络世界的心态学习</li><li>修炼的是内功，别想着学了计算机网络就能成仙！</li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>网络中心</p><ul><li>可以理解为路由器</li></ul><p>网络边缘</p><ul><li>提供服务和享受服务的——家庭网络，移动网络（蜂窝），公司网络</li><li>边缘网络会通过某种形式进入互联网</li></ul><p>DSL（数字用户线接入）</p><ul><li>电话线和网线做频分复用<ul><li>0-4k：电话线数据传输</li><li>4-50k：上传数据</li><li>50k-1M：下行数据</li></ul></li><li>DSL调制解调器</li></ul><p>FTTH</p><ul><li>光纤到户</li><li>最常见的接入模式</li></ul><p>以太网</p><ul><li>公司，学校最常见——由机构ISP提供服务</li><li>拉的是专线（中国移动，联通，电信）</li></ul><h2 id="OSI七层参考模型"><a href="#OSI七层参考模型" class="headerlink" title="OSI七层参考模型"></a>OSI七层参考模型</h2><div class="table-container"><table><thead><tr><th style="text-align:center">参考模型</th><th style="text-align:center">各层解释</th><th style="text-align:center">对应设备</th><th style="text-align:center">典型协议</th><th style="text-align:center">协议数据单元</th></tr></thead><tbody><tr><td style="text-align:center">应用层</td><td style="text-align:center">为应用程序提供服务</td><td style="text-align:center">计算机</td><td style="text-align:center">DHCP、DNS</td><td style="text-align:center">报文message</td></tr><tr><td style="text-align:center">表示层</td><td style="text-align:center">数据格式转换、数据加密</td><td style="text-align:center">计算机</td><td style="text-align:center">Telnet、SNMP</td><td style="text-align:center">报文message</td></tr><tr><td style="text-align:center">会话层</td><td style="text-align:center">建立、管理、维护会话</td><td style="text-align:center">计算机</td><td style="text-align:center">SMTP、SSH</td><td style="text-align:center">报文message</td></tr><tr><td style="text-align:center">传输层</td><td style="text-align:center">建立、管理、维护端到端的连接</td><td style="text-align:center">进程和端口</td><td style="text-align:center">TCP、UDP</td><td style="text-align:center">报文段segment、用户数据报</td></tr><tr><td style="text-align:center">网络层</td><td style="text-align:center">IP选址与路由选择</td><td style="text-align:center">路由器、防火墙、多层交换机</td><td style="text-align:center">IP、ICMP、ARP</td><td style="text-align:center">IP数据报</td></tr><tr><td style="text-align:center">数据链路层</td><td style="text-align:center">提供介质访问和链路管理</td><td style="text-align:center">网卡、网桥、交换机</td><td style="text-align:center">PPP、Internet</td><td style="text-align:center">帧frame</td></tr><tr><td style="text-align:center">物理层</td><td style="text-align:center">物理层</td><td style="text-align:center">中继器、集线器、网线</td><td style="text-align:center">IEEE 802</td><td style="text-align:center">比特bit</td></tr></tbody></table></div><p>物理层</p><ul><li>对信号和数据的传输——只有传输这一个作用，其它什么也不做</li><li>中继器：对信号的加强</li></ul><p>数据链路层（注意与物理层的区分）</p><ul><li><p>链路是人类抽象出来的，但是设备还是真实存在的</p></li><li><p>网卡（网络适配器）—— 可以对数据进行处理</p></li><li>网桥——用于网络与网络的连接</li></ul><p>网络层</p><ul><li><p>IP选址</p><ul><li><p>对某个明确的地址编址，必须有某种明确的协议，并让所有人知道</p></li><li><p>告诉你一个真实的地址，我们可以从任何地方到达这个地址</p></li></ul></li><li><p>路由选择</p><ul><li>比如从新疆到杭州，有很多路可以走，但我们肯定会选择最优路径</li></ul></li><li><p>防火墙</p><ul><li>通过我这个地方的数据是符合我的要求的</li></ul></li><li><p>交换机</p><ul><li><p>二层交换机：在数据链路层</p><ul><li>可以联想成一个村里的万事通，想找一个人，交换机会在记忆里寻找，若找到则会告诉你你要找的人的所在地</li><li>若找不到：会进行广播，在局域网里寻找这个人</li></ul></li><li><p>多层交换机：在网络层</p><ul><li>同样是找人，但是万事通在一个村里找不到这个人，就去找隔壁村的万事通</li><li>在两个村里可以进行交流</li></ul></li></ul></li><li><p>路由器（router）</p><ul><li>家用的就是常见路由器</li><li>企业、学校：插满网卡，网线的设备，很多入口、出口</li></ul></li></ul><p><span class="github-emoji"><span>⭐</span><img src="/img/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>传输层——什么叫作端到端的连接</p><ul><li>端到端-&gt;端口到端口的通讯</li><li>端口——房间号：可以理解为小区里的1单元1002号，但这个地址是局部的，全中国有很多个这个地址</li><li>比如两个人的通信，我在杭州某小区1单元1002号房间， 但是女朋友在北京某小区1单元1003号房间，看似隔得很近，但是却不在一个局域里，这时要想通信，就要先建立地址（具体到某条路什么小区）的连接（主机和主机）-&gt;经过网络层</li><li>进程：可以理解为房间内-&gt;进程空间</li><li>TCP：传输控制协议。UDP：用户数据报协议</li></ul><p>应用层</p><ul><li>给用户提供服务</li></ul><p>为什么是<strong>参考</strong>模型</p><ul><li><p>历史原因：创造网络的专家觉得应该设立一个标准，利于日后网络的维护，管理。</p><ul><li>但是却缺乏实际的经验，并且缺乏商业驱动力</li></ul></li><li><p>缺点：设计过于复杂，运行效率低，制定的周期长，划分不合理（有些重复）</p></li></ul><p>TCP/IP五层模型的出现（国际标准）</p><ul><li><p>将应用层、表示层、会话层合并成应用层</p><ul><li><p>简化了原来的模型</p></li><li><p>只有五层——物理、链路、网络、传输、应用</p></li></ul></li></ul><h2 id="数据包的封装"><a href="#数据包的封装" class="headerlink" title="数据包的封装"></a>数据包的封装</h2><p><img src="/img/loading.gif" data-original="https://i.loli.net/2021/04/15/jIZbXFQyixUf2qH.png" style="zoom: 25%;"></p><p>从源到目的地的数据包到底经历了什么<span class="github-emoji"><span>❓</span><img src="/img/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><ul><li><p>每一层都会给数据包打上一个标签（$H_t \space H_n$等）</p></li><li><p>可以把这比作给女朋友写信，由应用层发起（M），信写好之后传给传输层，建立端到端的连接（写上女朋友的房间号$H_t$），接着经过网络层再进一步补充地址（某个城市某条路上的小区）</p><ul><li><img src="/img/loading.gif" data-original="https://i.loli.net/2021/04/15/NYc2r74K8dqb5vR.png" style="zoom:33%;"></li><li>此时会判断女朋友是否在异地（外网还是内网）<ul><li>方法：用子网掩码与IP地址做位与运算，比如我们要访问8.8.8.8，与子网掩码相与为8.8.8.0 不等于 192.168.1.0，此时就可以判断要访问的IP是外网</li></ul></li><li>ok，现在就可以把信交给万事通了（此时为路由器），由路由器去选择路径，最后通过物理层传输到对方网关，然后进行数据包的解析，传到女朋友那！</li></ul></li></ul><p>封装分层的好处</p><ul><li>各层之间是独立的</li><li>灵活性好</li><li>结构上可分割开</li><li>易于实现和维护</li><li>能促进标准化工作</li></ul><p>各层的功能</p><ul><li>差错控制</li><li>流量控制</li><li>分段和复用</li><li>复用和分用</li><li>连接建立和释放</li></ul><p>网络协议的组成要素</p><ul><li>语法：数据与控制信息的结构</li><li>语义：发出何种控制信息做出何种动作</li><li>同步：事件发生的顺序，事件发生是由一定的顺序的</li></ul><h2 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h2><p>分组交换</p><ul><li><img src="/img/loading.gif" data-original="https://i.loli.net/2021/04/16/O2r7QvIjFlWUAXm.png" alt=""></li><li>把一个Message分成很多个小的Packet，让这些Packet自己决定选哪条路走，最后在一个目的地汇合</li><li>我们用TCP协议发送了一个数据，这个数据会分成很多个小的数据包，这些数据包不一定走一条路线<ul><li>网络瞬息万变，可能一条路走不通就换条路</li></ul></li></ul><p>存储转发机制</p><ul><li><img src="/img/loading.gif" data-original="https://i.loli.net/2021/04/16/pEhGyu8tOAQv2oX.png" alt=""></li><li>目的：防止数据被篡改，确保接收到的数据是有效的</li></ul><p>排队时延和分组丢失</p><ul><li><img src="/img/loading.gif" data-original="https://i.loli.net/2021/04/16/puXdaHhk7eQMKUo.png" alt=""></li><li>排队时延：最不可控<span class="github-emoji"><span>👉</span><img src="/img/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>ping值</li><li>如果排队队列满：路由器会决定丢弃什么数据</li><li><span class="github-emoji"><span>❓</span><img src="/img/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>排队时延是如何产生的<ul><li>假设家里是千兆网，而此时路由器带宽只有1.5Mbps，那么我们发的数据就会拥塞在路由器中（输出队列的排队），不能及时的发数据，就会产生分组丢失（丢包）</li><li>对于产生分组丢失：路由器会要求发送方重新发一个数据包</li></ul></li></ul><p>转发表、路由选择协议</p><ul><li><img src="/img/loading.gif" data-original="https://i.loli.net/2021/04/16/Obi2cSE6D9hgxyL.png" alt=""></li><li>当一个数据包传到路由器时，路由器会对数据包的地址和自身的转发表进行最长前缀匹配，若匹配到，则会重新进行封装，从这个链路传输出去</li><li>两者关系：路由选择协议会不断更新路由器的转发表</li></ul><h2 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h2><p>电路交换：端到端的连接</p><ul><li><img src="/img/loading.gif" data-original="https://i.loli.net/2021/04/16/dspuCrMYie4tVJh.png" alt=""></li><li>早期人类拨打电话</li><li>当线路被占满，其他人都不可用</li><li>真实的端到端的连接：有真实的线路</li></ul><h2 id="分组交换与电路交换的对比"><a href="#分组交换与电路交换的对比" class="headerlink" title="分组交换与电路交换的对比"></a>分组交换与电路交换的对比</h2><ul><li>分组交换提供了更好的带宽共享、灵活简单、实现成本低</li></ul><h2 id="再探时延"><a href="#再探时延" class="headerlink" title="再探时延"></a>再探时延</h2><div class="table-container"><table><thead><tr><th style="text-align:center">时延类型</th><th style="text-align:center">时延量级</th><th style="text-align:center">影响因素</th></tr></thead><tbody><tr><td style="text-align:center">结点处理时延</td><td style="text-align:center">微秒或更低</td><td style="text-align:center">处理器能力</td></tr><tr><td style="text-align:center">排队时延</td><td style="text-align:center">微秒到毫秒</td><td style="text-align:center">流量的强度</td></tr><tr><td style="text-align:center">传输时延</td><td style="text-align:center">微秒到毫秒</td><td style="text-align:center">带宽</td></tr><tr><td style="text-align:center">传播时延</td><td style="text-align:center">毫秒</td><td style="text-align:center">距离远近</td></tr></tbody></table></div><p>结点处理时延：解开标签的过程，很快</p><p>排队时延：对于网络的波动的参照</p><ul><li>最不稳定、波动性大</li><li><img src="/img/loading.gif" data-original="https://i.loli.net/2021/04/16/98Xs6RICkSFwOHK.png" style="zoom:33%;"></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql之基础篇</title>
      <link href="posts/3361.html"/>
      <url>posts/3361.html</url>
      
        <content type="html"><![CDATA[<h1 id="mysql基础"><a href="#mysql基础" class="headerlink" title="mysql基础"></a>mysql基础</h1><blockquote><p>  mysql语言，多练才是王道！</p><p>  什么是<a href="https://en.wikipedia.org/wiki/MySQL">mysql</a>——from Wiki</p><p>  <img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210521205132.png" alt=""></p><p>  使用可视化工具——Datagrip，提高开发效率</p></blockquote><h1 id="表的操作"><a href="#表的操作" class="headerlink" title="表的操作"></a>表的操作</h1><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">DATABASES</span><span class="token punctuation">;</span><span class="token keyword">use</span> mysql<span class="token punctuation">;</span>              <span class="token comment">/* 选择数据库 */</span><span class="token keyword">SELECT</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment"># 查看当前使用的数据库</span><span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> mydb <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span>  utf8mb4<span class="token punctuation">;</span>    <span class="token comment"># 创建数据库</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> mydb2<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> mydb2 <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span>  utf8mb4<span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> mydb<span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> mydb<span class="token punctuation">;</span>                  <span class="token comment"># 删除数据库，先判断是否存在，这样不会报错</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> mydb2<span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span> mydb2 <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4<span class="token punctuation">;</span>    <span class="token comment"># 修改数据库字符编码</span><span class="token comment">-- 创建表student，字段包括 编号id、 姓名name、年龄age</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student <span class="token punctuation">(</span>    id <span class="token keyword">INT</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    age <span class="token keyword">INT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建表users，字段包括 编号id、 姓名username、密码password</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> users <span class="token punctuation">(</span>    id <span class="token keyword">INT</span><span class="token punctuation">,</span>    username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    PASSWORD <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> users<span class="token punctuation">;</span><span class="token comment">/*CREATE TABLE `users` (  `id` int(11) DEFAULT NULL,  `username` varchar(100) DEFAULT NULL,  `PASSWORD` varchar(100) DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;*/</span><span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span><span class="token keyword">DROP</span>  <span class="token keyword">TABLE</span> users<span class="token punctuation">;</span><span class="token keyword">SHOW</span>  <span class="token keyword">TABLES</span><span class="token punctuation">;</span><span class="token comment">-- 添加新的列</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student <span class="token keyword">ADD</span> <span class="token punctuation">`</span><span class="token keyword">desc</span><span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">;</span><span class="token comment">-- 修改列的数据类型</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student <span class="token keyword">MODIFY</span> <span class="token punctuation">`</span><span class="token keyword">desc</span><span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 修改列的名称</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student CHANGE <span class="token punctuation">`</span><span class="token keyword">desc</span><span class="token punctuation">`</span> description <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 删除指定列</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student <span class="token keyword">DROP</span> description<span class="token punctuation">;</span><span class="token comment">-- 修改表的名称</span><span class="token keyword">RENAME</span> <span class="token keyword">TABLE</span> student <span class="token keyword">To</span> stu<span class="token punctuation">;</span><span class="token comment">-- 修改表的字符编码</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> gbk<span class="token punctuation">;</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu<span class="token punctuation">;</span><span class="token comment">-- 插入表记录</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu<span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'tom'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'lili'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu<span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'jim'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 插入多条记录</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'jack'</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu<span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 更新表记录</span><span class="token keyword">UPDATE</span> stu <span class="token keyword">SET</span> name<span class="token operator">=</span><span class="token string">'lili'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">21</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">UPDATE</span> stu <span class="token keyword">SET</span> age<span class="token operator">=</span><span class="token number">25</span> <span class="token keyword">WHERE</span> age<span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">;</span><span class="token comment">-- 删除记录</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> stu <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> stu <span class="token keyword">WHERE</span> age <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="查询必知必会系列"><a href="#查询必知必会系列" class="headerlink" title="查询必知必会系列"></a>查询必知必会系列</h1><blockquote><p>查询操作是工作中使用最多的操作</p><p>这部分需要大量练习</p></blockquote><h2 id="原始数据——products"><a href="#原始数据——products" class="headerlink" title="原始数据——products"></a>原始数据——products</h2><p>基于这张表做一些查询练习<span class="github-emoji"><span>👇</span><img src="/img/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/1f447.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210521204623.png" alt=""></p><h2 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h2><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210521204449.png" style="zoom:67%;"></p><p><code>*</code> ——通配符，查找效率慢<span class="github-emoji"><span>👉</span><img src="/img/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>一般项目开发中都写出所有的列​</p><p><code>DISTINCT</code>——应用与所有列</p><h2 id="条件限制"><a href="#条件限制" class="headerlink" title="条件限制"></a>条件限制</h2><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210521210035.png" alt=""></p><p><span class="github-emoji"><span>❗</span><img src="/img/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>注意Mysql中行号从<code>0</code>开始</p><p>分页查询语句——<code>SELECT * FROM 表名 LIMIT startRow,pageSize;</code></p><ul><li>后台根据当前页，自动计算开始的行号</li></ul><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p><code>SELECT 列名,... FROM 表名 ORDER BY 排序字段 ASC|DESC;</code></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210521212553.png" alt=""></p><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210521212959.png" alt=""></p><p><code>SELECT prod_name,vend_id,prod_price FROM products WHERE vend_id =1001 OR vend_id=1002 AND prod_price&gt;10;</code></p><p>不加括号</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210521202733.png" style="zoom:33%;"></p><p><code>SELECT prod_name,vend_id,prod_price FROM products WHERE (vend_id =1001 OR vend_id=1002) AND prod_price&gt;10;</code></p><p>加括号</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210521202822.png" style="zoom:33%;"></p><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><p><code>SELECT 列名,... FROM 表名 WHERE 列名 LIKE 条件;</code></p><p>like语句中， <code>%</code>代表零个或多个任意字符，<code>_</code>代表一个字符</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210521214028.png" alt=""></p><p><span class="github-emoji"><span>❗</span><img src="/img/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>通配符虽然好用， 但不要滥用， 尽量不要把%放在最前面， 比如：where like 因为这也搜索效率会很慢</p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p><code>SELECT 列名 FROM 表名 WHERE 列名 REGEXP '条件';</code></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210521214244.png" alt=""></p><p>函数</p><p>这部分涉及到3张表——先前的products表以及下面两张</p><p><code>orderitems</code>表</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210614130751.png" style="zoom:50%;"></p><p><code>orders</code>表</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210614130541.png" style="zoom:50%;"></p><h2 id="文本函数"><a href="#文本函数" class="headerlink" title="文本函数"></a>文本函数</h2><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210526105505.png" alt=""></p><h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><p><code>DATE_ADD()</code></p><p> 函数向日期添加指定的时间间隔。</p><p>格式：<code>DATE_ADD(date,INTERVAL expr type)</code> </p><p>解析：date 参数是合法的日期表达式。expr 参数是希望添加的时间间隔。</p><p>格式化时间</p><p><code>DATE_FORMAT()</code></p><p> 函数用于以不同的格式显示日期/时间数据。</p><p>格式： <code>DATE_FORMAT(date,format)</code></p><p>date 参数是合法的日期。format 规定日期/时间的输出格式。</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210526111932.png" alt=""></p><h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><p>查询商品表， 并对商品价格进行四舍五入</p><p><code>SELECT round(prod_price) FROM products;</code></p><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p>我们经常需要汇总数据而不用把它们实际检索出来，为此MySQL提供了专门的函数。 </p><p>聚集函数（aggregate function） 运行在行组上，计算和返回单个值的函数。</p><p>常见的聚合函数：<span class="github-emoji"><span>👇</span><img src="/img/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/1f447.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h3 id="MAX"><a href="#MAX" class="headerlink" title="MAX()"></a>MAX()</h3><ul><li>MAX() 函数返回指定列的最大值。 </li><li>格式： SELECT MAX(column_name) FROM table_name;</li></ul><h3 id="MIN"><a href="#MIN" class="headerlink" title="MIN()"></a>MIN()</h3><ul><li>MIN() 函数返回指定列的最小值。 </li><li>格式： SELECT MIN(column_name) FROM table_name;</li></ul><h3 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT()"></a>COUNT()</h3><ul><li>COUNT() 函数返回匹配指定条件的行数。</li></ul><ol><li>COUNT(column_name) 函数返回指定列的值的数目（NULL 不计入）<br>格式： SELECT COUNT(column_name) FROM table_name;</li><li>COUNT(<code>*</code>) 函数返回表中的记录数（null也计入）<br> 格式： SELECT COUNT(<code>*</code>) FROM table_name;</li></ol><h3 id="SUM"><a href="#SUM" class="headerlink" title="SUM()"></a>SUM()</h3><ul><li>SUM() 函数返回数值列的总数。 </li><li>格式： SELECT SUM(column_name) FROM table_name;</li></ul><h3 id="AVG"><a href="#AVG" class="headerlink" title="AVG()"></a>AVG()</h3><ul><li>AVG() 函数返回数值列的平均值。AVG()函数忽略列值为NULL的行。 </li><li>格式： SELECT AVG(column_name) FROM table_name;</li></ul><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210613154836.png" alt=""></p><h1 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h1><blockquote><p>  分组查询是指使用group by字句对查询信息进行分组。</p><p>  格式：SELECT 字段1,字段2… FROM 表名 GROUP BY分组字段 HAVING 分组条件;</p><p>  分组操作中的having子语句，是用于在分组后对数据进行过滤的，作用类似于where条 件。</p></blockquote><p><code>having</code>与<code>where</code>的区别:</p><ul><li>having是在分组操作执行后，对分组后的数据进行过滤；where是在分组操作执行前，对分组前的数据只能使用表原始列进行条件过滤</li><li>having后面可以使用聚合函数，where后面不可以使用聚合函数</li></ul><p>当一条SQL语句中, 既有where又有group by \ having时, 先执行where,再执行group by，最后执行having</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210613174739.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210613174832.png" alt=""></p><ul><li>where要写在group by前面, 不然会报错</li></ul><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><blockquote><p>  到为止我们所看到的所有SELECT语句都是简单查询，即从单个数据库表中检索数据的单条语句。</p><p>  SQL还允许创建子查询（subquery），即嵌套在其他查询中的查询。</p></blockquote><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210614131909.png" style="zoom:50%;"></p><p>这里给出customers表</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210614132011.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210614134801.png" style="zoom:50%;"></p><blockquote><p>  解析：首先，它将执行小括号内的子查询 <code>SELECT order_num FROM orderitems WHERE prod_id=60005；</code></p><p>  并返回三个订单编号 ：20005,20007,20009</p><p>  然后，这三个值以IN操作符要 求的逗号分隔的格式传递给外部查询的WHERE子句。 </p><p>  外部查询变成：<code>SELECT cust_id FROM orders WHERE order_num IN (20005,20007,20009);</code></p></blockquote><p>在WHERE子句中使用子查询能够编写出功能很强并且很灵活的SQL语句。</p><p>对于能嵌套的子查询的数目没有限制，不过在实际使用时由于性能的限制，不能嵌套太多 的子查询。</p><p>提示：子查询一般与IN操作符结合使用，但也可以用于测试 等于、不等于。</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210615131457.png" alt=""></p><h1 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h1><h2 id="UNION-操作符"><a href="#UNION-操作符" class="headerlink" title="UNION 操作符"></a>UNION 操作符</h2><p>UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。<br>默认：多个 SELECT 语句会删除重复的数据。（去重）</p><ul><li><p>格式</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 列名<span class="token punctuation">,</span> 列名<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> <span class="token keyword">tables</span> <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span> <span class="token keyword">UNION</span> <span class="token punctuation">[</span><span class="token keyword">ALL</span> <span class="token operator">|</span> <span class="token keyword">DISTINCT</span><span class="token punctuation">]</span> <span class="token keyword">SELECT</span> 列名<span class="token punctuation">,</span> 列名<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> <span class="token keyword">tables</span> <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>解析：</p><ul><li><p><strong>DISTINCT:</strong> 可选，删除结果集中重复的数据。默认情况下 UNION 操作符已经删除了重复数据，所以 DISTINCT 修饰符对结果没什么影响。</p></li><li><p><strong>ALL:</strong> 可选，返回所有结果集，包含重复数据。（不进行去重）</p></li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>假设现在我有两张表：customers、customers2，具有相同的表结构，里面各自存放着不同的数据，customers表里存放的是一月份的顾客数据，customers2表里存放的是二月份的顾客数据，现在我想查询一二月份所有顾客的数据。</p><p>知识小扩展：</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 1.复制表结构及数据到新表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 新表 <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 旧表<span class="token punctuation">;</span><span class="token comment"># 2.仅复制表结构</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 新表 <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 旧表  <span class="token keyword">WHERE</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment"># where后面是永远都不成立的条件</span><span class="token comment"># 3.仅复制数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 新表<span class="token punctuation">(</span>字段<span class="token number">1</span><span class="token punctuation">,</span>字段<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">SELECT</span> 字段<span class="token number">1</span><span class="token punctuation">,</span>字段<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> 旧表<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h2><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620084959.png" alt=""></p><p><span class="github-emoji"><span>❗</span><img src="/img/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>第一条复制表语句并不会复制表的约束，使用LIKE可以</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><p>UNION必须由两条或两条以上的SELECT语句组成，语句之间用关键字UNION分隔（因此，如果组合4条SELECT语句，将要使用3个UNION关键字）。</p></li><li><p>UNION中的每个查询必须包含相同的列、表达式或聚集函数（各个列不需要以相同的次序列出，但出于业务需求，通常会以相同的顺序列出）。</p></li><li><p>列数据类型必须兼容：类型不必完全相同，但必须是数据库可以隐含地转换的类型（例如，不同的数值类型或不同的日期类型）。</p></li><li><p>UNION和OR比较：在SELECT语句相对复杂的情况下，使用UNION逻辑不容易混乱，比较清楚</p></li></ul><h1 id="多表操作"><a href="#多表操作" class="headerlink" title="多表操作"></a>多表操作</h1><h2 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h2><p>现在我们有两张表“顾客表”和“订单表”，为了表明订单属于哪个顾客，通常情况下，我们将在订单表上添加一列，用于存放cust_id的信息，此列称为：外键。</p><p><strong>外键（foreign key）：</strong>外键为某个表中的一列，它包含另一个表的主键值，定义了两个表之间的关系。</p><p>主表（父表）：对于两个具有关联关系的表而言，相关联字段中的主键所在的那个表即是主表。</p><p>从表（子表）：对于两个具有关联关系的表而言，相关联字段中的外键所在的那个表即是从表。</p><p><strong>外键特点</strong>：</p><ul><li><p>从表外键的值是对主表主键的引用。</p></li><li><p>从表外键类型，必须与主表主键类型一致。</p></li></ul><p>外键的作用<span class="github-emoji"><span>⭐</span><img src="/img/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>: 保证数据引用的完整性、一致性。</p><ul><li><p>要考虑向从表添加数据时，外键字段必须是主表主键的引用，否则添加失败。</p></li><li><p>要考虑从主表中删除数据时，主键并未被从表引用，否则删除失败。</p></li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 添加外键</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 从表 <span class="token keyword">add</span> <span class="token punctuation">[</span><span class="token keyword">constraint</span><span class="token punctuation">]</span><span class="token punctuation">[</span>外键名称<span class="token punctuation">]</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>从表外键字段名<span class="token punctuation">)</span> <span class="token keyword">references</span> 主表 <span class="token punctuation">(</span>主表的主键<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--[外键名称]用于删除外键约束的，一般建议“_fk”结尾</span><span class="token comment">-- 也可以在建表时添加外键约束，</span><span class="token comment">--CONSTRAINT orders_customers_fk FOREIGN KEY (cust_id) REFERENCES customers (cust_id)</span><span class="token comment">-- 删除外键</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 从表 <span class="token keyword">drop</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> 外键名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620103816.png" alt=""></p><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 添加外键</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> orders <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> orders_customers_fk <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>cust_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> customers <span class="token punctuation">(</span>cust_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 删除外键</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> orders <span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> orders_customers_fk<span class="token punctuation">;</span><span class="token comment"># 向主表添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> customers <span class="token punctuation">(</span>cust_id<span class="token punctuation">,</span>cust_name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">,</span><span class="token string">'王老五'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 成功</span><span class="token comment"># 向从表添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orders<span class="token punctuation">(</span>order_date<span class="token punctuation">,</span> cust_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 成功</span><span class="token comment"># 向从表添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orders <span class="token punctuation">(</span>order_date<span class="token punctuation">,</span>cust_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 失败</span><span class="token comment"># 主表删除数据</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> customers <span class="token keyword">WHERE</span> cust_id<span class="token operator">=</span><span class="token number">666</span><span class="token punctuation">;</span><span class="token comment">-- 失败</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表关系"><a href="#表关系" class="headerlink" title="表关系"></a>表关系</h2><blockquote><p>  实际开发中，一个项目通常需要很多张表才能完成。</p><p>  例如：一个商城项目就需要顾客表(customers)、商品表(products)、订单表(orders)等多张表。</p><p>  且这些表的数据之间存在一定的关系，接下来我们将在单表的基础上，一起学习多表方面的知识。</p></blockquote><h3 id="一对一关系"><a href="#一对一关系" class="headerlink" title="一对一关系"></a>一对一关系</h3><ul><li><p>在实际的开发中不多.因为一对一可以创建成一张表.</p></li><li><p>常见实例：商品表和商品描述表</p></li></ul><p>两种建表原则：</p><ul><li><p>外键唯一：主表的主键和从表的外键（唯一），形成主外键关系，外键唯一unique。</p></li><li><p>外键是主键：主表的主键和从表的外键，形成主外键关系。</p></li></ul><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620103849.png" style="zoom:50%;"></p><h3 id="一对多关系"><a href="#一对多关系" class="headerlink" title="一对多关系"></a>一对多关系</h3><ul><li><p>常见实例：客户和订单，分类和商品，部门和员工, 省份和城市</p></li><li><p>一对多建表原则：在从表(多方)创建一个字段，字段作为外键指向主表(一方)的主键.</p></li></ul><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620103922.png" style="zoom:50%;"></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620103953.png" style="zoom:50%;"></p><h3 id="多对多关系"><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h3><ul><li><p>常见实例：商品和订单，学生和课程，用户和角色</p></li><li><p>多对多关系建表原则：需要创建第三张表,中间表中至少两个字段，这两个字段分别作为外键指向各自一方的主键</p></li></ul><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620104122.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620104137.png" style="zoom:50%;"></p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 1.添加外键</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> orderitems  <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> orderiterms_orders_fk <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>order_num<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> orders <span class="token punctuation">(</span>order_num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> orderitems <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> orderiterms_products_fk <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>prod_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> products<span class="token punctuation">(</span>prod_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 2.向订单表插入数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orders <span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_date<span class="token punctuation">,</span> cust_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 3.向商品表插入数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> products <span class="token punctuation">(</span>prod_id<span class="token punctuation">,</span>prod_name<span class="token punctuation">,</span>vend_id<span class="token punctuation">,</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">'大刀'</span><span class="token punctuation">,</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 4.向中间表插入一条数据（数据存在）</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderitems<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_item<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> item_price<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 5.向中间表插入一条数据（数据不存在）  执行失败</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderitems<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_item<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> item_price<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 产品表不存在102</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderitems<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_item<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> item_price<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 订单表不存在102</span><span class="token comment"># 6.删除商品表   执行失败</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> prod_id<span class="token operator">=</span><span class="token number">101</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实战1：省和市"><a href="#实战1：省和市" class="headerlink" title="实战1：省和市"></a>实战1：省和市</h2><ul><li>方案1：多张表，一对多</li></ul><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620104226.png" alt=""></p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建省份表</span><span class="token keyword">create</span> <span class="token keyword">table</span> province<span class="token punctuation">(</span>  pid <span class="token keyword">int</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>  pname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 省份名称</span>  description <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">-- 描述</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建城市表</span><span class="token keyword">create</span> <span class="token keyword">table</span> city <span class="token punctuation">(</span>  cid <span class="token keyword">int</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>  cname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 城市名称</span>  description <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 描述</span>  province_id <span class="token keyword">int</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> city_province_fk <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>province_id<span class="token punctuation">)</span> <span class="token keyword">references</span> province<span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>方案2：一张表，自关联一对多</li></ul><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620104251.png" style="zoom:50%;"></p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> area <span class="token punctuation">(</span>  id <span class="token keyword">int</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">key</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  description <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  parent_id <span class="token keyword">int</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> area_area_fk <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>parent_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> area<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">into</span> area <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'辽宁省'</span><span class="token punctuation">,</span> <span class="token string">'这是一个省份'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">into</span> area <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'大连市'</span><span class="token punctuation">,</span> <span class="token string">'这是一个城市'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">into</span> area <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'沈阳市'</span><span class="token punctuation">,</span> <span class="token string">'这是一个城市'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">into</span> area <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'河北省'</span><span class="token punctuation">,</span> <span class="token string">'这是一个省份'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">into</span> area <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'石家庄市'</span><span class="token punctuation">,</span> <span class="token string">'这是一个城市'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">into</span> area <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'保定市'</span><span class="token punctuation">,</span> <span class="token string">'这是一个城市'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>parent_id int</code>多用于描述父子菜单</p><h2 id="实战2：用户和角色"><a href="#实战2：用户和角色" class="headerlink" title="实战2：用户和角色"></a>实战2：用户和角色</h2><ul><li>多对多关系</li></ul><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620104311.png" style="zoom:50%;"></p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 用户表</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>  uid <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>  username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 角色表</span><span class="token keyword">create</span> <span class="token keyword">table</span> role <span class="token punctuation">(</span>  rid <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>  rname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 中间表</span><span class="token keyword">create</span> <span class="token keyword">table</span> user_role<span class="token punctuation">(</span>  user_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  role_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> user_role_pk <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>user_id<span class="token punctuation">,</span>role_id<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> user_id_fk <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>user_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> role_id_fk <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>role_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> role<span class="token punctuation">(</span>rid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>中间表用于维护这些角色</p><p>18行的<code>user_role_pk</code>是一个联合主键，同时关联了<code>user_id</code>,<code>role_id</code></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620144732.png" style="zoom:33%;"></p><p>联合主键可以保证中间表可以有重复</p><h2 id="exclamation-特别提醒"><a href="#exclamation-特别提醒" class="headerlink" title=":exclamation:特别提醒"></a><span class="github-emoji"><span>❗</span><img src="/img/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>特别提醒</h2><p>现在这种创建外键的方式已经不提倡，甚至被禁止了，因为在维护数据时，限制条件太多，效率较低。关联关系通过SQL语句来实现。</p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><blockquote><p>  事务: 指的是逻辑上的⼀组操作,组成这组操作的各个单元要么全都成功,要么全都失败.</p><p>  事务作⽤：保证在⼀个事务中多次SQL操作要么全都成功,要么全都失败.</p><p>  比如：银行转账，小明有50元，小红有10元，小明向小红转账10元，在数据库操作中相当于执行了两条SQL语句</p></blockquote> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> money<span class="token operator">=</span>money<span class="token operator">-</span><span class="token number">10</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 小明账户减10元</span><span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> money<span class="token operator">=</span>money<span class="token operator">+</span><span class="token number">10</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">-- 小红账户加10元</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们想让这两个操作要么全成功，要么全失败。如何保证呢？就需要把他们放到同一个事务里面进行操作。</p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210620134230.png" style="zoom:50%;"></p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 创建账号表</span><span class="token keyword">create</span> <span class="token keyword">table</span> account<span class="token punctuation">(</span> id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span>  <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> money <span class="token keyword">double</span> <span class="token keyword">COMMENT</span> <span class="token string">'余额'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 初始化数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> account <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> account <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'小红'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># MySQL有一个系统变量autocommit，用来自动提交事务。</span><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'autocommit'</span><span class="token punctuation">;</span><span class="token comment"># 默认是开启的，也就意味着在默认情况下，如果不显示地执行  START TRANSACTION 或者 BEGIN 开启一个事务，那么每条SQL语句都算是一个独立的事务，这种特性被称作事务的自动提交；</span><span class="token comment">#  如果想关闭这种自动提交的功能，可以使用两种办法</span><span class="token comment"># 1. 显式使用START TRANSACTION 或者 BEGIN 开启一个事务</span><span class="token comment"># 这样在本次事务中提交或者回滚前会暂时关闭自动提交的u</span><span class="token comment"># 2. 把系统变量 autocommit 设置为 OFF</span><span class="token keyword">SET</span> AUTOCOMMIT <span class="token operator">=</span> <span class="token keyword">off</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一旦开启一个事务，中间的sql语句都不会自动提交，需要自己手动提交【使用commit】</p><h2 id="事务有四大特性（ACID）"><a href="#事务有四大特性（ACID）" class="headerlink" title="事务有四大特性（ACID）"></a>事务有四大特性（ACID）</h2><h3 id="原子性（Atomicity）"><a href="#原子性（Atomicity）" class="headerlink" title="原子性（Atomicity）"></a>原子性（Atomicity）</h3><p>原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，</p><h3 id="一致性（Consistency）"><a href="#一致性（Consistency）" class="headerlink" title="一致性（Consistency）"></a>一致性（Consistency）</h3><p>一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</p><p>拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。</p><h3 id="隔离性（Isolation）"><a href="#隔离性（Isolation）" class="headerlink" title="隔离性（Isolation）"></a>隔离性（Isolation）</h3><p>隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</p><p>一个事务的执行不能被其他事务干扰。一个事务内部的操作及使用的数据，对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p><p>关于事务的隔离性数据库提供了多种隔离级别。</p><h3 id="持久性（Durability）"><a href="#持久性（Durability）" class="headerlink" title="持久性（Durability）"></a>持久性（Durability）</h3><p>持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p><h2 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h2><h3 id="事务回滚"><a href="#事务回滚" class="headerlink" title="事务回滚"></a>事务回滚</h3> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">begin</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+--------+-------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name   <span class="token operator">|</span> money <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+--------+-------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 小明   <span class="token operator">|</span>    <span class="token number">50</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 小红   <span class="token operator">|</span>    <span class="token number">10</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+--------+-------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">update</span> account <span class="token keyword">set</span> money<span class="token operator">=</span>money<span class="token operator">-</span><span class="token number">10</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">update</span> account <span class="token keyword">set</span> money<span class="token operator">=</span>money<span class="token operator">+</span><span class="token number">10</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+--------+-------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name   <span class="token operator">|</span> money <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+--------+-------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 小明   <span class="token operator">|</span>    <span class="token number">40</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 小红   <span class="token operator">|</span>    <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+--------+-------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">rollback</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+--------+-------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name   <span class="token operator">|</span> money <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+--------+-------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 小明   <span class="token operator">|</span>    <span class="token number">50</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 小红   <span class="token operator">|</span>    <span class="token number">10</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+--------+-------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事务提交"><a href="#事务提交" class="headerlink" title="事务提交"></a>事务提交</h3> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">begin</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+--------+-------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name   <span class="token operator">|</span> money <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+--------+-------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 小明   <span class="token operator">|</span>    <span class="token number">50</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 小红   <span class="token operator">|</span>    <span class="token number">10</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+--------+-------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">update</span> account <span class="token keyword">set</span> money<span class="token operator">=</span>money<span class="token operator">-</span><span class="token number">10</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">update</span> account <span class="token keyword">set</span> money<span class="token operator">=</span>money<span class="token operator">+</span><span class="token number">10</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+--------+-------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name   <span class="token operator">|</span> money <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+--------+-------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 小明   <span class="token operator">|</span>    <span class="token number">40</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 小红   <span class="token operator">|</span>    <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+--------+-------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">commit</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+--------+-------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name   <span class="token operator">|</span> money <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+--------+-------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 小明   <span class="token operator">|</span>    <span class="token number">40</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 小红   <span class="token operator">|</span>    <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+--------+-------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="隐式提交"><a href="#隐式提交" class="headerlink" title="隐式提交"></a>隐式提交</h2><p>当我们使用start transaction或者begin语句时开启了一个事务。或者把系统变量的值设置为off时，事物就不会进行自动提交。</p><p>如果我们输入了某些语句，且这些语句会导致之前的事物，悄悄的提交（就像输入了commit命令一样），那么因为某种特殊的语句而导致，事务提交的情况称为隐式提交。</p><p>会导致隐式提交的语句有：</p><ul><li><p>数据库定义语言DDL，像create、alter、drop</p></li><li><p>事务控制或关于锁定的语句，比如，前一个事务未提交，又开启了一个新的事务（写了两个begin）</p></li><li><p>加载数据的语句，比如load data（千万级的数据量会较快）</p></li><li><p>关于MySQL复制的一些语句 ：slave</p></li></ul><h2 id="保存点"><a href="#保存点" class="headerlink" title="保存点"></a>保存点</h2><p>如果你已经开启了一个事物，并且输入了很多语句，这是忽然发现前面已经执行完的某个语句。参数写错了，只好使用rollback语句，让数据库状态恢复到事务执行之前的样子，然后一切从头再来。</p><p>这种感觉很不爽，因此就有了保存点的概念。</p><ul><li><p>语法：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 定义保存点</span><span class="token keyword">savepoint</span>  保存点名称<span class="token punctuation">;</span><span class="token comment">-- 回滚到某个保存点，如果rollback后面不跟随保存点名称，则直接回滚到事务之前的状态</span><span class="token keyword">rollback</span> <span class="token punctuation">[</span><span class="token keyword">work</span><span class="token punctuation">]</span> <span class="token keyword">to</span> <span class="token punctuation">[</span><span class="token keyword">savepoint</span><span class="token punctuation">]</span> 保存点名称 <span class="token punctuation">;</span><span class="token comment">-- 删除保存点</span><span class="token keyword">release</span> <span class="token keyword">savepoint</span> 保存点名称<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>案例演示</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">begin</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">update</span> account <span class="token keyword">set</span> money<span class="token operator">=</span>money<span class="token operator">-</span><span class="token number">10</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">savepoint</span> s1<span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+--------+-------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name   <span class="token operator">|</span> money <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+--------+-------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 小明   <span class="token operator">|</span>    <span class="token number">40</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 小红   <span class="token operator">|</span>    <span class="token number">10</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+--------+-------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">update</span> account <span class="token keyword">set</span> money<span class="token operator">=</span>money<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span><span class="token comment">-- 回退到保存点</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">rollback</span> <span class="token keyword">to</span> s1<span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+--------+-------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name   <span class="token operator">|</span> money <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+--------+-------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 小明   <span class="token operator">|</span>    <span class="token number">40</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 小红   <span class="token operator">|</span>    <span class="token number">10</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+--------+-------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="表关联查询"><a href="#表关联查询" class="headerlink" title="表关联查询"></a>表关联查询</h1><h2 id="表别名"><a href="#表别名" class="headerlink" title="表别名"></a>表别名</h2><p>当表的名字很长或者执行一些特殊查询时，为了方便操作或者需要多次使用相同的表时，可以为表指定别名，以替代表原来的名称。</p><ul><li><p>在为表取别名时，要保证不能与数据库中的其他表的名称冲突。</p></li><li><p>对单表做简单的别名查询通常是无意义的。一般是对一个表要当作多个表来操作，或者是对多个表进行操作时，才设置表别名。</p></li><li><p>当为表取别名后，列名前面最好都加上表的别名，做以区分。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> p<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span>vend_name <span class="token keyword">FROM</span> products p <span class="token punctuation">,</span>vendors v  <span class="token keyword">WHERE</span> p<span class="token punctuation">.</span>vend_id<span class="token operator">=</span>v<span class="token punctuation">.</span>vend_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>使用表别名查询，可以使 SQL 变得简洁而更易书写和阅读，尤其在 SQL 比较复杂的情况下。除了使用别名来简化 SQL 外，有些时候例如一个表做自身关联时，必须要使用别名来当作两个表进行关联操作。</p><h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210624140956.png" alt=""></p><h3 id="两表内联"><a href="#两表内联" class="headerlink" title="两表内联"></a>两表内联</h3><h4 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h4><p>假设现在我想查询给我们供货的供应商的名称，以及商品名称和商品价格。此时我们发现，要查询的字段不在同一张表里。供应商名称在vendors表里，而商品名称和商品价格在products表里，这时可以使用内联查询，将两张表进行关联之后进行查询。</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 这里没有使用表别名</span><span class="token keyword">SELECT</span> vend_name<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token keyword">FROM</span> products<span class="token punctuation">,</span>     vendors<span class="token keyword">WHERE</span> vendors<span class="token punctuation">.</span>vend_id <span class="token operator">=</span> products<span class="token punctuation">.</span>vend_id<span class="token punctuation">;</span><span class="token comment"># 这种方式叫等值连接。当然也可以用表别名，来达到同样效果</span><span class="token keyword">SELECT</span> v<span class="token punctuation">.</span>vend_name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>prod_name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>prod_price<span class="token keyword">FROM</span> products p<span class="token punctuation">,</span>     vendors v<span class="token keyword">WHERE</span> p<span class="token punctuation">.</span>vend_id <span class="token operator">=</span> v<span class="token punctuation">.</span>vend_id<span class="token punctuation">;</span><span class="token comment"># 这种连接方式也被称为内部连接，可以用以下语法来明确指定连接类型 -- inner可以省略</span><span class="token keyword">SELECT</span> vend_name<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token keyword">FROM</span> products  <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> vendors <span class="token keyword">ON</span> vendors<span class="token punctuation">.</span>vend_id <span class="token operator">=</span> products<span class="token punctuation">.</span>vend_id<span class="token punctuation">;</span><span class="token comment"># 这两种方式都叫内连接，一种是隐式内联，一种是显示内联 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这条语句的FROM子句列出了两个表，分别是vendors和products。它们就是这条SELECT语句联结的两个表的名字。这两个表用WHERE子句正确联结，WHERE子句指示MySQL匹配vendors表中的vend_id和products表中的vend_id。</p><h4 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h4><ol><li>编写SQL语句，返回customers表中的顾客名称cust_name 和orders表中的相关订单号order_num，并按顾客名称再按订单号对结果进行排序。</li></ol><p>等值连接查询：</p>   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span>order_num <span class="token keyword">FROM</span> customers <span class="token punctuation">,</span>orders <span class="token keyword">WHERE</span> customers<span class="token punctuation">.</span>cust_id<span class="token operator">=</span>orders<span class="token punctuation">.</span>cust_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>inner join 语法查询：</p>   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span>order_num <span class="token keyword">FROM</span> customers  <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> orders <span class="token keyword">ON</span> customers<span class="token punctuation">.</span>cust_id<span class="token operator">=</span>orders<span class="token punctuation">.</span>cust_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h3><p>在数据库表的定义中不存在能指示MySQL如何对表进行联结的东西。我们必须自己通过SQL做这件事情。</p><p>在联结两个表时，你实际上做的是将第一个表中的每一行与第二个表中的每一行配对。WHERE子句作为过滤条件，它只包含那些匹配给定条件（这里是联结条件）的行。没有WHERE子句，第一个表中的每个行将与第二个表中的每个行配对，而不管它们逻辑上是否可以配在一起。</p><p><strong>笛卡儿积</strong>（cartesian product） 由没有联结条件的表关系返回的结果为笛卡儿积。检索出的行的数目将是第一个表中的行数乘以第二个表中的行数。</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> v<span class="token punctuation">.</span>vend_name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>prod_name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>prod_price<span class="token keyword">FROM</span> products p<span class="token punctuation">,</span>  vendors v <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vend_name<span class="token punctuation">,</span>prod_name<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从上面的输出中可以看到，相应的笛卡儿积不是我们所想要的。这里返回的数据用每个供应商匹配了每个产品，它包括了供应商不正确的产品。实际上有的供应商根本就没有产品。所以两表联查时，一定要注意where条件。</p><h3 id="多表内联"><a href="#多表内联" class="headerlink" title="多表内联"></a>多表内联</h3><p>SQL对一条SELECT语句中可以联结的表的数目没有限制。创建联结的基本规则也相同。</p><h4 id="案例-4"><a href="#案例-4" class="headerlink" title="案例"></a>案例</h4><p>假设现在要查询订单编号为20005的产品名称，产品价格、产品数量、供应商名称。该如何查询呢？</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 首先，先确认要查询的字段来自哪几张表？经分析可以得出，可以从orderitems、products、venders中获取数据</span><span class="token comment"># 其次，再确定三张表的关联关系</span><span class="token comment"># 然后，确定过滤条件</span><span class="token comment">-- 隐式连接</span><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> vend_name<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> quantity<span class="token keyword">FROM</span> vendors<span class="token punctuation">,</span>     products<span class="token punctuation">,</span>     orderitems<span class="token keyword">WHERE</span> vendors<span class="token punctuation">.</span>vend_id <span class="token operator">=</span> products<span class="token punctuation">.</span>vend_id  <span class="token operator">AND</span> products<span class="token punctuation">.</span>prod_id <span class="token operator">=</span> orderitems<span class="token punctuation">.</span>prod_id  <span class="token operator">AND</span> order_num <span class="token operator">=</span> <span class="token number">20005</span><span class="token punctuation">;</span><span class="token comment">-- 显示连接</span><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> vend_name<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> quantity<span class="token keyword">FROM</span> orderitems o         <span class="token keyword">JOIN</span> products p <span class="token keyword">ON</span> o<span class="token punctuation">.</span>prod_id <span class="token operator">=</span> p<span class="token punctuation">.</span>prod_id         <span class="token keyword">JOIN</span> vendors v <span class="token keyword">ON</span> p<span class="token punctuation">.</span>vend_id <span class="token operator">=</span> v<span class="token punctuation">.</span>vend_id<span class="token keyword">WHERE</span> o<span class="token punctuation">.</span>order_num <span class="token operator">=</span> <span class="token number">20005</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><h3 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h3> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 查询所有客户，的订单情况，包括没有订单的客户</span><span class="token keyword">SELECT</span> customers<span class="token punctuation">.</span>cust_id<span class="token punctuation">,</span> orders<span class="token punctuation">.</span>order_num<span class="token keyword">FROM</span> customers         <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> orders <span class="token keyword">ON</span> customers<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> orders<span class="token punctuation">.</span>cust_id<span class="token punctuation">;</span><span class="token comment"># OUTER 可以省略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h3><p>在使用OUTER JOIN语法时，必须使用RIGHT或LEFT关键字指定包括其所有行的表（RIGHT指出的是OUTER JOIN右边的表，而LEFT指出的是OUTER JOIN左边的表）。</p><p>上面的例子使用LEFT OUTER JOIN从FROM子句的左边表（customers表）中选择所有行。为了从右边的表中选择所有行，应该使用RIGHT OUTER JOIN，如下例所示：</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> customers<span class="token punctuation">.</span>cust_id<span class="token punctuation">,</span> orders<span class="token punctuation">.</span>order_num<span class="token keyword">FROM</span> customers         <span class="token keyword">RIGHT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> orders <span class="token keyword">ON</span> customers<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> orders<span class="token punctuation">.</span>cust_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h2><h3 id="案例-5"><a href="#案例-5" class="headerlink" title="案例"></a>案例</h3><p>假设你发现商品id为60001的商品存在质量缺陷，现在需要查找，60001供应商所提供的所有商品的名称和商品id。请问如何编写SQL语句？</p><h3 id="分析过程-1"><a href="#分析过程-1" class="headerlink" title="分析过程"></a>分析过程</h3> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 1.使用现有的知识储备，子查询</span><span class="token keyword">SELECT</span> vend_id <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> prod_id<span class="token operator">=</span><span class="token number">60001</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span>prod_name <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> vend_id<span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span>prod_name <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> vend_id<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> vend_id <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> prod_id<span class="token operator">=</span><span class="token number">60001</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 2.采用自连接</span><span class="token keyword">SELECT</span> p1<span class="token punctuation">.</span>prod_id<span class="token punctuation">,</span> p1<span class="token punctuation">.</span>prod_name<span class="token punctuation">,</span> p1<span class="token punctuation">.</span>vend_id<span class="token keyword">FROM</span> products p1<span class="token punctuation">,</span>     products p2<span class="token keyword">WHERE</span> p1<span class="token punctuation">.</span>vend_id <span class="token operator">=</span> p2<span class="token punctuation">.</span>vend_id  <span class="token operator">AND</span> p2<span class="token punctuation">.</span>prod_id <span class="token operator">=</span> <span class="token number">60001</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="课堂练习-1"><a href="#课堂练习-1" class="headerlink" title="课堂练习"></a>课堂练习</h2><ol><li><p>使用innor join 编写SQL，查询每个顾客的名称，和所有订单号；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span>order_num <span class="token keyword">FROM</span> customers <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> orders <span class="token keyword">ON</span> customers<span class="token punctuation">.</span>cust_id<span class="token operator">=</span>orders<span class="token punctuation">.</span>cust_id<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol><li><p>修改上一题的SQL语句，列出所有顾客，即使他们没有下过订单</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span>order_num <span class="token keyword">FROM</span> customers <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> orders <span class="token keyword">ON</span> customers<span class="token punctuation">.</span>cust_id<span class="token operator">=</span>orders<span class="token punctuation">.</span>cust_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol><li><p>使用outer  join 连接products表和orderitems表，返回产品名称prod_name 和与之相关的订单号order_num的列表，并按商品名称排序。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span>order_num <span class="token keyword">FROM</span> products <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> orderitems <span class="token keyword">ON</span> products<span class="token punctuation">.</span>prod_id <span class="token operator">=</span> orderitems<span class="token punctuation">.</span>prod_id <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol><li><p>修改上一题中创建的SQL语句，使其返回每一项产品的总订单数（不是订单号）。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>order_num<span class="token punctuation">)</span> <span class="token keyword">AS</span> orders<span class="token keyword">FROM</span> products         <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> orderitems                         <span class="token keyword">ON</span> products<span class="token punctuation">.</span>prod_id <span class="token operator">=</span> orderitems<span class="token punctuation">.</span>prod_id<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> prod_name<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol><li>编写SQL语句，列出供应商id（vend_id）及其可供产品的数量，包括没有产品的供应商。</li></ol><p>提示：使用外连接和分组。</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> vendors<span class="token punctuation">.</span>vend_id<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>prod_id<span class="token punctuation">)</span><span class="token keyword">FROM</span> vendors         <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> products <span class="token keyword">ON</span> vendors<span class="token punctuation">.</span>vend_id <span class="token operator">=</span> products<span class="token punctuation">.</span>vend_id<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> vendors<span class="token punctuation">.</span>vend_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="视图作用"><a href="#视图作用" class="headerlink" title="视图作用"></a>视图作用</h2><p>视图是虚拟的表。与包含数据的表不一样，视图只包含使用时动态检索数据的查询。</p><p>就拿上节课查询订购了某个特定订单信息来说，任何需要这个数据的人都必须理解相关表的结构，并且知道如何创建查询和对表进行联结。</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> vend_name<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> quantity<span class="token keyword">FROM</span> orderitems o         <span class="token keyword">JOIN</span> products p <span class="token keyword">ON</span> o<span class="token punctuation">.</span>prod_id <span class="token operator">=</span> p<span class="token punctuation">.</span>prod_id         <span class="token keyword">JOIN</span> vendors v <span class="token keyword">ON</span> p<span class="token punctuation">.</span>vend_id <span class="token operator">=</span> v<span class="token punctuation">.</span>vend_id<span class="token keyword">WHERE</span> o<span class="token punctuation">.</span>order_num <span class="token operator">=</span> <span class="token number">20005</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了检索其他产品（或多个产品）的相同数据，必须修改最后的WHERE子句。</p><p>现在，假如可以把整个查询包装成一个名为order_detail的虚拟表，则可以直接地检索出相应的数据：</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> vend_name<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> quantity <span class="token keyword">FROM</span> order_detail <span class="token keyword">WHERE</span> order_num<span class="token operator">=</span><span class="token number">20005</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在视图创建之后，可以用与表基本相同的方式利用它们。可以对视图执行SELECT操作，过滤和排序数据，将视图联结到其他视图或表，甚至能添加和更新数据。</p><p>重要的是知道视图仅仅是用来查看存储在别处的数据的一种设施。视图本身不包含数据，因此它们返回的数据是从其他表中检索出来的。在添加或更改这些表中的数据时，视图将返回改变过的数据。</p><p>因为视图不包含数据，所以每次使用视图时，都必须处理查询执行时所需的任一个检索。如果你用多个联结和过滤创建了复杂的视图或者嵌套了视图，可能会发现性能下降得很厉害。所以不要滥用视图。</p><h2 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><p>与表一样，视图必须唯一命名（不能给视图取与别的视图或表相同的名字）。</p></li><li><p>对于可以创建的视图数目没有限制。</p></li><li><p>为了创建视图，必须具有足够的访问权限。这些限制通常由数据库管理人员授予。</p></li><li><p>视图可以嵌套，即可以利用从其他视图中检索数据的查询来构造一个视图。</p></li><li><p>ORDER BY可以用在视图中，但如果从该视图检索数据SELECT中也含有ORDER BY，那么该视图中的ORDER BY将被覆盖。</p></li><li><p>视图不能索引，也不能有关联的触发器或默认值。</p></li><li><p>视图可以和表一起使用。例如，编写一条联结表和视图的SELECT语句。</p></li></ul><h2 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h2><p>在理解什么是视图（以及管理它们的规则及约束）后，我们来看一下视图的创建。</p><ul><li><p>视图用CREATE VIEW语句来创建。</p></li><li><p>使用SHOW CREATE VIEW viewname；来查看创建视图的语句。</p></li><li><p>用DROP删除视图，其语法为DROP VIEW viewname;。</p></li><li><p>更新视图时，可以先用DROP再用CREATE，也可以直接用CREATE OR REPLACE VIEW。如果要更新的视图不存在，则第2条更新语句会创建一个视图；如果要更新的视图存在，则第2条更新语句会替换原有视图。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#查询订单编号为20005的：产品名称，供应商名称，产品价格，购买数量</span><span class="token keyword">SELECT</span> order_num<span class="token punctuation">,</span>prod_name<span class="token punctuation">,</span> vend_name<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> quantity<span class="token keyword">FROM</span> orderitems o         <span class="token keyword">JOIN</span> products p <span class="token keyword">ON</span> o<span class="token punctuation">.</span>prod_id <span class="token operator">=</span> p<span class="token punctuation">.</span>prod_id         <span class="token keyword">JOIN</span> vendors v <span class="token keyword">ON</span> p<span class="token punctuation">.</span>vend_id <span class="token operator">=</span> v<span class="token punctuation">.</span>vend_id<span class="token keyword">WHERE</span> o<span class="token punctuation">.</span>order_num <span class="token operator">=</span> <span class="token number">20005</span><span class="token punctuation">;</span><span class="token comment"># 创建视图，包含所有订单的产品名称，供应商名称，产品价格，购买数量</span><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> order_detail <span class="token keyword">AS</span>    <span class="token keyword">SELECT</span> order_num<span class="token punctuation">,</span>prod_name<span class="token punctuation">,</span> vend_name<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> quantity<span class="token keyword">FROM</span> orderitems o         <span class="token keyword">JOIN</span> products p <span class="token keyword">ON</span> o<span class="token punctuation">.</span>prod_id <span class="token operator">=</span> p<span class="token punctuation">.</span>prod_id         <span class="token keyword">JOIN</span> vendors v <span class="token keyword">ON</span> p<span class="token punctuation">.</span>vend_id <span class="token operator">=</span> v<span class="token punctuation">.</span>vend_id<span class="token punctuation">;</span><span class="token comment"># 查看视图的所有数据</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> order_detail<span class="token punctuation">;</span><span class="token comment"># 从视图中过滤数据</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> order_detail <span class="token keyword">WHERE</span> order_num<span class="token operator">=</span><span class="token number">20005</span><span class="token punctuation">;</span><span class="token comment"># 删除视图</span><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> order_detail<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>索引用于快速找出在某个列中有一特定值的行。不使用索引，MySQL必须从第1条记录开始读完整个表，直到找出相关的行。</p><p>表越大，查询数据所花费的时间越多，如果表中查询的列有一个索引，MySQL能快速到达。某个位置去搜寻数据文件，而不必查看所有的数据，这节课我们来介绍与索引相关的内容。</p><p><strong>索引</strong>是对数据库中一列或多列的值进行排序的一种结构，使用索引可提高数据库中特定数据的查询速度。</p><p>索引是一个单独的存储在磁盘上的数据库结构，包含着对数据表里所有记录的引用指针。使用索引可以快速找出在某个或多个列中的某个值。所有MySQL列类型都可以被索引，对相关列使用索引是<strong>提高查询操作速度</strong>的最佳途径。</p><p>索引是在存储引擎中实现的，因此每一种存储引擎的索引，都不一定完全相同。</p><h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><h3 id="普通索引和唯一索引"><a href="#普通索引和唯一索引" class="headerlink" title="普通索引和唯一索引"></a>普通索引和唯一索引</h3><p>普通索引是MySQL中的基本索引类型，允许在定义索引的列中插入重复值和空值。</p><p>唯一索引要求索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合，必须唯一。主键索引是一种特殊的索引唯一，不允许有空值。</p><h3 id="单列索引和组合索引"><a href="#单列索引和组合索引" class="headerlink" title="单列索引和组合索引"></a>单列索引和组合索引</h3><p>单列索引及一个索引只包含单个列，一个表可以有多个单列索引。</p><p>组合索引是指在表的多个字段组合上创建的索引，只有在查询条件中使用了这些字段的左边字段时，索引才会被使用。使用组合索引时遵循最左前缀原则。</p><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><h3 id="创建表时创建"><a href="#创建表时创建" class="headerlink" title="创建表时创建"></a>创建表时创建</h3> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--普通索引</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> book<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">,</span>    bookname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>    <span class="token keyword">INDEX</span> <span class="token punctuation">(</span>bookname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--唯一索引</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> book2<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">,</span>    bookname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>   <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> <span class="token punctuation">(</span>bookname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 给索引起名字</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> book3<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">,</span>    bookname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>   <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span>  name_idx <span class="token punctuation">(</span>bookname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：index 和key是等价的</p><h3 id="单独创建索引"><a href="#单独创建索引" class="headerlink" title="单独创建索引"></a>单独创建索引</h3><h4 id="1-普通索引"><a href="#1-普通索引" class="headerlink" title="1.普通索引"></a>1.普通索引</h4> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> index_name<span class="token keyword">ON</span> table_name <span class="token punctuation">(</span>column_name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-唯一索引"><a href="#2-唯一索引" class="headerlink" title="2.唯一索引"></a>2.唯一索引</h4> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> index_name<span class="token keyword">ON</span> table_name <span class="token punctuation">(</span>column_name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-组合索引"><a href="#3-组合索引" class="headerlink" title="3.组合索引"></a>3.组合索引</h4> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> index_name<span class="token keyword">ON</span> table_name <span class="token punctuation">(</span>column_name1<span class="token punctuation">,</span>column_name2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="修改表结构创建"><a href="#修改表结构创建" class="headerlink" title="修改表结构创建"></a>修改表结构创建</h3> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> name_idx<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> index_name<span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> index_name <span class="token keyword">ON</span> table_name<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><p>MySQL的触发器和存储过程一样，都是嵌入到MySQL的一段程序。触发器是由事件来触发某个操作，这些事件包括INSERT,UPDATE和DELETE语句。如果定义了触发程序，当数据库执行这些语句的时候就会激发触发器执相应的操作，触发程序是与表有关的命名数据库对象，当表上出现特定事件时，将激活该对象。</p><p>触发器是个特殊的存储过程，不同的是，执行存储过程要使用CALL语句来调用，而触发器的执行不需要使用CALL语句来调用，也不需要手工启动，只要当一个预定义的事件发生的时候，就会被MySQL自动调用。</p><h1 id="创建只有一个执行语句的触发器"><a href="#创建只有一个执行语句的触发器" class="headerlink" title="创建只有一个执行语句的触发器"></a>创建只有一个执行语句的触发器</h1><p>语法</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> trigger_name trigger_time trigger_event<span class="token keyword">ON</span> tab_name <span class="token keyword">FOR EACH ROW</span> trigger_stmt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>trigger_name：触发器名称，用户自行指定；<br>trigger_time ：触发时机，可以指定为before或after；<br>trigger_event：触发事件，包括INSERT,UPDATE和DELETE；<br>tab_name：要建立触发器的表名；<br>trigger_stmt：触发器执行语句。</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> book2<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">,</span>    bookname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> book  <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> name_idx<span class="token punctuation">(</span>bookname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 创建触发器，在book表中插入一条数据时自动在book2中插入一条</span><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> book_insert_select <span class="token keyword">AFTER</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> book <span class="token keyword">FOR EACH ROW</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book2<span class="token punctuation">(</span>bookname<span class="token punctuation">)</span> <span class="token keyword">SELECT</span> bookname <span class="token keyword">FROM</span> book<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book<span class="token punctuation">(</span>bookname<span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'《平凡的世界2》'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 查看触发器</span><span class="token keyword">SHOW</span> TRIGGERS <span class="token punctuation">;</span><span class="token comment"># 也可以在triggers表中查看触发器</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span>triggers<span class="token punctuation">;</span><span class="token comment"># 删除触发器</span><span class="token keyword">DROP</span> <span class="token keyword">TRIGGER</span> book_insert_select<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="创建有多个执行语句的触发器"><a href="#创建有多个执行语句的触发器" class="headerlink" title="创建有多个执行语句的触发器"></a>创建有多个执行语句的触发器</h1><p><strong>语法</strong></p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> trigger_name trigger_time trigger_event<span class="token keyword">ON</span> tab_name <span class="token keyword">FOR EACH ROW</span> <span class="token keyword">BEGIN</span>    语句执行列表<span class="token keyword">END</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>trigger_name：触发器名称，用户自行指定；<br>trigger_time ：触发时机，可以指定为before或after；<br>trigger_event：触发事件，包括INSERT,UPDATE和DELETE；<br>tab_name：要建立触发器的表名；<br>这个可以在BEGIN，END之间包含多条语句。</p><p><strong>示例</strong></p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> book_insert_select <span class="token keyword">AFTER</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> book <span class="token keyword">FOR EACH ROW</span><span class="token keyword">BEGIN</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book2<span class="token punctuation">(</span>bookname<span class="token punctuation">)</span> <span class="token keyword">SELECT</span> bookname <span class="token keyword">FROM</span> book<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book3<span class="token punctuation">(</span>bookname<span class="token punctuation">)</span> <span class="token keyword">SELECT</span> bookname <span class="token keyword">FROM</span> book<span class="token punctuation">;</span><span class="token keyword">END</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><p>简单的说存储过程就是一条或者多条语句的集合，可视为批文件，但是其作用不仅限于批处理。</p><p><strong>1、创建存储过程</strong></p><p>MySQL中，创建存储过程的基本形式如下：</p>   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span>  存储过程名 <span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token keyword">BEGIN</span>      <span class="token keyword">SQL</span>语句代码块<span class="token keyword">END</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中参数列表的形式如下：</p><p>[IN|OUT|INOUT] param_name type</p><p>其中in表示输入参数，out表示输出参数，inout表示既可以输入也可以输出；param_name表示参数名称；type表示参数的类型，该类型可以是MYSQL数据库中的任意类型。</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 创建存储过程</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> my_test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> book<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token comment"># 调用存储过程</span><span class="token keyword">CALL</span> my_test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 删除存储过程</span><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> my_test<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 创建存储过程</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> my_test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token comment">#   declare 定义变量i </span>    <span class="token keyword">DECLARE</span> i <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">WHILE</span> i<span class="token operator">&lt;</span><span class="token number">10</span> <span class="token keyword">do</span>        <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book <span class="token punctuation">(</span>bookname<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token string">'悲惨的世界'</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">SET</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">WHILE</span> <span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h1><p>datagrip快捷键</p><ul><li>代码格式化：ctrl+alt+L（Windows）/  cmd+opt+L（Mac）</li><li>快速执行：comman + enter（Mac）</li><li>查看表关系：右键一张表——点击最下面diagrams——点击show Visulization即可</li></ul><p>推荐书籍</p><ul><li>高性能MySQL</li><li>MySQL技术内幕INNODB引擎</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面向面试简答题之查漏补缺</title>
      <link href="posts/79b0.html"/>
      <url>posts/79b0.html</url>
      
        <content type="html"><![CDATA[<p><code>面试是一个相互引导的过程，面试官会通过相应的问题来考察你的知识广度和深度，而你需要引导面试官你擅长的领域。</code></p><h1 id="——计算机网络——"><a href="#——计算机网络——" class="headerlink" title="——计算机网络——"></a>——计算机网络——</h1><h1 id="简述tcp3次握手"><a href="#简述tcp3次握手" class="headerlink" title="简述tcp3次握手"></a>简述tcp3次握手</h1><p>三次握手 [SYN、ACK]</p><ul><li><a href="https://cdn.jsdelivr.net/gh/doubleLLL3/blogImgs@main/img/C51Xz7NYuU8B5eIK.png"><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/doubleLLL3/blogImgs@main/img/C51Xz7NYuU8B5eIK.png" alt="图片"></a></li><li><strong>第一次握手</strong>：客户端发送SYN包到服务器[客户端进入SYN_SEND状态，等待服务器确认]</li><li><strong>第二次握手</strong>：服务器收到，必须确认客户端，设置一个ACK，同时自己也设置一个SYN，即SYN+ACK包[服务端从LISTEN进入SYN_RECV状态]</li><li><strong>第三次握手</strong>：客户端收到服务器的SYN＋ACK包，向服务器发送ACK确认包，发送完毕后，客户端进入ESTABLISHED状态，服务器收到ACK后也进入ESTABLISHED状态</li><li>注意：每次的ACK序号，在需要确认的包的序号上加一，表示确认</li></ul><h2 id="简述tcp为什么要3次握手，为什么2次不行，4次可以么？"><a href="#简述tcp为什么要3次握手，为什么2次不行，4次可以么？" class="headerlink" title="简述tcp为什么要3次握手，为什么2次不行，4次可以么？"></a>简述tcp为什么要3次握手，为什么2次不行，4次可以么？</h2><p>首先网络是极其复杂且恶劣的环境，以至于设计出了tcp这样的可靠传输协议，全双工的协议，一条连接的建立，有去必有回才算建立</p><ul><li>先来看一次握手为什么不行，这当然是行不通的，假设客户端A传一个包给服务端B，此时建立一条连接，而B没有应答，在这个过程中可能出现了丢包的情况，A就无法确认数据包是否送达，有去无回，此时A自然认为自己无法正确连接B。</li><li><p>为什么2次不行：同样，客户端A想从服务端B请求数据，发了一个数据包，此时A与B建立一条连接（第一次握手），B收到了A的请求并给A一个应答，此时又建立了一条连接（第二次握手），若就这样结束，因为中途数据包可能丢失，或者因为A结束了与B的连接，那么B也无法判断我建立的这条连接是否能正确的发送数据包，也就无法断定是否建立了与A的连接。——B发了但是没收到应答，不算建立成功</p></li><li><p>4次可以么？：是可以的，但是没有必要，对A来讲，若B给了一个响应，那么A认为自己是可以连接到B的，同样的，若B给了A应答后收到了A的应答，那么B认为连接建立成功，这样A与B就可以正常通信了。对于4次握手来说，可能对于B应答的应答（第三次握手）这样的数据包在网络中可能丢失，B会再次传送一个应答，来尝试是否能与A进行连接，但这是网络原因，只要B收到了A的应答，那么就是可以进行正确的连接，4次握手可以，但是没有必要，还是无法保证网络的稳定性</p></li><li><span class="github-emoji"><span>⭐</span><img src="/img/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>扩展：TCP建立连接的过程中还要确认数据包的序号，防止接受不需要或者不想传的包——A与B建立了连接（发送数据包后），此时A直接断开，但是数据包在网络上流离，此时A又与B重新建立连接，由于网络的时延性，B很有可能收到在网络上流离的数据包，那么这样就不是我们想要的数据。<ul><li>所以要确认数据包的序号，这个序号是随着时间的变化而变化的，若是要收到相同序号的包，则需要4个小时，由于存在TTL，那些数据包早就灰飞烟灭了</li></ul></li></ul><h2 id="简述从输入网址到浏览器显示的过程"><a href="#简述从输入网址到浏览器显示的过程" class="headerlink" title="简述从输入网址到浏览器显示的过程"></a>简述从输入网址到浏览器显示的过程</h2><blockquote><p>  这个问题非常经典，但还是会经常问，因为考察你对计算机网络知识的广度，然后面试官再进一步问你更深入的问题</p></blockquote><p>总的来说整个过程如下：</p><p>DNS解析：将域名解析成IP地址</p><ul><li>本地hosts，本地DNS解析器缓存</li><li>本地DNS</li><li>迭代/递归：根DNS服务器，顶级DNS，权威DNS</li><li>直到找到域名对应的IP</li></ul><p>TCP连接：TCP三次握手（可以阐述为什么需要3次握手？）</p><p>发送HTTP请求——请求方法、URL、HTTP版本</p><p>服务器处理请求并返回HTTP报文</p><ul><li>解析用户请求，知道了需要调度哪些资源文件，并调用数据库信息，返回给浏览器客户端</li><li>返回响应结果——一般会有一个HTTP状态码，比如200、301、404等，通过这个状态码我们可以直到服务器端的处理是否正常，并能了解具体的错误</li></ul><p>浏览器解析渲染页面</p><p>断开连接：TCP四次挥手</p><p><span class="github-emoji"><span>⭐</span><img src="/img/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>上述过程如有不熟悉的，应当加以了解，这是计算机基础</p><h2 id="TCP与UDP有哪些区别？"><a href="#TCP与UDP有哪些区别？" class="headerlink" title="TCP与UDP有哪些区别？"></a>TCP与UDP有哪些区别？</h2><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210530151206.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210530151230.png" alt=""></p><ul><li>TCP是面向连接的，实现数据可靠传输，拥有拥塞控制等流量控制算法，会根据网络环境调节传输速度，比较复杂。</li></ul><h2 id="TCP四次挥手的过程是什么样的？"><a href="#TCP四次挥手的过程是什么样的？" class="headerlink" title="TCP四次挥手的过程是什么样的？"></a>TCP四次挥手的过程是什么样的？</h2><ul><li><p>四次挥手 [FIN、ACK]</p><ul><li><p><a href="https://cdn.jsdelivr.net/gh/doubleLLL3/blogImgs@main/img/GlWgLx87BeFdH15F.png"><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/doubleLLL3/blogImgs@main/img/GlWgLx87BeFdH15F.png" alt="图片"></a></p></li><li><p><strong>第一次挥手</strong>：假设客户端想要关闭连接，客户端发送一个FIN包，表示自己已经没有数据可以发送了 [此时仍然可以接收数据][客户端进入FIN_WAIT_1状态]</p></li><li><p>第二次挥手：服务端回复一个ACK包，表明自己接收到了客户端关闭连接的请求，但自己还需要做些准备来关闭连接[服务端进入CLOSE_WAIT状态]</p><ul><li>客户端接收到这个ACK后，进入FIN_WAIT_2状态，等待服务端关闭连接</li></ul></li><li><p><strong>第三次挥手</strong>：服务端准备好关闭连接时，向客户端再发送FIN[服务端进入LAST_ACK状态，等待客户端的确认]</p></li><li><p>第四次挥手：客户端接收到来自服务器端的关闭请求，发送一个ACK包[客户端进入 TIME_WAIT状态，为可能出现的超时重传的FIN包，等待2个MSL时间]</p><ul><li>服务端接收到这个ACK之后，关闭连接，进入CLOSED状态</li></ul></li><li>客户端等待了<strong>2个MSL</strong>后，如果没有收到服务端的FIN，则认为服务端已经正常关闭连接，于是自己也关闭连接，进入CLOSED状态；否则，再次发送ACK</li></ul></li><li><p>参考<a href="https://hit-alibaba.github.io/interview/basic/network/TCP.html#三次握手与四次挥手?fileGuid=zdkyBEa86pCYmlA6">三次握手与四次挥手</a>——博客 [注：第四次挥手客户端等待的是超时重传的FIN而不是ACK]</p></li></ul><h3 id="附加：2个MSL的含义"><a href="#附加：2个MSL的含义" class="headerlink" title="附加：2个MSL的含义"></a>附加：2个MSL的含义</h3><p>TIME_WAIT是如何引起的，有什么作用，在编程时有什么弊端，怎么解决？</p><ul><li><p>引起原因：TCP的四次挥手时，已经完成前三次挥手，在第四次挥手时，客户端收到来自服务端的FIN，它在发送一个ACK后，就会进入TIME_WAIT状态</p><ul><li>此时客户端需要等待两个最大<strong>数据段生命周期</strong>（Maximum segment lifetime，MSL）的时间之后，才会进入CLOSED状态</li></ul></li><li><p>存在原因</p><ul><li><p>①阻止延迟数据段</p><ul><li>每一个TCP数据段都包含唯一的序列号，这个序列号能够保证TCP协议的可靠</li><li>为了保证新TCP连接的数据段不会与还在网络中传输的历史连接的数据段重复，TCP连接在分配新的序列号之前需要至少<strong>静默</strong>数据段在网络中能够存活的最长时间，即MSL</li><li>从而防止延迟的数据段被其他使用相同源地址、源端口、目的地址以及目的端口的TCP连接收到</li></ul></li><li><p>②保证连接关闭</p><ul><li>如果客户端等待的时间不够长，当服务端还没有收到ACK消息，而客户端重新与服务端建立TCP连接时，会发生：<ul><li>服务端因为没有收到ACK消息，所以仍然认为当前连接是合法的</li><li>客户端重新发送SYN消息请求握手时，会收到服务端的RST消息，连接建立的过程被终止</li></ul></li><li>所以要保证TCP连接的远程被正确关闭，即等待被动关闭连接的一方收到FIN对应的ACK消息</li></ul></li></ul></li><li><p>编程影响</p><ul><li>对于高并发的场景容易出现过多的TIME_WAIT</li><li>而MSL的时长一般是60s，这是难以接受的，可能一个TCP连接只为了通信几秒钟，但TIME_WAIT就需要等待2分钟</li></ul></li><li><p>解决方式</p><ul><li>基于一个<strong>时间戳变量</strong>，记录发送数据包、最近一次接收数据包的时间</li><li>然后配合两个参数<ul><li><strong>reuse</strong>：允许主动关闭连接的一方，再次向对方发起连接的时候，复用处于TIME_WAIT状态的连接</li><li><strong>recycle</strong>：内核会快速回收处于TIME_WAIT的连接，只需等待RTO时间 [数据包重传的超时时间]</li></ul></li></ul></li><li><p>参考</p><ul><li><a href="https://draveness.me/whys-the-design-tcp-time-wait/?fileGuid=zdkyBEa86pCYmlA6">为什么 TCP 协议有 TIME_WAIT 状态</a>——博客</li><li><a href="https://zhuanlan.zhihu.com/p/40013724?fileGuid=zdkyBEa86pCYmlA6">系统调优你所不知道的TIME_WAIT和CLOSE_WAIT</a>——知乎</li><li><a href="https://www.yisu.com/zixun/63792.html?fileGuid=zdkyBEa86pCYmlA6">理解TIME_WAIT，彻底弄清解决TCP: time wait bucket table overflow</a>——亿速云</li></ul></li></ul><h2 id="什么是HTTPS的SSL认证？"><a href="#什么是HTTPS的SSL认证？" class="headerlink" title="什么是HTTPS的SSL认证？"></a>什么是HTTPS的SSL认证？</h2><p><img src="/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/srymaker0/blogImgs@main/Img/20210622002619.png" style="zoom:50%;"></p><p>参考——<a href="https://www.runoob.com/w3cnote/https-ssl-intro.html">HTTPS 与 SSL 证书概要</a></p><h1 id="——C-C-相关——"><a href="#——C-C-相关——" class="headerlink" title="——C/C++相关——"></a>——C/C++相关——</h1><h2 id="C-为什么不像JAVA一样有垃圾回收机制"><a href="#C-为什么不像JAVA一样有垃圾回收机制" class="headerlink" title="C++为什么不像JAVA一样有垃圾回收机制"></a>C++为什么不像JAVA一样有垃圾回收机制</h2><p>垃圾回收机制——在JAVA中，我们对资源的申请不需要人为的手动释放，JVM会自动释放这些资源</p><p>C++中有RAII（Resource Acquisition is Initialization——资源获取即初始化）技术管理资源</p><ul><li>在构造函数中申请分配资源，在析构函数中释放资源——这是C++语言机制保证的，当一个对象创建的时候，自动调用构造函数，当对象超出作用域的时候会自动调用析构函数，所以，在RAII的指导下，我们应该使用类来管理资源，将资源和对象的生命周期绑定。</li><li>C++中智能指针就利用这样的思想，实现自动的内存管理</li><li>可参考<a href="https://www.cnblogs.com/jiangbin/p/6986511.html">C++RAII介绍</a></li></ul><h2 id="map和unordered-map的区别"><a href="#map和unordered-map的区别" class="headerlink" title="map和unordered_map的区别"></a>map和unordered_map的区别</h2><p>两者底层实现不同：map——红黑树，unordered_map——哈希表</p><p>map：为什么要使用红黑树实现，用其它的呢？</p><ul><li>因为对于单次增删改查操作的时间复杂度都为$O(logn)$</li><li>红黑树是二叉查找树，中序遍历可以有序输出</li><li>对比BST（binary_search_tree）和AVL——BST会退化为链表，排除；而AVL由于其有严格的平衡条件，每次操作可能花费的时间都在平衡上了，影响效率，不适合</li></ul><p>Unordered_map</p><ul><li>哈希表使用拉链法解决哈希冲突，拉链的数据量超过8会使用拉链法，否则自动退化使用红黑树</li><li>Unordered_map查询时间复杂度可能做不到$O(1)$，因为其存在退化</li><li>做不到数据有序</li></ul><h2 id="C-STL-sort的实现"><a href="#C-STL-sort的实现" class="headerlink" title="C++ STL sort的实现"></a>C++ STL sort的实现</h2><p>可参考</p><p><a href="https://srymaker0.com/posts/9271">数据结构力扣刷题集——7.快速排序+优化</a></p><h2 id="const关键字的作用"><a href="#const关键字的作用" class="headerlink" title="const关键字的作用"></a>const关键字的作用</h2><p>修饰变量——该变量不能被改变</p><p>修饰指针——指针常量和常量指针</p><p>修饰引用</p><ul><li>形参引用使用const修饰：<code>foo(const int &amp;a)</code>，这样修饰表示传递过程中不会对值进行修改？</li></ul><p>修饰成员函数</p><ul><li>成员函数不会对成员变量进行修改</li></ul><h2 id="static关键字的作用"><a href="#static关键字的作用" class="headerlink" title="static关键字的作用"></a>static关键字的作用</h2><p>修饰普通变量</p><ul><li>修改变量的存储区域（变为静态区）和生命周期</li></ul><p>修饰普通函数</p><ul><li>仅在该函数的文件内可使用——多人开发中常见，两个人在A文件与B文件写了同名函数的情况，比如用static修饰A文件的同名函数可以别人使用你在A文件内的这个函数</li></ul><p>修饰成员变量</p><ul><li>对很多实例来说，被static修饰的成员变量只有一个，这么多的实例其实共享一个static成员变量（跟着类走的）</li></ul><p>修饰成员函数</p><ul><li>不需要生成对象就可以访问该函数（跟着类走的）</li><li>函数内部不能访问非static的成员属性</li></ul><h1 id="——操作系统相关——"><a href="#——操作系统相关——" class="headerlink" title="——操作系统相关——"></a>——操作系统相关——</h1><h2 id="什么是虚拟内存？"><a href="#什么是虚拟内存？" class="headerlink" title="什么是虚拟内存？"></a>什么是虚拟内存？</h2><h2 id="说一下零拷贝技术"><a href="#说一下零拷贝技术" class="headerlink" title="说一下零拷贝技术"></a>说一下零拷贝技术</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构基础——C语言实现</title>
      <link href="posts/73f4.html"/>
      <url>posts/73f4.html</url>
      
        <content type="html"><![CDATA[<p>程序 = 算法 + 数据结构</p><p>程序设计 = 算法 + 数据结构 + 编程范式</p><p>算法解决的是计算机的计算资源  而数据结构解决的是计算机的存储资源  解决这两个问题才是一个好的程序 这也就是为什么要学习数据结构的原因</p><p>⚡数据结构 = 结构定义 + 结构操作 (对于什么是数据 后面会有更深的理解) </p><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p>一种功能更为高级的一种数组 它需要开辟一段连续的空间并且空间的每个位置可以存储任意类型</p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/21/BvEkmQTbLlAu1PU.png" style="zoom:67%;"></p><p>size表示顺序表的大小        length表示当前元素的个数      data_type表示元素的类型</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">COLOR</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> </span><span class="token string">"\033["</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">b</span> </span></span><span class="token string">"m"</span> <span class="token expression">a </span><span class="token string">"\033[0m"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GREEN</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token function">COLOR</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Vector</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>data<span class="token punctuation">;</span><span class="token comment">//指向的是一段自己开辟的类型的空间的首地址</span>    <span class="token keyword">int</span> size<span class="token punctuation">,</span> length<span class="token punctuation">;</span><span class="token punctuation">}</span> Vec<span class="token punctuation">;</span>Vec <span class="token operator">*</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Vec <span class="token operator">*</span>v <span class="token operator">=</span> <span class="token punctuation">(</span>Vec <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Vec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    v<span class="token operator">-&gt;</span>size <span class="token operator">=</span> n<span class="token punctuation">;</span>    v<span class="token operator">-&gt;</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> v<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">expand</span><span class="token punctuation">(</span>Vec <span class="token operator">*</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> extr_size <span class="token operator">=</span> v<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>    <span class="token comment">//return v-&gt;data = (int *)realloc(v-&gt;data, sizeof(int) * (v-&gt;size + extr_size));</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>extr_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//realloc会自动将原来的空间回收掉</span>        p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>v<span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v<span class="token operator">-&gt;</span>size <span class="token operator">+</span> extr_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果p不为空地址 则我们开辟成功 直接break退出循坏 否则一直开辟原来的1/2倍</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        extr_size <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//如果extr_size == 0 则说明真的开不下了 直接返回0值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>extr_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    v<span class="token operator">-&gt;</span>data <span class="token operator">=</span> p<span class="token punctuation">;</span>    v<span class="token operator">-&gt;</span>size <span class="token operator">+=</span> extr_size<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>Vec <span class="token operator">*</span>v<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span> ind<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ind <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> ind <span class="token operator">&gt;</span> v<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-&gt;</span>length <span class="token operator">==</span> v<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">expand</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">GREEN</span><span class="token punctuation">(</span><span class="token string">"success to expand! the Vector size is %d\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> v<span class="token operator">-&gt;</span>length<span class="token punctuation">;</span> i <span class="token operator">&gt;</span> ind<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        v<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    v<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>    v<span class="token operator">-&gt;</span>length <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">erase</span><span class="token punctuation">(</span>Vec <span class="token operator">*</span>v<span class="token punctuation">,</span> <span class="token keyword">int</span> ind<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ind <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> ind <span class="token operator">&gt;=</span> v<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> ind <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-&gt;</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        v<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    v<span class="token operator">-&gt;</span>length <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//动态开辟空间需要自己手动释放 避免内存泄漏</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>Vec <span class="token operator">*</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span>Vec <span class="token operator">*</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Vector : ["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-&gt;</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        i <span class="token operator">&amp;&amp;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> v<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"]\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max_op</span> <span class="token expression"><span class="token number">20</span></span></span>    Vec <span class="token operator">*</span>v <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_op<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ind <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>v<span class="token operator">-&gt;</span>length <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> op <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>op<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"insert %d at %d to Vector = %d\n"</span><span class="token punctuation">,</span> val<span class="token punctuation">,</span> ind<span class="token punctuation">,</span> <span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> val<span class="token punctuation">,</span> ind<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"erase a iterm at %d from Vector = %d\n"</span><span class="token punctuation">,</span> ind<span class="token punctuation">,</span> <span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> ind<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">output</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">clear</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>malloc动态内存申请 malloc只是划分一个空间告诉你这个空间是可以用的 </p><ul><li>成功时，返回指向新分配内存开头的指针。</li><li>为了避免内存泄漏，必须使用free（） 或 realloc（）释放返回的指针。 </li><li>失败时，返回一个空指针。</li></ul></li><li><p>而calloc在开辟空间的时候会将这段空间清0或者是空地址</p></li><li><p>realloc(地址,大小)指的是重新给你分配一段空间</p><ul><li><p>第一个参数传进去一个地址 是我们要对哪片空间进行重新划分 而这片空间的首地址就是我们的第一个参数  </p></li><li><p>第二个参数是 将现在的这片空间扩大多大的字节数  返回值是新开辟出来的空间的首地址</p></li><li>可以在原来的基础上开辟额外的空间 如果还是存不下则会返回NULL值 此时必须格外注意， 不能让原数据域指向它</li><li>如果开辟了额外空间还是存不下 则会重新分配一段和原空间一样大的空间并且扩大两倍 不过我们在这里让它扩大原来的1/2倍  </li></ul></li><li></li></ul><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/SxkqLQKFN7lEhea.png" style="zoom: 67%;"></p><ul><li><p>链表可以分为两部分 </p><ul><li><p><strong>程序内部</strong> 这里指的就是头指针 我们在程序内部能看到的只有头指针所连接的链表</p><ul><li>我们可以通过头指针去操作链表</li></ul></li><li><p><strong>内存内部</strong> 这部分是链表的本质 在逻辑上如上图一样</p><ul><li>最后一个节点的指针域为NULL</li><li>单向链表的指针域又名“后继”；双向链表有“前驱”和“后继”</li></ul></li></ul></li><li><p>对于普通的链表中的指针域 我们称之为后继（当前指针域指向后面节点的地址）</p></li><li><p>插入</p><ul><li>①走到待插入位置的<strong>前一个</strong>位置的节点p</li><li>②先将新的节点x的指针域指向待插入位置的节点p.next</li><li>③将p的指针域指向新的节点x</li><li>顺序不能变！否则可能引发内存泄漏（你想用已经用不了，但系统却以为你在用）</li></ul></li></ul><p>  删除</p><ul><li><p>走到待删除节点位置的<strong>前一个</strong>位置</p><p>翻转</p></li><li><p>方法一</p><ul><li>用一个新链表存，使用头插法</li><li>不断在index = 0 的位置插入节点</li><li>不足：浪费空间，麻烦</li></ul></li><li>方法二<ul><li>原地翻转，用两个变量倒，也是头插法</li><li>前提：每次操作不要造成内存泄漏</li><li>NULL地址还是在最后面，不会翻转</li></ul></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">COLOR</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> </span><span class="token string">"\033["</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">b</span> </span></span><span class="token string">"m"</span> <span class="token expression">a </span><span class="token string">"\033[0m"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GREEN</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token function">COLOR</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span></span></span><span class="token comment">//链表的结构定义</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token comment">//struct 结构体类型关键字  虽然我们重命名了ListNode 但是12行还没有生效</span><span class="token punctuation">}</span> ListNode<span class="token punctuation">;</span><span class="token comment">//链表整体的结构定义</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">List</span> <span class="token punctuation">{</span>    <span class="token comment">//ListNode *head;//头指针 因为插入的原则是 在待插入元素前进行插入 当链表为空时 很不好操作</span>    ListNode head<span class="token punctuation">;</span><span class="token comment">//虚拟头节点 为了方便插入和删除第一个元素  </span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">}</span> List<span class="token punctuation">;</span><span class="token comment">//链表的结构操作</span><span class="token comment">//初始化</span>ListNode <span class="token operator">*</span><span class="token function">getNewNode</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List <span class="token operator">*</span><span class="token function">getLinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">clear_node</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>List<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>List <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">erase</span><span class="token punctuation">(</span>List <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span>List <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span>List <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max_op</span> <span class="token expression"><span class="token number">20</span></span></span>    List <span class="token operator">*</span>l <span class="token operator">=</span> <span class="token function">getLinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_op<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ind <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>l<span class="token operator">-&gt;</span>length <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> op <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>op<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"insert %d at %d to List = %d\n"</span><span class="token punctuation">,</span> val<span class="token punctuation">,</span> ind<span class="token punctuation">,</span> <span class="token function">insert</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> ind<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"erase a iterm at %d from List = %d\n"</span><span class="token punctuation">,</span> ind<span class="token punctuation">,</span> <span class="token function">erase</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> ind<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">GREEN</span><span class="token punctuation">(</span><span class="token string">"reverse the list!\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">reverse</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">output</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">max_op</span></span>    <span class="token function">clear</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ListNode <span class="token operator">*</span><span class="token function">getNewNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ListNode <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>ListNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ListNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>data <span class="token operator">=</span> val<span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span>List <span class="token operator">*</span><span class="token function">getLinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List <span class="token operator">*</span>l <span class="token operator">=</span> <span class="token punctuation">(</span>List <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    l<span class="token operator">-&gt;</span>head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//因为虚拟头节点是一个没有实际意义的节点 所以虚拟头节点指向的后面的那个节点才是真的头节点</span>    l<span class="token operator">-&gt;</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>List <span class="token operator">*</span>l<span class="token punctuation">,</span> <span class="token keyword">int</span> ind<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ind <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> ind <span class="token operator">&gt;</span> l<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//下标是0 ~ length-1</span>    ListNode <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>l<span class="token operator">-&gt;</span>head<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token function">getNewNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ind<span class="token operator">--</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    l<span class="token operator">-&gt;</span>length <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">erase</span><span class="token punctuation">(</span>List <span class="token operator">*</span>l<span class="token punctuation">,</span> <span class="token keyword">int</span> ind<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ind <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> ind <span class="token operator">&gt;=</span> l<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>l<span class="token operator">-&gt;</span>head<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ind<span class="token operator">--</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    q <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> q<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    l<span class="token operator">-&gt;</span>length <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//链表原地翻转 先将头节点指向空 用p 和 q去维护整个链表</span><span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span>List <span class="token operator">*</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>p <span class="token operator">=</span> l<span class="token operator">-&gt;</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>    l<span class="token operator">-&gt;</span>head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        q <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> l<span class="token operator">-&gt;</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        l<span class="token operator">-&gt;</span>head<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>        p <span class="token operator">=</span> q<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span>List <span class="token operator">*</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"List(%d) = ["</span><span class="token punctuation">,</span> l<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ListNode <span class="token operator">*</span>p <span class="token operator">=</span> l<span class="token operator">-&gt;</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span> p<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d-&gt;"</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NULL]\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear_node</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>List <span class="token operator">*</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>p <span class="token operator">=</span> l<span class="token operator">-&gt;</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">;</span><span class="token comment">//q中间变量</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        q <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token function">clear_node</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> q<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>⭐初始化数据结构[比如链表、链表结点]时，为什么要动态开辟内存[用malloc等]，而不是定义普通变量？<ul><li>首先，排除盲区：用指针才能接受malloc返回的地址，但指针也能指向普通变量</li><li>关键：【malloc申请的内存在堆空间，普通变量定义在栈空间(在函数里面定义的)】</li><li>栈空间：大小只有8MB；出了函数[作用域]变量就被自动释放了</li><li>堆空间：可分配<strong>大内存</strong>；变量<strong>生命周期长</strong>，一般需手动释放</li></ul></li><li>❓虚拟头结点定义为普通变量和指针变量的区别<ul><li>个人理解，用指针变量，是为了接收malloc返回的地址</li><li>而虚拟头结点，在这只是一个指示作用，不需要大空间，所以用普通变量即可而</li></ul></li></ul><h2 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h2><p>队列    先进先出的数据结构（First in First out） 从队尾加入（push）一个元素 从队首弹出（pop）一个元素</p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/3EqzIo9YdxFZyJD.png" style="zoom: 50%;"></p><p>head记录队首元素的位置 tail记录队尾元素的位置</p><ul><li>出队： 让head指向下一个元素  长度和容量都不变</li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/XKRBqOWmpY4AjPk.png" style="zoom: 33%;"></p><ul><li>入队：让tail指向后一个地址 在此地址中进行加入元素 </li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/kXSwFfRxU2ZLaTi.png" style="zoom:33%;"></p><ul><li><p>假溢出问题：当队列如下图时 弹出了3个元素且加入了4个元素使得队列满了 我们可以发现<code>tail</code>已经走到了末尾 如果此时我们还想插入一个元素10 该怎么办呢？<br>  其实之前我们弹出了3个元素 这3个空间是可以使用的 那么我们是否可以将tail指向被弹出的元素的地址（队列的头部）呢？ </p><p>  ​    答案是可以的  当我们这么做时 此时的队列就变成了==循环队列==</p><p>  ​    循环队列就是用于解决这种假溢出问题的</p></li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/iCZMTqLX2KJuUVt.png" style="zoom:33%;"></p><p>那么我们如何去判断一个队列是否是满的呢？ 在循环队列中我们还需要加入一个字段<code>count</code>用于记录有效元素个数</p><p>==普通队列==</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token keyword">int</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">,</span> length<span class="token punctuation">;</span><span class="token comment">//length 容量</span><span class="token punctuation">}</span> Queue<span class="token punctuation">;</span>Queue <span class="token operator">*</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Queue <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token punctuation">(</span>Queue <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>length <span class="token operator">=</span> n<span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>head <span class="token operator">=</span> q<span class="token operator">-&gt;</span>tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//tail有两种实现方式 1.指向最后一个元素的地址 2.指向最后一个元素的下一个地址 这里我们选择第二种</span>    <span class="token keyword">return</span> q<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">front</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//if (q == NULL) return 0;</span>    <span class="token keyword">return</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>q<span class="token operator">-&gt;</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">empty</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> q<span class="token operator">-&gt;</span>head <span class="token operator">==</span> q<span class="token operator">-&gt;</span>tail<span class="token punctuation">;</span> <span class="token comment">//tail 指向的是最后一个元素的下一个</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">push</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>tail <span class="token operator">==</span> q<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>q<span class="token operator">-&gt;</span>tail<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token comment">//将val放入tail指向的位置 然后将tail++操作</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//判断当前队列是否为空 </span>    q<span class="token operator">-&gt;</span>head<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Queue : ["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> q<span class="token operator">-&gt;</span>head<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> q<span class="token operator">-&gt;</span>tail<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        j <span class="token operator">&amp;&amp;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印逗号和空格</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"]\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max_op</span> <span class="token expression"><span class="token number">20</span></span></span>    Queue <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span>max_op<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_op<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> op <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>op<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"push %d to the Queue! "</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"result = %d\n"</span><span class="token punctuation">,</span> <span class="token function">push</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pop %d from the Queue! "</span><span class="token punctuation">,</span> <span class="token function">front</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"result = %d\n"</span><span class="token punctuation">,</span> <span class="token function">pop</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">output</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">max_op</span></span>    <span class="token function">clear</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>循环队列</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">COLOR</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> </span><span class="token string">"\033["</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">b</span> </span></span><span class="token string">"m"</span> <span class="token expression">a </span><span class="token string">"\033[0m"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GREEN</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token function">COLOR</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>data<span class="token punctuation">;</span><span class="token comment">//队列数据域</span>    <span class="token keyword">int</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">,</span> length<span class="token punctuation">;</span><span class="token comment">//length 容量</span>    <span class="token keyword">int</span> cnt<span class="token punctuation">;</span><span class="token comment">//循环队列的字段</span><span class="token punctuation">}</span> Queue<span class="token punctuation">;</span>Queue <span class="token operator">*</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Queue <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token punctuation">(</span>Queue <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>length <span class="token operator">=</span> n<span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>head <span class="token operator">=</span> q<span class="token operator">-&gt;</span>tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//tail有两种实现方式 1.指向最后一个元素的地址 2.指向最后一个元素的下一个地址，方便循环队列判空</span>    q<span class="token operator">-&gt;</span>cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> q<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">front</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//if (q == NULL) return 0;</span>    <span class="token keyword">return</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>q<span class="token operator">-&gt;</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">empty</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// return q-&gt;head == q-&gt;tail; //tail 指向的是最后一个元素的下一个 </span>    <span class="token keyword">return</span> q<span class="token operator">-&gt;</span>cnt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//循环队列判空</span><span class="token punctuation">}</span><span class="token comment">//遇到真溢出</span><span class="token comment">//realloc不适用 尽管它能重新给我们分配一段大的空间 但是进行数据拷贝时是从0地址到尾地址进行拷贝 tail可能在head的前面</span><span class="token keyword">int</span> <span class="token function">expand</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> extr_size <span class="token operator">=</span> q<span class="token operator">-&gt;</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>extr_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>length <span class="token operator">+</span> extr_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        extr_size <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> q<span class="token operator">-&gt;</span>head<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> q<span class="token operator">-&gt;</span>cnt<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">%</span> q<span class="token operator">-&gt;</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>data <span class="token operator">=</span> p<span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>length <span class="token operator">+=</span> extr_size<span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>tail <span class="token operator">=</span> q<span class="token operator">-&gt;</span>cnt<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">push</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//if (q-&gt;tail == q-&gt;length) return 0;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>cnt <span class="token operator">==</span> q<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">expand</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//扩容操作</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">GREEN</span><span class="token punctuation">(</span><span class="token string">"expand successfully! Queue-&gt;size(%d)\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> q<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>q<span class="token operator">-&gt;</span>tail<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token comment">//将val放入tail指向的位置 然后将tail++操作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>tail <span class="token operator">==</span> q<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span> q<span class="token operator">-&gt;</span>tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>cnt <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//判断当前队列是否为空 </span>    q<span class="token operator">-&gt;</span>head<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>head <span class="token operator">==</span> q<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span> q<span class="token operator">-&gt;</span>head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//head也可能越界</span>    q<span class="token operator">-&gt;</span>cnt <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Queue : ["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> q<span class="token operator">-&gt;</span>head<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> q<span class="token operator">-&gt;</span>cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        j <span class="token operator">&amp;&amp;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印逗号和空格</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i <span class="token operator">%</span> q<span class="token operator">-&gt;</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//取模得到真实的位置</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"]\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max_op</span> <span class="token expression"><span class="token number">20</span></span></span>    Queue <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_op<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> op <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>op<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"push %d to the Queue! "</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"result = %d\n"</span><span class="token punctuation">,</span> <span class="token function">push</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pop %d from the Queue! "</span><span class="token punctuation">,</span> <span class="token function">front</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"result = %d\n"</span><span class="token punctuation">,</span> <span class="token function">pop</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">output</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">max_op</span></span>    <span class="token function">clear</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==栈==</p><ul><li>一种先进后出的数据结构 （FILO） <ul><li>如果是一个空栈 top = -1 因为顺序结构下标从0~n-1进行访问</li></ul></li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/ZLvfEimw6OVbrn7.png" style="zoom: 33%;"></p><ul><li><p>出栈</p><ul><li><p>将栈顶指针向下移动一位</p></li><li><p>出栈要进行判空操作</p><p>  <img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/UM3SzBDqkFVtQH7.png" style="zoom:33%;"></p></li></ul></li><li><p>入栈</p><ul><li>将栈顶指针向上移动</li><li>要进行判断边界操作</li></ul></li></ul><h3 id="括号匹配问题"><a href="#括号匹配问题" class="headerlink" title="括号匹配问题"></a>括号匹配问题</h3><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/6BQE7XzOlnkr1gI.png" style="zoom: 33%;"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>val<span class="token punctuation">;</span>    <span class="token keyword">int</span> p<span class="token punctuation">,</span> maxSize<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">initStack</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Stack</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> maxSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    s<span class="token operator">-&gt;</span>val <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>maxSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">emptyStack</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Stack</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">pushStack</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Stack</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    s<span class="token operator">-&gt;</span>val<span class="token punctuation">[</span>s<span class="token operator">-&gt;</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">popStack</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Stack</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">--</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token function">seekStack</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Stack</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token operator">-&gt;</span>val<span class="token punctuation">[</span>s<span class="token operator">-&gt;</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> <span class="token class-name">Stack</span> stack<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'('</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token string">'['</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token string">'{'</span><span class="token operator">:</span>                <span class="token function">pushStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">')'</span><span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">emptyStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">seekStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>                <span class="token function">popStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">']'</span><span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">emptyStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">seekStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">']'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>                <span class="token function">popStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'}'</span><span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">emptyStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">seekStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'}'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>                <span class="token function">popStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">emptyStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>栈的代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">COLOR</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> </span><span class="token string">"\033["</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">b</span> </span></span><span class="token string">"m"</span> <span class="token expression">a </span><span class="token string">"\033[0m"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GREEN</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token function">COLOR</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">,</span> top<span class="token punctuation">;</span><span class="token comment">//size容量 top栈顶指针</span><span class="token punctuation">}</span> Stack<span class="token punctuation">;</span>Stack <span class="token operator">*</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Stack <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token punctuation">(</span>Stack <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>size <span class="token operator">=</span> n<span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>s<span class="token operator">-&gt;</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">empty</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token operator">-&gt;</span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">expand</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> extr_size <span class="token operator">=</span> s<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>extr_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>size <span class="token operator">+</span> extr_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        extr_size <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>data <span class="token operator">=</span> p<span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>size <span class="token operator">+=</span> extr_size<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">push</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>top <span class="token operator">==</span> s<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">expand</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">GREEN</span><span class="token punctuation">(</span><span class="token string">"expand successfully! stack-&gt;size = (%d)\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    s<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token operator">++</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>top<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>top <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> s<span class="token operator">-&gt;</span>top<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        i <span class="token operator">&amp;&amp;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> s<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"]\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max_op</span> <span class="token expression"><span class="token number">20</span></span></span>    Stack <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_op<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> op <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>op<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"push %d to the Stack = %d\n"</span><span class="token punctuation">,</span> val<span class="token punctuation">,</span> <span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">&amp;&amp;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pop %d frome the Stack"</span><span class="token punctuation">,</span> <span class="token function">top</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"result = %d\n"</span><span class="token punctuation">,</span> <span class="token function">pop</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">output</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">max_op</span></span>    <span class="token function">clear</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="树与二叉树"><a href="#树与二叉树" class="headerlink" title="树与二叉树"></a>树与二叉树</h2><p>树的组成：结点 + 边</p><ul><li>结点 👉 集合，边 👉 关系</li><li>根结点：全集；子结点：子集<ul><li>根结点的所有子结点的集合并集 = 全集</li><li>【思想】大问题抽象为树，小问题抽象为子结点</li></ul></li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/AwHZhstcYrVjqCl.png" style="zoom:33%;"></p><ul><li>深度、高度<ul><li>树的深度和高度是一个值：最大层数</li><li>结点的深度和高度不一样<ul><li>深度：从根结点往下数，该结点是第几层</li><li>高度：从最深的层数往上数，该结点是第几层</li></ul></li></ul></li><li>度：有几个子孩子<ul><li>节点的度：一个节点含有的子树的个数称为该节点的度；</li><li>叶节点或终端节点：度为0的节点称为叶节点；</li><li>非终端节点或分支节点：度不为0的节点  ；</li><li>双亲节点或父节点：若一个节点含有子节点，则这个节点称为其子节点的父节点；</li><li>孩子节点或子节点：一个节点含有的子树的根节点称为该节点的子节点；</li><li>兄弟节点：具有相同父节点的节点互称为兄弟节点；</li><li>节点的层次：从根开始定义起，根为第1层，根的子节点为第2层，以此类推；</li><li>树的高度或深度：树中节点的最大层次；</li><li>堂兄弟节点：双亲在同一层的节点互为堂兄弟；</li><li>节点的祖先：从根到该节点所经分支上的所有节点；</li><li>子孙：以某节点为根的子树中任一节点都称为该节点的子孙。</li><li>森林：由m（m&gt;=0）棵互不相交的树的集合称为森林。</li></ul></li><li>⭐【重要公式】结点数 = 边数 + 1</li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/qg7FrRpnvO8Gc42.png" style="zoom:33%;"></p><ul><li>二叉树<ul><li>任何树都可以变成一颗二叉树</li></ul></li><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/5ZjCn74VBRxJUtN.png" style="zoom:33%;"></li></ul><ul><li>这是一颗三叉树  可以把它变成二叉树二进制可以转换成任何进制，二叉树同理<ul><li>首先简单</li><li>且可以表示所有的树形结构<ul><li>方法：左孩子、右兄弟法，又称十字链表法</li><li>从上往下，从左往右，结点的孩子放在左边，结点的相邻兄弟放在右边</li></ul></li></ul></li><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/FUlzSDVTWxOC8Z3.png" style="zoom:33%;"></li></ul><p>⭐【重要公式】二叉树中，度为0的结点比度为2的结点多1个</p><ul><li>利用另一重要公式：结点数 = 边数 + 1</li><li>令ni表示度为i的结点个数</li><li>则：[结点数] n0 + n1 + n2 = n1 + 2 * n2 + 1 [边数 + 1]</li><li>得：n0 = n2 + 1</li></ul><ul><li>完全二叉树：只差最后一个右孩子</li><li>满二叉树： 只有度为0 和度为2 的节点</li><li>完美二叉树： 不多不少很完美</li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/8mJlVoA5ErQ394W.png" style="zoom: 33%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/iDOCLrVKkWxp96e.png" style="zoom:33%;"></p><ul><li>对于一颗二叉树<ul><li>若根节点表示i<ul><li>左孩子为 2*i</li><li>右孩子为 2*i + 1 </li></ul></li></ul></li></ul><p><strong>==binary_tree==</strong></p><ul><li>实现的是二叉查找树（二叉排序树）</li><li><strong>维护的性质</strong>: 对于一个三元组来说👇   <ul><li>左孩子小于根节点  </li><li>右孩子大于根节点</li><li>对于中序遍历而言 ： 可以实现从小到大排序</li></ul></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span><span class="token comment">//节点</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>lchild<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span><span class="token comment">//二叉 指针域 左孩子 右孩子</span><span class="token punctuation">}</span> Node<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">tree</span> <span class="token punctuation">{</span>    Node <span class="token operator">*</span>root<span class="token punctuation">;</span><span class="token comment">//指向根节点的指针变量</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//节点个数</span><span class="token punctuation">}</span> Tree<span class="token punctuation">;</span>Node <span class="token operator">*</span><span class="token function">getNewNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>data <span class="token operator">=</span> val<span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>lchild <span class="token operator">=</span> p<span class="token operator">-&gt;</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span>Tree <span class="token operator">*</span><span class="token function">getNewTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Tree <span class="token operator">*</span>tree <span class="token operator">=</span> <span class="token punctuation">(</span>Tree <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token operator">-&gt;</span>root <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    tree<span class="token operator">-&gt;</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tree<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clearNode</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">clearNode</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//沿着当前节点的左子树进行递归回收</span>    <span class="token function">clearNode</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//回收当前节点</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>Tree <span class="token operator">*</span>tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tree <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">clearNode</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span>Node <span class="token operator">*</span><span class="token function">insert_node</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">*</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//root为空表示插入成功 </span>        <span class="token keyword">return</span> <span class="token function">getNewNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若root节点为空 则将val封装成根节点</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>data <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token comment">//如果根节点的值等于val 则返回root</span>        <span class="token comment">//如果当前的val值小于当前根节点所指向的值</span>    <span class="token comment">//那么我们需要将val值递归插入到根节点的左子树中 </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> root<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span> root<span class="token operator">-&gt;</span>lchild <span class="token operator">=</span> <span class="token function">insert_node</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>lchild<span class="token punctuation">,</span> val<span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> root<span class="token operator">-&gt;</span>rchild <span class="token operator">=</span> <span class="token function">insert_node</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>rchild<span class="token punctuation">,</span> val<span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//二叉查找树 左孩子小于根节点 右孩子大于根节点</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>Tree <span class="token operator">*</span>tree<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//传出参数</span>    tree<span class="token operator">-&gt;</span>root <span class="token operator">=</span> <span class="token function">insert_node</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">,</span> val<span class="token punctuation">,</span> <span class="token operator">&amp;</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//若插入成功 则此时flag = 1 且将节点个数加1</span>    tree<span class="token operator">-&gt;</span>n <span class="token operator">+=</span> flag<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">pre_order_node</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> node<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pre_order_node</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pre_order_node</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//前序遍历</span><span class="token keyword">void</span> <span class="token function">pre_order</span><span class="token punctuation">(</span>Tree <span class="token operator">*</span>tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tree <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pre_order :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pre_order_node</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">in_order_node</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">in_order_node</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> node<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">in_order_node</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//中序遍历</span><span class="token keyword">void</span> <span class="token function">in_order</span><span class="token punctuation">(</span>Tree <span class="token operator">*</span>tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tree <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in_order :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">in_order_node</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">post_order_node</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">post_order_node</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">post_order_node</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> node<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//后序遍历</span><span class="token keyword">void</span> <span class="token function">post_order</span><span class="token punctuation">(</span>Tree <span class="token operator">*</span>tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tree <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"post_order :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">post_order_node</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//打印广义表</span><span class="token keyword">void</span> <span class="token function">output_node</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>lchild <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> root<span class="token operator">-&gt;</span>rchild <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">//打印左子树时先输出`(`</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">output_node</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//打印右子树后输出`)`</span>    <span class="token function">output_node</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span>Tree <span class="token operator">*</span>tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tree <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"tree(%d) : "</span><span class="token punctuation">,</span> tree<span class="token operator">-&gt;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">output_node</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Tree <span class="token operator">*</span>tree <span class="token operator">=</span><span class="token function">getNewTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max_op</span> <span class="token expression"><span class="token number">10</span></span></span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_op<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token function">insert</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">output</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">pre_order</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">in_order</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">post_order</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">max_op</span></span>    <span class="token function">clear</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>😎三种遍历方式中 任选两种（其中必须包含中序遍历）可以还原一颗二叉树 </li></ul><p>广义表转二叉树</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>lchild<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span><span class="token punctuation">}</span> Node<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Tree</span> <span class="token punctuation">{</span>    Node <span class="token operator">*</span>root<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span> Tree<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span>    Node <span class="token operator">*</span><span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token keyword">int</span> top<span class="token punctuation">,</span> size<span class="token punctuation">;</span><span class="token punctuation">}</span> Stack<span class="token punctuation">;</span>Node <span class="token operator">*</span><span class="token function">getNewNode</span><span class="token punctuation">(</span><span class="token keyword">char</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>data <span class="token operator">=</span> val<span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>lchild <span class="token operator">=</span> p<span class="token operator">-&gt;</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span>Tree <span class="token operator">*</span><span class="token function">getNewTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Tree <span class="token operator">*</span>tree <span class="token operator">=</span> <span class="token punctuation">(</span>Tree <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token operator">-&gt;</span>root <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    tree<span class="token operator">-&gt;</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tree<span class="token punctuation">;</span>    <span class="token punctuation">}</span>Stack <span class="token operator">*</span><span class="token function">init_stack</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Stack <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token punctuation">(</span>Stack <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>size <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span>Node <span class="token operator">*</span><span class="token function">top</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>s<span class="token operator">-&gt;</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">empty</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token operator">-&gt;</span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">push</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>s<span class="token punctuation">,</span> Node <span class="token operator">*</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>top <span class="token operator">==</span> s<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token operator">++</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>top<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>top <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear_stack</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear_node</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">clear_node</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">clear_node</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear_tree</span><span class="token punctuation">(</span>Tree <span class="token operator">*</span>tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tree <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">clear_node</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span>Node <span class="token operator">*</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>node_num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Stack <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token function">init_stack</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span>temp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'('</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">')'</span><span class="token operator">:</span> <span class="token punctuation">{</span>                p <span class="token operator">=</span> <span class="token function">top</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">pop</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">','</span><span class="token operator">:</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">' '</span><span class="token operator">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                temp <span class="token operator">=</span> <span class="token function">getNewNode</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">top</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-&gt;</span>lchild <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">top</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-&gt;</span>rchild <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token operator">++</span><span class="token punctuation">(</span><span class="token operator">*</span>node_num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">++</span>str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">clear_stack</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>p<span class="token punctuation">)</span> p <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">pre_order_node</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pre_order_node</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pre_order_node</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">pre_order</span><span class="token punctuation">(</span>Tree <span class="token operator">*</span>tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tree <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pre_order : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pre_order_node</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">in_order_node</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">in_order_node</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">in_order_node</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">in_order</span><span class="token punctuation">(</span>Tree <span class="token operator">*</span>tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tree <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in_order : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">in_order_node</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">post_order_node</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">post_order_node</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">post_order_node</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">post_order</span><span class="token punctuation">(</span>Tree <span class="token operator">*</span>tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tree <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"post_order : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">post_order_node</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> node_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%[^\n]s"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    Tree <span class="token operator">*</span>tree <span class="token operator">=</span> <span class="token function">getNewTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token operator">-&gt;</span>root <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token operator">&amp;</span>node_num<span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token operator">-&gt;</span>n <span class="token operator">=</span> node_num<span class="token punctuation">;</span>    <span class="token function">pre_order</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">in_order</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">post_order</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">clear_tree</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="排序与查找"><a href="#排序与查找" class="headerlink" title="排序与查找"></a>排序与查找</h2><h3 id="稳定排序"><a href="#稳定排序" class="headerlink" title="稳定排序"></a>稳定排序</h3><p>==稳定排序==</p><p><strong><em>对于相同的元素 经过排序操作后 他们的相对位置保持不变 这样的排序我们称为稳定排序</em></strong></p><ul><li><p>插入排序</p><ul><li>时间复杂度O(n^2)  至少要n-1轮操作</li></ul></li><li><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/23/5wKdYO3y1HSV7hx.png" style="zoom: 67%;"></p></li><li><p>冒泡排序</p><p>  <img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/23/rwxdzJe9CVO1X3T.png" style="zoom: 67%;"></p></li><li><p>归并排序</p><ul><li>时间复杂度O(nlog·N)  分治思想 不是基于比较跟交换的排序方式</li><li><p>==★==这是一个外部排序（很重要）</p></li><li><p><a href="https://www.wikiwand.com/zh-hans/%E5%A4%96%E6%8E%92%E5%BA%8F#/%E5%A4%96%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F">外部排序</a>:   我们可以将数据分为多段加载到内存中</p><ul><li><p>内部排序：需要将数据整个加载到内存中进行排序</p></li><li><p>比如我们有40G的数据要进行排序 怎么办？ 我们可以使用归并排序 把40G的数据分成20G 再不行就分成10G </p></li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/23/v4FDiWRKdS6Ualx.png" style="zoom: 50%;"></p></li></ul></li></ul><pre><code><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">swap</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="token punctuation">\</span>    <span class="token expression">a <span class="token operator">^=</span> b<span class="token punctuation">;</span> b <span class="token operator">^=</span> a<span class="token punctuation">;</span> a <span class="token operator">^=</span> b<span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">}</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">TEST</span><span class="token expression"><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> func<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">int</span> <span class="token operator">*</span>num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">memcpy</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">output</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"%s= "</span><span class="token expression"><span class="token punctuation">,</span> #func<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">func</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">output</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">free</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">}</span></span></span><span class="token comment">//插入排序</span><span class="token keyword">void</span> <span class="token function">insert_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> num<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//冒泡 我们在这里设置一个记录交换次数的值 若是一个从小到大的有序数组 times交换次数必定为0 且时间复杂度为O(n) </span><span class="token keyword">void</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> times <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 进行交换的次数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//times == 0 结束循环</span>        times <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> num<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">//减少缩进</span>            <span class="token function">swap</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            times<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//归并排序 分治思想 用递归 </span><span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//边界条件 只剩两个元素</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> num<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&lt;</span> num<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从l 到 mid 进行排序</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从 mid + 1 到 r 进行排序</span>    <span class="token comment">//合并</span>    <span class="token keyword">int</span> <span class="token operator">*</span>temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//p1 指向的是</span>    <span class="token keyword">int</span> p1 <span class="token operator">=</span> l<span class="token punctuation">,</span> p2 <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> mid <span class="token operator">||</span> p2 <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token operator">&gt;</span> r <span class="token operator">||</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> num<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> num<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//将temp拷贝回num里</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>num <span class="token operator">+</span> l<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">randint</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> num<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"]\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max_n</span> <span class="token expression"><span class="token number">20</span></span></span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span>max_n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">randint</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> max_n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TEST</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> max_n<span class="token punctuation">,</span> insert_sort<span class="token punctuation">,</span> num<span class="token punctuation">,</span> max_n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TEST</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> max_n<span class="token punctuation">,</span> bubble_sort<span class="token punctuation">,</span> num<span class="token punctuation">,</span> max_n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TEST</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> max_n<span class="token punctuation">,</span> merge_sort<span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> max_n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">max_n</span></span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h3 id="不稳定排序"><a href="#不稳定排序" class="headerlink" title="不稳定排序"></a>不稳定排序</h3><ul><li><p>选择排序</p><ul><li><p>时间复杂度：O(n^2) </p></li><li><p>不稳定排序 比如 5 3 2 5 1 经过排序后 第一个5的位置变到了最后一个 两个5的相对位置发生了改变</p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/24/XQqkKLCAZt37cnO.png" style="zoom: 67%;"></p></li></ul></li></ul><ul><li>快速排序<ul><li>时间复杂度：O(nlog·N)     选一个基数  让左半边小于这个基数 右半边大于这个基数<ul><li>①选择头部元素作为基数</li><li>②有头尾两个指针  尾指针找第一个小于基数的值然后放入头部中  头指针找第一个大于基数的值放入刚刚移走的值的位置</li><li>③最后指针重叠 放入基数</li></ul></li><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/24/VL7Kw68MOvGptnb.png" alt=""></li><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/24/OiI1czLE4nohYTd.png" alt=""></li></ul></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token comment">//^= 两个值不能异或自己</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">swap</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">__typeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> __temp <span class="token operator">=</span> a<span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression">a <span class="token operator">=</span> b<span class="token punctuation">;</span> b <span class="token operator">=</span> __temp<span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">}</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">TEST</span><span class="token expression"><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> func<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">int</span> <span class="token operator">*</span>num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">memcpy</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">output</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"%s = "</span><span class="token expression"><span class="token punctuation">,</span> #func<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">func</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">output</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">free</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">}</span></span></span><span class="token keyword">void</span> <span class="token function">select_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ind <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token operator">&gt;</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> ind <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>ind<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> l<span class="token punctuation">,</span> y <span class="token operator">=</span> r<span class="token punctuation">,</span> z <span class="token operator">=</span> num<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> y <span class="token operator">&amp;&amp;</span> num<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&gt;</span> z<span class="token punctuation">)</span> y<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> y<span class="token punctuation">)</span> num<span class="token punctuation">[</span>x<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> y <span class="token operator">&amp;&amp;</span> num<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;</span> z<span class="token punctuation">)</span> x<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> y<span class="token punctuation">)</span> num<span class="token punctuation">[</span>y<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    num<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> z<span class="token punctuation">;</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> l<span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">randint</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> num<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"]\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max_n</span> <span class="token expression"><span class="token number">20</span></span></span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span>max_n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">randint</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> max_n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TEST</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> max_n<span class="token punctuation">,</span> select_sort<span class="token punctuation">,</span> num<span class="token punctuation">,</span> max_n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TEST</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> max_n<span class="token punctuation">,</span> quick_sort<span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> max_n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>快速排序优化</p><p>  <img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/24/sa2YOr7Hmw1txeV.png" alt=""></p></li></ul><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ul><li><p><strong>二分查找</strong></p><ul><li><p>虚拟头尾指针 一堆0的情况<img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/24/EuSNpFWqjLMUI9b.png" style="zoom: 67%;"></p></li><li><p>特殊情况①    1111111100000000</p><ul><li><p>1 表示满足某种性质    0  表示不满足某种性质</p></li><li><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/24/LeC3JicxfpGzoOH.png" alt=""></p></li><li>如果我们的数据全是0   0000000000000  最后mid指向第一个0 我们说不清到底是找到了答案还是没找到 所以我们引入了虚拟头指针 去判断它是否等于-1</li><li><img src="/img/loading.gif" data-original="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\1606189109262.png" alt="1606189109262"></li></ul></li><li><p>特殊情况②   00000000011111111111</p><p>  <img src="/img/loading.gif" data-original="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\1606189376625.png" alt="1606189376625"></p></li></ul></li></ul><ul><li><strong>三分查找</strong><br>  <img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/24/C2aWlMRGDsZpJ9O.png" style="zoom:50%;"></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">P</span><span class="token expression"><span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"%s = %d\n"</span><span class="token expression"><span class="token punctuation">,</span> #func<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">}</span></span></span><span class="token keyword">int</span> <span class="token function">binary_search1</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tail <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">&lt;=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> tail<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> head <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> tail <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//111111000000</span><span class="token comment">//head 虚拟头指针</span><span class="token keyword">int</span> <span class="token function">binary_search2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> tail <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> tail <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> head <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> tail <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//00000011111111</span><span class="token comment">//tail 虚拟尾指针</span><span class="token keyword">int</span> <span class="token function">binary_search3</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tail <span class="token operator">=</span> n<span class="token punctuation">,</span> mid<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> tail<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> tail <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> head <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head <span class="token operator">==</span> n <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arr3<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">P</span><span class="token punctuation">(</span><span class="token function">binary_search1</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">P</span><span class="token punctuation">(</span><span class="token function">binary_search2</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">P</span><span class="token punctuation">(</span><span class="token function">binary_search3</span><span class="token punctuation">(</span>arr3<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><ul><li>时间复杂度：趋近与O(1)</li><li>是一种用来查找的数据结构（下标与值的访问）</li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/25/ndoXIQCP7jWybAG.png" style="zoom: 33%;"></p><ul><li><p>可以将任意一种类型映射成数组下标的形式进行访问 </p><ul><li>冲突处理方法（无法避免，但是可以减少发生的概率） </li><li><strong><em>放入元素</em></strong> ：当前我要插入16这个值  用16取模与当前的容量 放入到下标为【7】的位置中</li><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/25/hS4Otfx91HkzP2Y.png" style="zoom:33%;"></li><li><strong><em>发生冲突</em></strong>： 我要插入7这个值  7%9 = 7  此时我要把7放入到下标为【7】的位置中 但是【7】的位置中已存在值  这时冲突便发生了</li><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/25/Fueh2iabNVHj9TK.png" style="zoom:33%;"></li></ul></li><li><p>这是就引出了哈希表很重要的结构： <strong><em>冲突处理方法</em></strong></p><ul><li>①<strong><em>开放定址</em></strong>： 当前7的位置有值 那我就去寻找后面的位置 是否有值 如果没有值就将7放入8的位置<ul><li>容易产生数据堆聚问题 ：数据会集中存储在空间中的某一块区域 </li></ul></li><li>②<strong><em>再哈希法</em></strong>：在我的哈希表中 我设置了不止一种哈希函数 一种不行 我再用下一种</li><li>③<strong><em>拉链法</em></strong>：在当前位置我不存储一个元素，我们去存储一个链表，将这个值封装一个节点存在链表的后面</li><li>④<strong><em>建立公共溢出区</em></strong>：这个区域专门用来存储冲突元素的——用一种额外的数据结构维护（红黑树）</li></ul></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span> Node<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">HashTable</span> <span class="token punctuation">{</span>    Node <span class="token operator">*</span><span class="token operator">*</span>data<span class="token punctuation">;</span><span class="token comment">//哈希表(也是顺序表)里面存储的是一个地址 地址所指向的类型是Node*类型 拉链法</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token punctuation">}</span> HashTable<span class="token punctuation">;</span>Node <span class="token operator">*</span><span class="token function">init_node</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> Node <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>str <span class="token operator">=</span> <span class="token function">strdup</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span> <span class="token comment">//头插法</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span>HashTable <span class="token operator">*</span><span class="token function">init_hashtable</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    HashTable <span class="token operator">*</span>h <span class="token operator">=</span> <span class="token punctuation">(</span>HashTable <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HashTable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//利用率和哈希函数冲突概率有关 我们把n扩大一倍 使其只有50%利用率</span>    h<span class="token operator">-&gt;</span>size <span class="token operator">=</span> n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//哈希表的空间利用率不可能达到100% 一般的空间利用率为50%——90% 工业上达到70%才可以使用</span>    h<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>h<span class="token operator">-&gt;</span>size<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数据的每一位都为0值 都是空地址</span>    <span class="token keyword">return</span> h<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//哈希函数</span><span class="token keyword">int</span> <span class="token function">BKDRHash</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//seed是一个素数就行</span>    <span class="token keyword">int</span> seed <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">,</span> hash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> hash <span class="token operator">=</span> hash <span class="token operator">*</span> seed <span class="token operator">+</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//hash有可能超出整型范围 变成一个负数 </span>    <span class="token comment">//这里的0x7fffffff 表示的是符号位为0 其余位为1的数 </span>    <span class="token keyword">return</span> hash <span class="token operator">&amp;</span> <span class="token number">0x7fffffff</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>h<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">BKDRHash</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ind <span class="token operator">=</span> hash <span class="token operator">%</span> h<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>    <span class="token comment">//将字符串插入到下标为ind的这个位置所对应的链表中</span>    h<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">init_node</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> h<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>ind<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>h<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">BKDRHash</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ind <span class="token operator">=</span> hash <span class="token operator">%</span> h<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>    <span class="token comment">//p指向ind这位链表里存的头节点</span>    Node <span class="token operator">*</span>p <span class="token operator">=</span> h<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>ind<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//沿着链表的头节点 遍历链表的每一位 strcmp返回值不为0时代表没找到</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>str<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token comment">//如果p 不等于NULL 说明是因为strcmp返回值为0退出的循环  也就是说找到了值</span>    <span class="token keyword">return</span> p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear_node</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    Node <span class="token operator">*</span>p <span class="token operator">=</span> node<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        q <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> q<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear_hashtable</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> h<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">clear_node</span><span class="token punctuation">(</span>h<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>h<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> op<span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max_n</span> <span class="token expression"><span class="token number">100</span></span></span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span>max_n <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    HashTable <span class="token operator">*</span>h <span class="token operator">=</span> <span class="token function">init_hashtable</span><span class="token punctuation">(</span>max_n <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>op<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"insert %s to HashTable\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">insert</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"search %s from HashTable result = %d\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token function">search</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">max_n</span></span>    <span class="token function">clear_hashtable</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/27/LyTdRX2YDeafEzG.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/04/9ZMPRS3cLxaWEzg.png" alt=""></p><h2 id="堆与优先队列"><a href="#堆与优先队列" class="headerlink" title="堆与优先队列"></a>堆与优先队列</h2><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/ZwJXE47fyLK1Io6.png" alt="图片" style="zoom: 33%;"></p><ul><li>完全二叉树默认从1开始编号<ul><li>这样可以保证左孩子、右孩子编号简洁</li><li>[否则] 左孩子编号需为2 <em> i + 1，右孩子编号需为2 </em> i + 2</li></ul></li></ul><p>==数据结构： 你定义了一种性质，并且能维护这一种性质，那么这种结构就是一个新的数据结构==</p><ul><li>优先队列是堆的一个别名</li><li>堆在思维逻辑上就是一颗完全二叉树</li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/01/i5F9A1S7zVvZWEN.png" alt=""></p><ul><li><strong>尾部插入元素</strong>(O(logn))   <ul><li>一开始以7为根节点 13为左孩子  右孩子为空 这个三元组进行调整 </li></ul></li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/01/OeKuCUMVABwcJ7R.png" style="zoom:25%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/01/c2NArZGuEwPIJSK.png" style="zoom:25%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/01/h6m3Xrqi1oPJLlW.png" style="zoom:25%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/01/xQ7PGAMoih9fKyb.png" style="zoom:25%;"></p><ul><li><p>头部弹出调整（删除操作）</p><ul><li>从头部删除元素 并维护堆的性质进行调整</li><li><p>我们让最后一个孩子作为头部元素 自上而下进行调整</p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/01/aNEQ9gS1Rwth8fp.png" style="zoom:25%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/01/LTNd3rGywOjWKAZ.png" style="zoom:25%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/01/7MV6siyqCFQLWl2.png" style="zoom:25%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/01/cd8uveO2L3FJbl6.png" style="zoom:25%;"></p></li></ul></li><li><p><strong>堆排序</strong></p><ul><li>我们将堆顶元素和堆尾元素置换  每次调整n-1个元素</li><li>时间复杂度O(nlogn)：因为每次是一层一层遍历 </li><li><p>大顶堆：从小到大排序     小顶堆：从大到小排序</p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/01/dqBPVt6S5MNvuxh.png" alt=""></p></li></ul></li></ul><ul><li><strong>普通队列与堆的比较</strong></li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/01/Mdpj8Afi2TRsJa3.png" style="zoom: 50%;"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">swap</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">__typeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> __temp <span class="token operator">=</span> a<span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression">a <span class="token operator">=</span> b<span class="token punctuation">;</span> b <span class="token operator">=</span> __temp<span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">}</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">priority_queue</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token punctuation">,</span> size<span class="token punctuation">;</span><span class="token comment">//个数， 容量</span><span class="token punctuation">}</span> priority_queue<span class="token punctuation">;</span>priority_queue <span class="token operator">*</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    priority_queue <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token punctuation">(</span>priority_queue <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>priority_queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//由于优先队列是以数组的形式进行存储  且在逻辑上是一棵二叉树 所以在这里多开一位 </span>    <span class="token comment">//目的：可以方便计算</span>    q<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>size <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">return</span> q<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">empty</span><span class="token punctuation">(</span>priority_queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> q<span class="token operator">-&gt;</span>cnt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//堆顶弹出元素</span><span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span>priority_queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">push</span><span class="token punctuation">(</span>priority_queue <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>cnt <span class="token operator">==</span> q<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//判断堆是否满</span>    q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token operator">++</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>cnt<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token comment">//++(q-&gt;cnt)是因为我们从1开始存储所以个数要先加1 </span>    <span class="token keyword">int</span> ind <span class="token operator">=</span> q<span class="token operator">-&gt;</span>cnt<span class="token punctuation">;</span>     <span class="token comment">//ind记录的是最后插入元素的下标</span>        <span class="token comment">//由于我们插入一个元素 要进行向上调整 也就是当前节点需要跟父节点进行比较</span>    <span class="token comment">// ind &gt;&gt; 1 表示我们的父节点  维护大顶堆</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ind <span class="token operator">&gt;&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token operator">&gt;</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>ind <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>ind<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>ind <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ind <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//交换后当前节点等于父节点</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span>priority_queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//我们将最后一个节点覆盖掉第一个节点  并让个数减1</span>    q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>q<span class="token operator">-&gt;</span>cnt<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ind <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//调整下标</span>    <span class="token comment">//左孩子的下标没有超过q-&gt;cnt的下标的话  说明ind这个节点有左孩子</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ind <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> q<span class="token operator">-&gt;</span>cnt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//😱(ind &lt;&lt; 1 | 1) 骚操作  表示的是ind * 2 + 1 </span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> ind<span class="token punctuation">,</span> l <span class="token operator">=</span> ind <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> ind <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&gt;</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">)</span> temp <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;=</span> q<span class="token operator">-&gt;</span>cnt <span class="token operator">&amp;&amp;</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&gt;</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">)</span> temp <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> ind<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>ind<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ind <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>priority_queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max_op</span> <span class="token expression"><span class="token number">20</span></span></span>    priority_queue <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span>max_op<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_op<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token function">push</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"insert %d to the priority_queue!\n"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_op<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token function">top</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pop</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">max_op</span></span>    <span class="token function">clear</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><ul><li>根据其性质，全部弹出，将得到一个排好序的序列</li><li>⭐思维转变：堆顶元素的弹出操作 ==&gt; 堆顶元素与堆尾元素交换<ul><li>【如此操作】</li><li><strong>大顶堆</strong>的元素全部弹出👉原数组存储了一个<strong>从小到大</strong>的排序序列</li><li>[至此，从大顶堆，得到一个特殊的小顶堆]</li></ul></li><li>时间复杂度：O(NlogN)<ul><li>消耗的时间在于调整操作，每次调整的时间复杂度是O(logN)，共N个元素，需调整N - 1次</li><li>弹出操作的时间复杂度是O(1)的</li><li>时间效率一定不会退化</li></ul></li></ul><h3 id="建堆"><a href="#建堆" class="headerlink" title="建堆"></a>建堆</h3><p>【若要使用堆排序，首先需要维护一个堆，也就是用普通的序列<strong>建堆</strong>，下面有2种思路】</p><h4 id="常规思路"><a href="#常规思路" class="headerlink" title="常规思路"></a>常规思路</h4><p>又叫插入建堆法</p><ul><li>按照前述尾部插入的调整方法：自下向上<ul><li>从第0层 [默认根结点在第0层] 开始，计算每一层的最多调整次数：</li><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/li25Ec7btFYP68H.png" alt="图片" style="zoom:33%;"></li><li>第 i 层元素的调整次数为 i，第 i 层的结点数为2 ^ i→ 第 i 层的总调整次数为 i * (2 ^ i)</li></ul></li><li>最坏的建堆时间复杂度O(NlogN)，计算过程如下：<ul><li>总的调整次数 S = (n - 1) * 2 ^ (n + 1) + 1，过程如下：<ul><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/1Ierol5t3OMdZvT.png" alt="图片" style="zoom: 50%;"></li><li>利用裂项相消法</li></ul></li><li>上面的n对应层数 - 1 [从第0层开始的]，若令总的结点数为N，则n ≈ log[2]N</li><li>❗【层数n→结点数N的换算】将n ≈ log[2]N代入S，得到S ≈ Nlog[2]N</li><li>即最坏的时间复杂度为：O(NlogN)</li></ul></li></ul><h4 id="线性思路⭐"><a href="#线性思路⭐" class="headerlink" title="线性思路⭐"></a>线性思路⭐</h4><p>也就是【线性建堆法】</p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/xacplE79RSy5nZb.png" alt="图片" style="zoom: 33%;"></p><ul><li><p>如图所示</p><ul><li>常规思路：越到下面层，需要的调整次数越多，也就是权重越大</li><li>❗ 那是否可以思维反转，把大权重放到前面，让下面结点数多的层的权重减小</li><li>线性思路：可以！从倒数第二层开始排，【自上向下】调整</li></ul></li><li><p>🆒最坏的建堆时间复杂度O(N)</p><ul><li>同样利用裂项相消法得到总的调整次数 S = 2 ^ (n + 1) - 2 - n</li><li>把层数n换算到结点数N，得到S ≈ 2N - 2 - log[2]N</li><li>即最坏的时间复杂度为：O(N)</li></ul></li><li><p>⭐推荐视频</p><p>  Linear Time BuildHeap</p><p>  ——Youtube</p><ul><li>比较了常规建堆和线性建堆两种思路，并有直观的动画演示，加深印象</li></ul></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">swap</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">__typeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> __temp <span class="token operator">=</span> a<span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression">a <span class="token operator">=</span> b<span class="token punctuation">;</span> b <span class="token operator">=</span> __temp<span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">}</span></span></span><span class="token keyword">void</span> <span class="token function">downUpdate</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> ind<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ind <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> ind<span class="token punctuation">,</span> l <span class="token operator">=</span> ind <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> ind <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">)</span> temp <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">)</span> temp <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ind <span class="token operator">==</span> temp<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>ind<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ind <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">heap_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//从最后一个结点的父结点开始调整</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">downUpdate</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">downUpdate</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//从上到下调整</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"]\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max_n</span> <span class="token expression"><span class="token number">20</span></span></span>    <span class="token keyword">int</span> <span class="token operator">*</span>arr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> max_n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">output</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> max_n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">heap_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> max_n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">output</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> max_n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">max_n</span></span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="森林与并查集"><a href="#森林与并查集" class="headerlink" title="森林与并查集"></a>森林与并查集</h2><p><strong>并查集能解决的问题：</strong>  具有连通性关系的问题</p><ul><li>确认连通关系：广义上来说 是将两个集合进行合并成具有连通关系的集合</li><li>可以判断我们两个点在一个集合中是否具有连通关系</li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/01/P2gNkn1Kl6hrf5D.png" style="zoom: 50%;"></p><p><strong>==quick-find算法==</strong></p><ul><li>核心思想：染色<ul><li>一个颜色，对应一个类别</li><li>初始化：个体独立，都写成自己的索引，属于一个独立的集合里</li><li>⭐把和自己<strong>连通的所有</strong>点的颜色改成要染的颜色</li></ul></li><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/01/ME1OelXAKCh8oTy.png" style="zoom:50%;"></li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/WqwkN7KaLhMrSsY.png" style="zoom: 33%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/TPQ82X5sUf6uaip.png" style="zoom: 33%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/INyQYtorC2s9HcS.png" style="zoom: 33%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/ntTUIECy5oNiBK3.png" style="zoom: 33%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/OV5Kg3sGFUJ1yzn.png" style="zoom:33%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/GSbncK8QoPh7Agd.png" style="zoom:33%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/ajEWyiRCK9whLuT.png" style="zoom:33%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/THxgoszNDCR4OPb.png" style="zoom:33%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/UE1fvsd9CFnGwZa.png" style="zoom:50%;"></p><hr><ul><li><p><strong>==quick_union算法==</strong></p><ul><li>找代表元素👉（找大哥） 对于两个点 我们如果想判断连通性 那么我们就去查看他们的大哥是不是同一个</li><li>对于集合和集合之间建立的连通关系可以认为是集合和集合之间的合并操作 <ul><li>👉 （逻辑上）两颗子树的合并操作</li><li>👉    最终会在一个根结点下面 也就只有一个代表元素</li></ul></li></ul></li><li><p>首先链表是一棵极端的树</p></li><li>当我们用这种算法时两棵子树可能退化成链表 且有n个节点 则此时的树高也为n <ul><li>合并操作将退化为O(n) →O(树高)</li><li>联通操作将退化为O(n) →O(树高)</li></ul></li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/pqUVch8YfDGRPvB.png" alt=""></p><p><strong>==Weighted quick_union算法==</strong></p><ul><li><p>按秩优化</p></li><li><p>如何避免退化？→保证枝繁叶茂</p><ul><li>合并依据1：树高，矮树挂在高树下[两两结合]<ul><li>高度为 h 的树，至少需要的结点个数N为2 ^ (h - 1)</li><li>即树高h = log[2]N + 1 ≈ log[2]N</li><li>[PS] 只有两棵一样树高的树合并，才会使高度增加</li></ul></li><li>合并依据2：结点数量，结点少的树挂在结点多的树下</li><li>两种优化方式都能得到O(logN)，但是合并依据2【结点数量】更优秀一些</li></ul></li><li>⭐为什么合并依据2更优秀<ul><li>【示例】什么是平均查找次数<ul><li>如下图所示，计算了A、B树的平均查找次数</li><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/9Q7TrSfvowusW1i.png" alt="图片" style="zoom: 25%;"></li><li>结点深度即为结点的查找次数，平均查找次数 = 总查找次数 / 总结点数</li><li>此示例，B树的查找操作更快</li></ul></li><li>【推导】合并依据2直接决定平均查找次数<ul><li>对于有SA、SB个结点的A、B树，它们的总查找次数LA、LB分别为：<ul><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/kGLCJWbNK3AUIlo.png" alt="图片" style="zoom:33%;"></li><li>其中，li 代表第 i 个结点的深度</li></ul></li><li>此时进行合并操作，分别计算①A→B和②B→A的平均查找次数<ul><li>①当A树作为子树合并到B树时，为<ul><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/B3hH8jwXaIxoed5.png" alt="图片" style="zoom:33%;"></li><li>A树中的所有结点需要多查找一次</li></ul></li><li>②当B树作为子树合并到A树时，为<ul><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/CSLM1K4NwOuWsnm.png" alt="图片" style="zoom:33%;"></li><li>B树中的所有结点需要多查找一次</li></ul></li></ul></li><li>❗【比较两种方式的平均查找次数】<ul><li>和树高[LA、LB]没有直接关系，而分子的结点数量[SA、SB]【直接】决定查找次数，次数越小越好</li><li>👉谁的结点数少，就作为子树被合并</li><li>❓思考：上面的推导是否证明高度无法作为合并依据呢？<ul><li>❌否，高度间接影响着结点数量，一般情况高度越低，结点数量越少</li><li><strong>但是</strong>，对于特殊情况，A树比B树高，而A树结点数量却比B树少时，还是按照【结点数量】作为合并依据，将A树作为子树合并到B树里</li></ul></li></ul></li></ul></li><li>所以以结点数作为合并依据更优秀！👇合并思路如下</li></ul></li><li>在合并两棵子树时<ul><li>如果结点数一样，就按照普通Quick-Union的思路换</li><li>如果不一样，结点数少的子树的根结点接在👉结点数多的子树的根结点下面</li></ul></li><li>[PS]换句话说<ul><li>在换大哥时</li><li>如果小弟数量一样，就按照普通Quick-Union的思路换</li><li>如果不一样，小弟少的大哥得跟👉小弟多的大哥混</li></ul></li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/03/Q9U6dhz8Bl1eLjf.png" style="zoom: 25%;"></p><ul><li><strong>==Quick-Find vs. Quick-Union==</strong></li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/xyuUOQsW9oiJenL.png" alt="图片" style="zoom: 50%;"></p><ul><li><p>【关键】理解Quick-Union</p><ul><li>0-&gt;1-&gt;2-&gt;4-&gt;5、3-&gt;4-&gt;5；8-&gt;9-&gt;7-&gt;6</li><li>查找、合并边界：自己的代表元素就是本身时，停止</li></ul></li><li><p><strong>==Quick-Union vs. weighted Quick-Union==</strong></p></li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/omhF9JsytLTz13i.png" alt="图片" style="zoom:33%;"></p><ul><li>【关键】理解weighted的含义<ul><li>当两个集合的元素个数不一样时</li><li>元素少的集合的代表元素的值👉元素多的集合的代表元素的值</li><li>小弟少的大哥得跟着小弟多的大哥混</li></ul></li><li>结果可视化<ul><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/3axleQf7TPc1JEb.png" alt="图片" style="zoom: 33%;"></li><li>很明显，weighted方法得到的树更矮，合并、查找效率更高</li></ul></li></ul><ul><li><strong>从练习题入手并查集</strong></li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/04/MEo37UCIGHfJZvW.png" alt=""></p><p> 样例输入</p><pre class="line-numbers language-none"><code class="language-none">6 51 1 22 1 31 2 41 4 32 1 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 样例输出</p><pre class="line-numbers language-none"><code class="language-none">NoYes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>quick_find</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">UnionSet</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>color<span class="token punctuation">;</span> <span class="token comment">//需要一片连续的空间存储每个元素的颜色 </span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//color指向这片连续空间的首地址</span><span class="token punctuation">}</span> UnionSet<span class="token punctuation">;</span>UnionSet <span class="token operator">*</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    UnionSet <span class="token operator">*</span>u <span class="token operator">=</span> <span class="token punctuation">(</span>UnionSet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>UnionSet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    u<span class="token operator">-&gt;</span>color <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    u<span class="token operator">-&gt;</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        u<span class="token operator">-&gt;</span>color<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// 将每个元素初始化为自己</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> u<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span>UnionSet <span class="token operator">*</span>u<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> u<span class="token operator">-&gt;</span>color<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//合并</span><span class="token keyword">int</span> <span class="token function">merge</span><span class="token punctuation">(</span>UnionSet <span class="token operator">*</span>u<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//判断a和b是否连通 </span>    <span class="token keyword">int</span> color_a <span class="token operator">=</span> u<span class="token operator">-&gt;</span>color<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//保存前一个变量的颜色</span>    <span class="token comment">//把所有a的颜色 改为 b的颜色</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> u<span class="token operator">-&gt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>color<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> color_a<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">//若当前i的颜色等与a的颜色 则执行下次循环 否则 </span>        u<span class="token operator">-&gt;</span>color<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token operator">-&gt;</span>color<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//将i的颜色改为b的颜色</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>UnionSet <span class="token operator">*</span>u<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    UnionSet <span class="token operator">*</span>u <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token function">merge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"Yes"</span> <span class="token operator">:</span> <span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">clear</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Weighted quick_union + 路径压缩</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">swap</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">__typeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> __temp <span class="token operator">=</span> a<span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression">a <span class="token operator">=</span> b<span class="token punctuation">;</span> b <span class="token operator">=</span> __temp<span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">}</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">UnionSet</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>father<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>size<span class="token punctuation">;</span> <span class="token comment">//记录相关的节点个数  weighted quick-union 优化</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span> UnionSet<span class="token punctuation">;</span>UnionSet <span class="token operator">*</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    UnionSet <span class="token operator">*</span>u <span class="token operator">=</span> <span class="token punctuation">(</span>UnionSet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>UnionSet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    u<span class="token operator">-&gt;</span>father <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    u<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    u<span class="token operator">-&gt;</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        u<span class="token operator">-&gt;</span>father<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        u<span class="token operator">-&gt;</span>size<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//最开始相关的节点数为自己 = 1</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> u<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span>UnionSet <span class="token operator">*</span>u<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//if (u-&gt;father[x] == x) return x;//返回的是当前元素的代表元素</span>    <span class="token comment">//return find(u, u-&gt;father[x]);   //否则我们就递归去找它父亲的父亲</span>    <span class="token comment">//优化 ：路径压缩  找到最直接的父亲  在路径压缩面前 可以去掉按节点合并的优化操作 其效率差不多</span>    <span class="token keyword">return</span> u<span class="token operator">-&gt;</span>father<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>father<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> x <span class="token operator">?</span> x <span class="token operator">:</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> u<span class="token operator">-&gt;</span>father<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">merge</span><span class="token punctuation">(</span>UnionSet <span class="token operator">*</span>u<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> fa <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">,</span> fb <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fa <span class="token operator">==</span> fb<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>size<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">&lt;</span> u<span class="token operator">-&gt;</span>size<span class="token punctuation">[</span>fb<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>fa<span class="token punctuation">,</span> fb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当fa的节点个数小于fb的节点个数 交换它们 保证fa的节点数是最大的</span>    u<span class="token operator">-&gt;</span>father<span class="token punctuation">[</span>fb<span class="token punctuation">]</span> <span class="token operator">=</span> fa<span class="token punctuation">;</span>   <span class="token comment">//把fa当做合并后的根节点</span>    u<span class="token operator">-&gt;</span>size<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">+=</span> u<span class="token operator">-&gt;</span>size<span class="token punctuation">[</span>fb<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//当fb作为子树时 fa整体的节点个数要加上fb的</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>UnionSet <span class="token operator">*</span>u<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>father<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    UnionSet <span class="token operator">*</span>u <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token function">merge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"Yes"</span> <span class="token operator">:</span> <span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">clear</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Data structure, C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之Leetcode刷题集</title>
      <link href="posts/1124.html"/>
      <url>posts/1124.html</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h1><ul><li><a href="https://srymaker0.com/posts/d64e">1.链表</a></li><li><a href="https://srymaker0.com/posts/9199">2.栈</a></li><li><a href="https://srymaker0.com/posts/682f">3.队列</a></li><li><a href="https://srymaker0.com/posts/2a0c">4.二叉树</a></li><li><a href="https://srymaker0.com/posts/3c7d">5.堆与优先队列</a></li><li><a href="https://srymaker0.com/posts/20cf">6.并查集</a></li><li><a href="https://srymaker0.com/posts/9271">7.快速排序+优化</a></li><li><a href="https://srymaker0.com/posts/27bc">8.归并排序</a></li><li><a href="https://srymaker0.com/posts/5930">9.有趣的排序</a></li><li><a href="https://srymaker0.com/posts/96d5">10.二分查找</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPP个人笔记</title>
      <link href="posts/db87.html"/>
      <url>posts/db87.html</url>
      
        <content type="html"><![CDATA[<h2 id="冲-兄弟们"><a href="#冲-兄弟们" class="headerlink" title="冲, 兄弟们"></a>冲, 兄弟们</h2><ul><li><a href="https://srymaker0.com/posts/85a7">1.从c到c++</a></li><li><a href="https://srymaker0.com/posts/3bd">2.构造与析构</a></li><li><a href="https://srymaker0.com/posts/8a1e">3.类与对象</a></li><li><a href="https://srymaker0.com/posts/6f17">4.继承</a></li><li><a href="https://srymaker0.com/posts/21f6">5.多态</a></li><li><a href="https://srymaker0.com/posts/b26a">6.auto、constexpr、nullptr、左值与右值、移动构造</a></li><li><a href="https://srymaker0.com/posts/e383">7.模板</a></li><li><a href="https://srymaker0.com/posts/130c">8.异常</a></li><li><a href="https://srymaker0.com/posts/4864">9.C++线程</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C++, 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
