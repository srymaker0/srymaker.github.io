<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一些面试常问的？</title>
      <link href="posts/79b0.html"/>
      <url>posts/79b0.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构基础——C语言实现</title>
      <link href="posts/73f4.html"/>
      <url>posts/73f4.html</url>
      
        <content type="html"><![CDATA[<p>程序 = 算法 + 数据结构</p><p>程序设计 = 算法 + 数据结构 + 编程范式</p><p>算法解决的是计算机的计算资源  而数据结构解决的是计算机的存储资源  解决这两个问题才是一个好的程序 这也就是为什么要学习数据结构的原因</p><p>⚡数据结构 = 结构定义 + 结构操作 (对于什么是数据 后面会有更深的理解) </p><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p>一种功能更为高级的一种数组 它需要开辟一段连续的空间并且空间的每个位置可以存储任意类型</p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/21/BvEkmQTbLlAu1PU.png" style="zoom:67%;"></p><p>size表示顺序表的大小        length表示当前元素的个数      data_type表示元素的类型</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">COLOR</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> </span><span class="token string">"\033["</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">b</span> </span></span><span class="token string">"m"</span> <span class="token expression">a </span><span class="token string">"\033[0m"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GREEN</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token function">COLOR</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Vector</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>data<span class="token punctuation">;</span><span class="token comment">//指向的是一段自己开辟的类型的空间的首地址</span>    <span class="token keyword">int</span> size<span class="token punctuation">,</span> length<span class="token punctuation">;</span><span class="token punctuation">}</span> Vec<span class="token punctuation">;</span>Vec <span class="token operator">*</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Vec <span class="token operator">*</span>v <span class="token operator">=</span> <span class="token punctuation">(</span>Vec <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Vec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    v<span class="token operator">-&gt;</span>size <span class="token operator">=</span> n<span class="token punctuation">;</span>    v<span class="token operator">-&gt;</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> v<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">expand</span><span class="token punctuation">(</span>Vec <span class="token operator">*</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> extr_size <span class="token operator">=</span> v<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>    <span class="token comment">//return v-&gt;data = (int *)realloc(v-&gt;data, sizeof(int) * (v-&gt;size + extr_size));</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>extr_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//realloc会自动将原来的空间回收掉</span>        p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>v<span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v<span class="token operator">-&gt;</span>size <span class="token operator">+</span> extr_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果p不为空地址 则我们开辟成功 直接break退出循坏 否则一直开辟原来的1/2倍</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        extr_size <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//如果extr_size == 0 则说明真的开不下了 直接返回0值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>extr_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    v<span class="token operator">-&gt;</span>data <span class="token operator">=</span> p<span class="token punctuation">;</span>    v<span class="token operator">-&gt;</span>size <span class="token operator">+=</span> extr_size<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>Vec <span class="token operator">*</span>v<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span> ind<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ind <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> ind <span class="token operator">&gt;</span> v<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-&gt;</span>length <span class="token operator">==</span> v<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">expand</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">GREEN</span><span class="token punctuation">(</span><span class="token string">"success to expand! the Vector size is %d\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> v<span class="token operator">-&gt;</span>length<span class="token punctuation">;</span> i <span class="token operator">&gt;</span> ind<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        v<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    v<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>    v<span class="token operator">-&gt;</span>length <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">erase</span><span class="token punctuation">(</span>Vec <span class="token operator">*</span>v<span class="token punctuation">,</span> <span class="token keyword">int</span> ind<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ind <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> ind <span class="token operator">&gt;=</span> v<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> ind <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-&gt;</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        v<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    v<span class="token operator">-&gt;</span>length <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//动态开辟空间需要自己手动释放 避免内存泄漏</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>Vec <span class="token operator">*</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span>Vec <span class="token operator">*</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Vector : ["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-&gt;</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        i <span class="token operator">&amp;&amp;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> v<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"]\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max_op</span> <span class="token expression"><span class="token number">20</span></span></span>    Vec <span class="token operator">*</span>v <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_op<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ind <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>v<span class="token operator">-&gt;</span>length <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> op <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>op<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"insert %d at %d to Vector = %d\n"</span><span class="token punctuation">,</span> val<span class="token punctuation">,</span> ind<span class="token punctuation">,</span> <span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> val<span class="token punctuation">,</span> ind<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"erase a iterm at %d from Vector = %d\n"</span><span class="token punctuation">,</span> ind<span class="token punctuation">,</span> <span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> ind<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">output</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">clear</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>malloc动态内存申请 malloc只是划分一个空间告诉你这个空间是可以用的 </p><ul><li>成功时，返回指向新分配内存开头的指针。</li><li>为了避免内存泄漏，必须使用free（） 或 realloc（）释放返回的指针。 </li><li>失败时，返回一个空指针。</li></ul></li><li><p>而calloc在开辟空间的时候会将这段空间清0或者是空地址</p></li><li><p>realloc(地址,大小)指的是重新给你分配一段空间</p><ul><li><p>第一个参数传进去一个地址 是我们要对哪片空间进行重新划分 而这片空间的首地址就是我们的第一个参数  </p></li><li><p>第二个参数是 将现在的这片空间扩大多大的字节数  返回值是新开辟出来的空间的首地址</p></li><li>可以在原来的基础上开辟额外的空间 如果还是存不下则会返回NULL值 此时必须格外注意， 不能让原数据域指向它</li><li>如果开辟了额外空间还是存不下 则会重新分配一段和原空间一样大的空间并且扩大两倍 不过我们在这里让它扩大原来的1/2倍  </li></ul></li><li></li></ul><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/SxkqLQKFN7lEhea.png" style="zoom: 67%;"></p><ul><li><p>链表可以分为两部分 </p><ul><li><p><strong>程序内部</strong> 这里指的就是头指针 我们在程序内部能看到的只有头指针所连接的链表</p><ul><li>我们可以通过头指针去操作链表</li></ul></li><li><p><strong>内存内部</strong> 这部分是链表的本质 在逻辑上如上图一样</p><ul><li>最后一个节点的指针域为NULL</li><li>单向链表的指针域又名“后继”；双向链表有“前驱”和“后继”</li></ul></li></ul></li><li><p>对于普通的链表中的指针域 我们称之为后继（当前指针域指向后面节点的地址）</p></li><li><p>插入</p><ul><li>①走到待插入位置的<strong>前一个</strong>位置的节点p</li><li>②先将新的节点x的指针域指向待插入位置的节点p.next</li><li>③将p的指针域指向新的节点x</li><li>顺序不能变！否则可能引发内存泄漏（你想用已经用不了，但系统却以为你在用）</li></ul></li></ul><p>  删除</p><ul><li><p>走到待删除节点位置的<strong>前一个</strong>位置</p><p>翻转</p></li><li><p>方法一</p><ul><li>用一个新链表存，使用头插法</li><li>不断在index = 0 的位置插入节点</li><li>不足：浪费空间，麻烦</li></ul></li><li>方法二<ul><li>原地翻转，用两个变量倒，也是头插法</li><li>前提：每次操作不要造成内存泄漏</li><li>NULL地址还是在最后面，不会翻转</li></ul></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">COLOR</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> </span><span class="token string">"\033["</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">b</span> </span></span><span class="token string">"m"</span> <span class="token expression">a </span><span class="token string">"\033[0m"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GREEN</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token function">COLOR</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span></span></span><span class="token comment">//链表的结构定义</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token comment">//struct 结构体类型关键字  虽然我们重命名了ListNode 但是12行还没有生效</span><span class="token punctuation">}</span> ListNode<span class="token punctuation">;</span><span class="token comment">//链表整体的结构定义</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">List</span> <span class="token punctuation">{</span>    <span class="token comment">//ListNode *head;//头指针 因为插入的原则是 在待插入元素前进行插入 当链表为空时 很不好操作</span>    ListNode head<span class="token punctuation">;</span><span class="token comment">//虚拟头节点 为了方便插入和删除第一个元素  </span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">}</span> List<span class="token punctuation">;</span><span class="token comment">//链表的结构操作</span><span class="token comment">//初始化</span>ListNode <span class="token operator">*</span><span class="token function">getNewNode</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List <span class="token operator">*</span><span class="token function">getLinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">clear_node</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>List<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>List <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">erase</span><span class="token punctuation">(</span>List <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span>List <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span>List <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max_op</span> <span class="token expression"><span class="token number">20</span></span></span>    List <span class="token operator">*</span>l <span class="token operator">=</span> <span class="token function">getLinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_op<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ind <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>l<span class="token operator">-&gt;</span>length <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> op <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>op<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"insert %d at %d to List = %d\n"</span><span class="token punctuation">,</span> val<span class="token punctuation">,</span> ind<span class="token punctuation">,</span> <span class="token function">insert</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> ind<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"erase a iterm at %d from List = %d\n"</span><span class="token punctuation">,</span> ind<span class="token punctuation">,</span> <span class="token function">erase</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> ind<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">GREEN</span><span class="token punctuation">(</span><span class="token string">"reverse the list!\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">reverse</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">output</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">max_op</span></span>    <span class="token function">clear</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ListNode <span class="token operator">*</span><span class="token function">getNewNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ListNode <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>ListNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ListNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>data <span class="token operator">=</span> val<span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span>List <span class="token operator">*</span><span class="token function">getLinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List <span class="token operator">*</span>l <span class="token operator">=</span> <span class="token punctuation">(</span>List <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    l<span class="token operator">-&gt;</span>head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//因为虚拟头节点是一个没有实际意义的节点 所以虚拟头节点指向的后面的那个节点才是真的头节点</span>    l<span class="token operator">-&gt;</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>List <span class="token operator">*</span>l<span class="token punctuation">,</span> <span class="token keyword">int</span> ind<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ind <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> ind <span class="token operator">&gt;</span> l<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//下标是0 ~ length-1</span>    ListNode <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>l<span class="token operator">-&gt;</span>head<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token function">getNewNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ind<span class="token operator">--</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    l<span class="token operator">-&gt;</span>length <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">erase</span><span class="token punctuation">(</span>List <span class="token operator">*</span>l<span class="token punctuation">,</span> <span class="token keyword">int</span> ind<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ind <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> ind <span class="token operator">&gt;=</span> l<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>l<span class="token operator">-&gt;</span>head<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ind<span class="token operator">--</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    q <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> q<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    l<span class="token operator">-&gt;</span>length <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//链表原地翻转 先将头节点指向空 用p 和 q去维护整个链表</span><span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span>List <span class="token operator">*</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>p <span class="token operator">=</span> l<span class="token operator">-&gt;</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>    l<span class="token operator">-&gt;</span>head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        q <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> l<span class="token operator">-&gt;</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        l<span class="token operator">-&gt;</span>head<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>        p <span class="token operator">=</span> q<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span>List <span class="token operator">*</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"List(%d) = ["</span><span class="token punctuation">,</span> l<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ListNode <span class="token operator">*</span>p <span class="token operator">=</span> l<span class="token operator">-&gt;</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span> p<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d-&gt;"</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NULL]\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear_node</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>List <span class="token operator">*</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>p <span class="token operator">=</span> l<span class="token operator">-&gt;</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">;</span><span class="token comment">//q中间变量</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        q <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token function">clear_node</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> q<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>⭐初始化数据结构[比如链表、链表结点]时，为什么要动态开辟内存[用malloc等]，而不是定义普通变量？<ul><li>首先，排除盲区：用指针才能接受malloc返回的地址，但指针也能指向普通变量</li><li>关键：【malloc申请的内存在堆空间，普通变量定义在栈空间(在函数里面定义的)】</li><li>栈空间：大小只有8MB；出了函数[作用域]变量就被自动释放了</li><li>堆空间：可分配<strong>大内存</strong>；变量<strong>生命周期长</strong>，一般需手动释放</li></ul></li><li>❓虚拟头结点定义为普通变量和指针变量的区别<ul><li>个人理解，用指针变量，是为了接收malloc返回的地址</li><li>而虚拟头结点，在这只是一个指示作用，不需要大空间，所以用普通变量即可而</li></ul></li></ul><h2 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h2><p>队列    先进先出的数据结构（First in First out） 从队尾加入（push）一个元素 从队首弹出（pop）一个元素</p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/3EqzIo9YdxFZyJD.png" style="zoom: 50%;"></p><p>head记录队首元素的位置 tail记录队尾元素的位置</p><ul><li>出队： 让head指向下一个元素  长度和容量都不变</li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/XKRBqOWmpY4AjPk.png" style="zoom: 33%;"></p><ul><li>入队：让tail指向后一个地址 在此地址中进行加入元素 </li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/kXSwFfRxU2ZLaTi.png" style="zoom:33%;"></p><ul><li><p>假溢出问题：当队列如下图时 弹出了3个元素且加入了4个元素使得队列满了 我们可以发现<code>tail</code>已经走到了末尾 如果此时我们还想插入一个元素10 该怎么办呢？<br>  其实之前我们弹出了3个元素 这3个空间是可以使用的 那么我们是否可以将tail指向被弹出的元素的地址（队列的头部）呢？ </p><p>  ​    答案是可以的  当我们这么做时 此时的队列就变成了==循环队列==</p><p>  ​    循环队列就是用于解决这种假溢出问题的</p></li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/iCZMTqLX2KJuUVt.png" style="zoom:33%;"></p><p>那么我们如何去判断一个队列是否是满的呢？ 在循环队列中我们还需要加入一个字段<code>count</code>用于记录有效元素个数</p><p>==普通队列==</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token keyword">int</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">,</span> length<span class="token punctuation">;</span><span class="token comment">//length 容量</span><span class="token punctuation">}</span> Queue<span class="token punctuation">;</span>Queue <span class="token operator">*</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Queue <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token punctuation">(</span>Queue <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>length <span class="token operator">=</span> n<span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>head <span class="token operator">=</span> q<span class="token operator">-&gt;</span>tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//tail有两种实现方式 1.指向最后一个元素的地址 2.指向最后一个元素的下一个地址 这里我们选择第二种</span>    <span class="token keyword">return</span> q<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">front</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//if (q == NULL) return 0;</span>    <span class="token keyword">return</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>q<span class="token operator">-&gt;</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">empty</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> q<span class="token operator">-&gt;</span>head <span class="token operator">==</span> q<span class="token operator">-&gt;</span>tail<span class="token punctuation">;</span> <span class="token comment">//tail 指向的是最后一个元素的下一个</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">push</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>tail <span class="token operator">==</span> q<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>q<span class="token operator">-&gt;</span>tail<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token comment">//将val放入tail指向的位置 然后将tail++操作</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//判断当前队列是否为空 </span>    q<span class="token operator">-&gt;</span>head<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Queue : ["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> q<span class="token operator">-&gt;</span>head<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> q<span class="token operator">-&gt;</span>tail<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        j <span class="token operator">&amp;&amp;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印逗号和空格</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"]\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max_op</span> <span class="token expression"><span class="token number">20</span></span></span>    Queue <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span>max_op<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_op<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> op <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>op<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"push %d to the Queue! "</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"result = %d\n"</span><span class="token punctuation">,</span> <span class="token function">push</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pop %d from the Queue! "</span><span class="token punctuation">,</span> <span class="token function">front</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"result = %d\n"</span><span class="token punctuation">,</span> <span class="token function">pop</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">output</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">max_op</span></span>    <span class="token function">clear</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>循环队列</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">COLOR</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> </span><span class="token string">"\033["</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">b</span> </span></span><span class="token string">"m"</span> <span class="token expression">a </span><span class="token string">"\033[0m"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GREEN</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token function">COLOR</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>data<span class="token punctuation">;</span><span class="token comment">//队列数据域</span>    <span class="token keyword">int</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">,</span> length<span class="token punctuation">;</span><span class="token comment">//length 容量</span>    <span class="token keyword">int</span> cnt<span class="token punctuation">;</span><span class="token comment">//循环队列的字段</span><span class="token punctuation">}</span> Queue<span class="token punctuation">;</span>Queue <span class="token operator">*</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Queue <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token punctuation">(</span>Queue <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>length <span class="token operator">=</span> n<span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>head <span class="token operator">=</span> q<span class="token operator">-&gt;</span>tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//tail有两种实现方式 1.指向最后一个元素的地址 2.指向最后一个元素的下一个地址，方便循环队列判空</span>    q<span class="token operator">-&gt;</span>cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> q<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">front</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//if (q == NULL) return 0;</span>    <span class="token keyword">return</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>q<span class="token operator">-&gt;</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">empty</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// return q-&gt;head == q-&gt;tail; //tail 指向的是最后一个元素的下一个 </span>    <span class="token keyword">return</span> q<span class="token operator">-&gt;</span>cnt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//循环队列判空</span><span class="token punctuation">}</span><span class="token comment">//遇到真溢出</span><span class="token comment">//realloc不适用 尽管它能重新给我们分配一段大的空间 但是进行数据拷贝时是从0地址到尾地址进行拷贝 tail可能在head的前面</span><span class="token keyword">int</span> <span class="token function">expand</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> extr_size <span class="token operator">=</span> q<span class="token operator">-&gt;</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>extr_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>length <span class="token operator">+</span> extr_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        extr_size <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> q<span class="token operator">-&gt;</span>head<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> q<span class="token operator">-&gt;</span>cnt<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">%</span> q<span class="token operator">-&gt;</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>data <span class="token operator">=</span> p<span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>length <span class="token operator">+=</span> extr_size<span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>tail <span class="token operator">=</span> q<span class="token operator">-&gt;</span>cnt<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">push</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//if (q-&gt;tail == q-&gt;length) return 0;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>cnt <span class="token operator">==</span> q<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">expand</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//扩容操作</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">GREEN</span><span class="token punctuation">(</span><span class="token string">"expand successfully! Queue-&gt;size(%d)\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> q<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>q<span class="token operator">-&gt;</span>tail<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token comment">//将val放入tail指向的位置 然后将tail++操作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>tail <span class="token operator">==</span> q<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span> q<span class="token operator">-&gt;</span>tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>cnt <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//判断当前队列是否为空 </span>    q<span class="token operator">-&gt;</span>head<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>head <span class="token operator">==</span> q<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span> q<span class="token operator">-&gt;</span>head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//head也可能越界</span>    q<span class="token operator">-&gt;</span>cnt <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Queue : ["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> q<span class="token operator">-&gt;</span>head<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> q<span class="token operator">-&gt;</span>cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        j <span class="token operator">&amp;&amp;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印逗号和空格</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i <span class="token operator">%</span> q<span class="token operator">-&gt;</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//取模得到真实的位置</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"]\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max_op</span> <span class="token expression"><span class="token number">20</span></span></span>    Queue <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_op<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> op <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>op<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"push %d to the Queue! "</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"result = %d\n"</span><span class="token punctuation">,</span> <span class="token function">push</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pop %d from the Queue! "</span><span class="token punctuation">,</span> <span class="token function">front</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"result = %d\n"</span><span class="token punctuation">,</span> <span class="token function">pop</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">output</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">max_op</span></span>    <span class="token function">clear</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==栈==</p><ul><li>一种先进后出的数据结构 （FILO） <ul><li>如果是一个空栈 top = -1 因为顺序结构下标从0~n-1进行访问</li></ul></li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/ZLvfEimw6OVbrn7.png" style="zoom: 33%;"></p><ul><li><p>出栈</p><ul><li><p>将栈顶指针向下移动一位</p></li><li><p>出栈要进行判空操作</p><p>  <img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/UM3SzBDqkFVtQH7.png" style="zoom:33%;"></p></li></ul></li><li><p>入栈</p><ul><li>将栈顶指针向上移动</li><li>要进行判断边界操作</li></ul></li></ul><h3 id="括号匹配问题"><a href="#括号匹配问题" class="headerlink" title="括号匹配问题"></a>括号匹配问题</h3><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/6BQE7XzOlnkr1gI.png" style="zoom: 33%;"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>val<span class="token punctuation">;</span>    <span class="token keyword">int</span> p<span class="token punctuation">,</span> maxSize<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">initStack</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Stack</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> maxSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    s<span class="token operator">-&gt;</span>val <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>maxSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">emptyStack</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Stack</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">pushStack</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Stack</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    s<span class="token operator">-&gt;</span>val<span class="token punctuation">[</span>s<span class="token operator">-&gt;</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">popStack</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Stack</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">--</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token function">seekStack</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Stack</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token operator">-&gt;</span>val<span class="token punctuation">[</span>s<span class="token operator">-&gt;</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> <span class="token class-name">Stack</span> stack<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'('</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token string">'['</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token string">'{'</span><span class="token operator">:</span>                <span class="token function">pushStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">')'</span><span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">emptyStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">seekStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>                <span class="token function">popStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">']'</span><span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">emptyStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">seekStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">']'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>                <span class="token function">popStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'}'</span><span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">emptyStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">seekStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'}'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>                <span class="token function">popStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">emptyStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>栈的代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">COLOR</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> </span><span class="token string">"\033["</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">b</span> </span></span><span class="token string">"m"</span> <span class="token expression">a </span><span class="token string">"\033[0m"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GREEN</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token function">COLOR</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">,</span> top<span class="token punctuation">;</span><span class="token comment">//size容量 top栈顶指针</span><span class="token punctuation">}</span> Stack<span class="token punctuation">;</span>Stack <span class="token operator">*</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Stack <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token punctuation">(</span>Stack <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>size <span class="token operator">=</span> n<span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>s<span class="token operator">-&gt;</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">empty</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token operator">-&gt;</span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">expand</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> extr_size <span class="token operator">=</span> s<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>extr_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>size <span class="token operator">+</span> extr_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        extr_size <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>data <span class="token operator">=</span> p<span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>size <span class="token operator">+=</span> extr_size<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">push</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>top <span class="token operator">==</span> s<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">expand</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">GREEN</span><span class="token punctuation">(</span><span class="token string">"expand successfully! stack-&gt;size = (%d)\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    s<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token operator">++</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>top<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>top <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> s<span class="token operator">-&gt;</span>top<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        i <span class="token operator">&amp;&amp;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> s<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"]\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max_op</span> <span class="token expression"><span class="token number">20</span></span></span>    Stack <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_op<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> op <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>op<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"push %d to the Stack = %d\n"</span><span class="token punctuation">,</span> val<span class="token punctuation">,</span> <span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">&amp;&amp;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pop %d frome the Stack"</span><span class="token punctuation">,</span> <span class="token function">top</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"result = %d\n"</span><span class="token punctuation">,</span> <span class="token function">pop</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">output</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">max_op</span></span>    <span class="token function">clear</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="树与二叉树"><a href="#树与二叉树" class="headerlink" title="树与二叉树"></a>树与二叉树</h2><p>树的组成：结点 + 边</p><ul><li>结点 👉 集合，边 👉 关系</li><li>根结点：全集；子结点：子集<ul><li>根结点的所有子结点的集合并集 = 全集</li><li>【思想】大问题抽象为树，小问题抽象为子结点</li></ul></li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/AwHZhstcYrVjqCl.png" style="zoom:33%;"></p><ul><li>深度、高度<ul><li>树的深度和高度是一个值：最大层数</li><li>结点的深度和高度不一样<ul><li>深度：从根结点往下数，该结点是第几层</li><li>高度：从最深的层数往上数，该结点是第几层</li></ul></li></ul></li><li>度：有几个子孩子<ul><li>节点的度：一个节点含有的子树的个数称为该节点的度；</li><li>叶节点或终端节点：度为0的节点称为叶节点；</li><li>非终端节点或分支节点：度不为0的节点  ；</li><li>双亲节点或父节点：若一个节点含有子节点，则这个节点称为其子节点的父节点；</li><li>孩子节点或子节点：一个节点含有的子树的根节点称为该节点的子节点；</li><li>兄弟节点：具有相同父节点的节点互称为兄弟节点；</li><li>节点的层次：从根开始定义起，根为第1层，根的子节点为第2层，以此类推；</li><li>树的高度或深度：树中节点的最大层次；</li><li>堂兄弟节点：双亲在同一层的节点互为堂兄弟；</li><li>节点的祖先：从根到该节点所经分支上的所有节点；</li><li>子孙：以某节点为根的子树中任一节点都称为该节点的子孙。</li><li>森林：由m（m&gt;=0）棵互不相交的树的集合称为森林。</li></ul></li><li>⭐【重要公式】结点数 = 边数 + 1</li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/qg7FrRpnvO8Gc42.png" style="zoom:33%;"></p><ul><li>二叉树<ul><li>任何树都可以变成一颗二叉树</li></ul></li><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/5ZjCn74VBRxJUtN.png" style="zoom:33%;"></li></ul><ul><li>这是一颗三叉树  可以把它变成二叉树二进制可以转换成任何进制，二叉树同理<ul><li>首先简单</li><li>且可以表示所有的树形结构<ul><li>方法：左孩子、右兄弟法，又称十字链表法</li><li>从上往下，从左往右，结点的孩子放在左边，结点的相邻兄弟放在右边</li></ul></li></ul></li><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/FUlzSDVTWxOC8Z3.png" style="zoom:33%;"></li></ul><p>⭐【重要公式】二叉树中，度为0的结点比度为2的结点多1个</p><ul><li>利用另一重要公式：结点数 = 边数 + 1</li><li>令ni表示度为i的结点个数</li><li>则：[结点数] n0 + n1 + n2 = n1 + 2 * n2 + 1 [边数 + 1]</li><li>得：n0 = n2 + 1</li></ul><ul><li>完全二叉树：只差最后一个右孩子</li><li>满二叉树： 只有度为0 和度为2 的节点</li><li>完美二叉树： 不多不少很完美</li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/8mJlVoA5ErQ394W.png" style="zoom: 33%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/20/iDOCLrVKkWxp96e.png" style="zoom:33%;"></p><ul><li>对于一颗二叉树<ul><li>若根节点表示i<ul><li>左孩子为 2*i</li><li>右孩子为 2*i + 1 </li></ul></li></ul></li></ul><p><strong>==binary_tree==</strong></p><ul><li>实现的是二叉查找树（二叉排序树）</li><li><strong>维护的性质</strong>: 对于一个三元组来说👇   <ul><li>左孩子小于根节点  </li><li>右孩子大于根节点</li><li>对于中序遍历而言 ： 可以实现从小到大排序</li></ul></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span><span class="token comment">//节点</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>lchild<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span><span class="token comment">//二叉 指针域 左孩子 右孩子</span><span class="token punctuation">}</span> Node<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">tree</span> <span class="token punctuation">{</span>    Node <span class="token operator">*</span>root<span class="token punctuation">;</span><span class="token comment">//指向根节点的指针变量</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//节点个数</span><span class="token punctuation">}</span> Tree<span class="token punctuation">;</span>Node <span class="token operator">*</span><span class="token function">getNewNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>data <span class="token operator">=</span> val<span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>lchild <span class="token operator">=</span> p<span class="token operator">-&gt;</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span>Tree <span class="token operator">*</span><span class="token function">getNewTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Tree <span class="token operator">*</span>tree <span class="token operator">=</span> <span class="token punctuation">(</span>Tree <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token operator">-&gt;</span>root <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    tree<span class="token operator">-&gt;</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tree<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clearNode</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">clearNode</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//沿着当前节点的左子树进行递归回收</span>    <span class="token function">clearNode</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//回收当前节点</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>Tree <span class="token operator">*</span>tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tree <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">clearNode</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span>Node <span class="token operator">*</span><span class="token function">insert_node</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">*</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//root为空表示插入成功 </span>        <span class="token keyword">return</span> <span class="token function">getNewNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若root节点为空 则将val封装成根节点</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>data <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token comment">//如果根节点的值等于val 则返回root</span>        <span class="token comment">//如果当前的val值小于当前根节点所指向的值</span>    <span class="token comment">//那么我们需要将val值递归插入到根节点的左子树中 </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> root<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span> root<span class="token operator">-&gt;</span>lchild <span class="token operator">=</span> <span class="token function">insert_node</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>lchild<span class="token punctuation">,</span> val<span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> root<span class="token operator">-&gt;</span>rchild <span class="token operator">=</span> <span class="token function">insert_node</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>rchild<span class="token punctuation">,</span> val<span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//二叉查找树 左孩子小于根节点 右孩子大于根节点</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>Tree <span class="token operator">*</span>tree<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//传出参数</span>    tree<span class="token operator">-&gt;</span>root <span class="token operator">=</span> <span class="token function">insert_node</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">,</span> val<span class="token punctuation">,</span> <span class="token operator">&amp;</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//若插入成功 则此时flag = 1 且将节点个数加1</span>    tree<span class="token operator">-&gt;</span>n <span class="token operator">+=</span> flag<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">pre_order_node</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> node<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pre_order_node</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pre_order_node</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//前序遍历</span><span class="token keyword">void</span> <span class="token function">pre_order</span><span class="token punctuation">(</span>Tree <span class="token operator">*</span>tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tree <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pre_order :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pre_order_node</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">in_order_node</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">in_order_node</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> node<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">in_order_node</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//中序遍历</span><span class="token keyword">void</span> <span class="token function">in_order</span><span class="token punctuation">(</span>Tree <span class="token operator">*</span>tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tree <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in_order :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">in_order_node</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">post_order_node</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">post_order_node</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">post_order_node</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> node<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//后序遍历</span><span class="token keyword">void</span> <span class="token function">post_order</span><span class="token punctuation">(</span>Tree <span class="token operator">*</span>tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tree <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"post_order :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">post_order_node</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//打印广义表</span><span class="token keyword">void</span> <span class="token function">output_node</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>lchild <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> root<span class="token operator">-&gt;</span>rchild <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">//打印左子树时先输出`(`</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">output_node</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//打印右子树后输出`)`</span>    <span class="token function">output_node</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span>Tree <span class="token operator">*</span>tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tree <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"tree(%d) : "</span><span class="token punctuation">,</span> tree<span class="token operator">-&gt;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">output_node</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Tree <span class="token operator">*</span>tree <span class="token operator">=</span><span class="token function">getNewTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max_op</span> <span class="token expression"><span class="token number">10</span></span></span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_op<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token function">insert</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">output</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">pre_order</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">in_order</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">post_order</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">max_op</span></span>    <span class="token function">clear</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>😎三种遍历方式中 任选两种（其中必须包含中序遍历）可以还原一颗二叉树 </li></ul><p>广义表转二叉树</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>lchild<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span><span class="token punctuation">}</span> Node<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Tree</span> <span class="token punctuation">{</span>    Node <span class="token operator">*</span>root<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span> Tree<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span>    Node <span class="token operator">*</span><span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token keyword">int</span> top<span class="token punctuation">,</span> size<span class="token punctuation">;</span><span class="token punctuation">}</span> Stack<span class="token punctuation">;</span>Node <span class="token operator">*</span><span class="token function">getNewNode</span><span class="token punctuation">(</span><span class="token keyword">char</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>data <span class="token operator">=</span> val<span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>lchild <span class="token operator">=</span> p<span class="token operator">-&gt;</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span>Tree <span class="token operator">*</span><span class="token function">getNewTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Tree <span class="token operator">*</span>tree <span class="token operator">=</span> <span class="token punctuation">(</span>Tree <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token operator">-&gt;</span>root <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    tree<span class="token operator">-&gt;</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tree<span class="token punctuation">;</span>    <span class="token punctuation">}</span>Stack <span class="token operator">*</span><span class="token function">init_stack</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Stack <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token punctuation">(</span>Stack <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>size <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span>Node <span class="token operator">*</span><span class="token function">top</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>s<span class="token operator">-&gt;</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">empty</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token operator">-&gt;</span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">push</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>s<span class="token punctuation">,</span> Node <span class="token operator">*</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>top <span class="token operator">==</span> s<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token operator">++</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>top<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>top <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear_stack</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear_node</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">clear_node</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">clear_node</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear_tree</span><span class="token punctuation">(</span>Tree <span class="token operator">*</span>tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tree <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">clear_node</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span>Node <span class="token operator">*</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>node_num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Stack <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token function">init_stack</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span>temp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'('</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">')'</span><span class="token operator">:</span> <span class="token punctuation">{</span>                p <span class="token operator">=</span> <span class="token function">top</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">pop</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">','</span><span class="token operator">:</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">' '</span><span class="token operator">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                temp <span class="token operator">=</span> <span class="token function">getNewNode</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">top</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-&gt;</span>lchild <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">top</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-&gt;</span>rchild <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token operator">++</span><span class="token punctuation">(</span><span class="token operator">*</span>node_num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">++</span>str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">clear_stack</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>p<span class="token punctuation">)</span> p <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">pre_order_node</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pre_order_node</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pre_order_node</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">pre_order</span><span class="token punctuation">(</span>Tree <span class="token operator">*</span>tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tree <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pre_order : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pre_order_node</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">in_order_node</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">in_order_node</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">in_order_node</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">in_order</span><span class="token punctuation">(</span>Tree <span class="token operator">*</span>tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tree <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in_order : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">in_order_node</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">post_order_node</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">post_order_node</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">post_order_node</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">post_order</span><span class="token punctuation">(</span>Tree <span class="token operator">*</span>tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tree <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"post_order : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">post_order_node</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> node_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%[^\n]s"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    Tree <span class="token operator">*</span>tree <span class="token operator">=</span> <span class="token function">getNewTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token operator">-&gt;</span>root <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token operator">&amp;</span>node_num<span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token operator">-&gt;</span>n <span class="token operator">=</span> node_num<span class="token punctuation">;</span>    <span class="token function">pre_order</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">in_order</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">post_order</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">clear_tree</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="排序与查找"><a href="#排序与查找" class="headerlink" title="排序与查找"></a>排序与查找</h2><h3 id="稳定排序"><a href="#稳定排序" class="headerlink" title="稳定排序"></a>稳定排序</h3><p>==稳定排序==</p><p><strong><em>对于相同的元素 经过排序操作后 他们的相对位置保持不变 这样的排序我们称为稳定排序</em></strong></p><ul><li><p>插入排序</p><ul><li>时间复杂度O(n^2)  至少要n-1轮操作</li></ul></li><li><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/23/5wKdYO3y1HSV7hx.png" style="zoom: 67%;"></p></li><li><p>冒泡排序</p><p>  <img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/23/rwxdzJe9CVO1X3T.png" style="zoom: 67%;"></p></li><li><p>归并排序</p><ul><li>时间复杂度O(nlog·N)  分治思想 不是基于比较跟交换的排序方式</li><li><p>==★==这是一个外部排序（很重要）</p></li><li><p><a href="https://www.wikiwand.com/zh-hans/%E5%A4%96%E6%8E%92%E5%BA%8F#/%E5%A4%96%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F">外部排序</a>:   我们可以将数据分为多段加载到内存中</p><ul><li><p>内部排序：需要将数据整个加载到内存中进行排序</p></li><li><p>比如我们有40G的数据要进行排序 怎么办？ 我们可以使用归并排序 把40G的数据分成20G 再不行就分成10G </p></li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/23/v4FDiWRKdS6Ualx.png" style="zoom: 50%;"></p></li></ul></li></ul><pre><code><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">swap</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="token punctuation">\</span>    <span class="token expression">a <span class="token operator">^=</span> b<span class="token punctuation">;</span> b <span class="token operator">^=</span> a<span class="token punctuation">;</span> a <span class="token operator">^=</span> b<span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">}</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">TEST</span><span class="token expression"><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> func<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">int</span> <span class="token operator">*</span>num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">memcpy</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">output</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"%s= "</span><span class="token expression"><span class="token punctuation">,</span> #func<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">func</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">output</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">free</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">}</span></span></span><span class="token comment">//插入排序</span><span class="token keyword">void</span> <span class="token function">insert_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> num<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//冒泡 我们在这里设置一个记录交换次数的值 若是一个从小到大的有序数组 times交换次数必定为0 且时间复杂度为O(n) </span><span class="token keyword">void</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> times <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 进行交换的次数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//times == 0 结束循环</span>        times <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> num<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">//减少缩进</span>            <span class="token function">swap</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            times<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//归并排序 分治思想 用递归 </span><span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//边界条件 只剩两个元素</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> num<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&lt;</span> num<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从l 到 mid 进行排序</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从 mid + 1 到 r 进行排序</span>    <span class="token comment">//合并</span>    <span class="token keyword">int</span> <span class="token operator">*</span>temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//p1 指向的是</span>    <span class="token keyword">int</span> p1 <span class="token operator">=</span> l<span class="token punctuation">,</span> p2 <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> mid <span class="token operator">||</span> p2 <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token operator">&gt;</span> r <span class="token operator">||</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> num<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> num<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//将temp拷贝回num里</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>num <span class="token operator">+</span> l<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">randint</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> num<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"]\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max_n</span> <span class="token expression"><span class="token number">20</span></span></span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span>max_n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">randint</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> max_n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TEST</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> max_n<span class="token punctuation">,</span> insert_sort<span class="token punctuation">,</span> num<span class="token punctuation">,</span> max_n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TEST</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> max_n<span class="token punctuation">,</span> bubble_sort<span class="token punctuation">,</span> num<span class="token punctuation">,</span> max_n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TEST</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> max_n<span class="token punctuation">,</span> merge_sort<span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> max_n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">max_n</span></span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h3 id="不稳定排序"><a href="#不稳定排序" class="headerlink" title="不稳定排序"></a>不稳定排序</h3><ul><li><p>选择排序</p><ul><li><p>时间复杂度：O(n^2) </p></li><li><p>不稳定排序 比如 5 3 2 5 1 经过排序后 第一个5的位置变到了最后一个 两个5的相对位置发生了改变</p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/24/XQqkKLCAZt37cnO.png" style="zoom: 67%;"></p></li></ul></li></ul><ul><li>快速排序<ul><li>时间复杂度：O(nlog·N)     选一个基数  让左半边小于这个基数 右半边大于这个基数<ul><li>①选择头部元素作为基数</li><li>②有头尾两个指针  尾指针找第一个小于基数的值然后放入头部中  头指针找第一个大于基数的值放入刚刚移走的值的位置</li><li>③最后指针重叠 放入基数</li></ul></li><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/24/VL7Kw68MOvGptnb.png" alt=""></li><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/24/OiI1czLE4nohYTd.png" alt=""></li></ul></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token comment">//^= 两个值不能异或自己</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">swap</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">__typeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> __temp <span class="token operator">=</span> a<span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression">a <span class="token operator">=</span> b<span class="token punctuation">;</span> b <span class="token operator">=</span> __temp<span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">}</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">TEST</span><span class="token expression"><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> func<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">int</span> <span class="token operator">*</span>num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">memcpy</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">output</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"%s = "</span><span class="token expression"><span class="token punctuation">,</span> #func<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">func</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">output</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">free</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">}</span></span></span><span class="token keyword">void</span> <span class="token function">select_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ind <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token operator">&gt;</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> ind <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>ind<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> l<span class="token punctuation">,</span> y <span class="token operator">=</span> r<span class="token punctuation">,</span> z <span class="token operator">=</span> num<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> y <span class="token operator">&amp;&amp;</span> num<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&gt;</span> z<span class="token punctuation">)</span> y<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> y<span class="token punctuation">)</span> num<span class="token punctuation">[</span>x<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> y <span class="token operator">&amp;&amp;</span> num<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;</span> z<span class="token punctuation">)</span> x<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> y<span class="token punctuation">)</span> num<span class="token punctuation">[</span>y<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    num<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> z<span class="token punctuation">;</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> l<span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">randint</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> num<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"]\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max_n</span> <span class="token expression"><span class="token number">20</span></span></span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span>max_n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">randint</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> max_n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TEST</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> max_n<span class="token punctuation">,</span> select_sort<span class="token punctuation">,</span> num<span class="token punctuation">,</span> max_n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TEST</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> max_n<span class="token punctuation">,</span> quick_sort<span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> max_n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>快速排序优化</p><p>  <img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/24/sa2YOr7Hmw1txeV.png" alt=""></p></li></ul><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ul><li><p><strong>二分查找</strong></p><ul><li><p>虚拟头尾指针 一堆0的情况<img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/24/EuSNpFWqjLMUI9b.png" style="zoom: 67%;"></p></li><li><p>特殊情况①    1111111100000000</p><ul><li><p>1 表示满足某种性质    0  表示不满足某种性质</p></li><li><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/24/LeC3JicxfpGzoOH.png" alt=""></p></li><li>如果我们的数据全是0   0000000000000  最后mid指向第一个0 我们说不清到底是找到了答案还是没找到 所以我们引入了虚拟头指针 去判断它是否等于-1</li><li><img src="/img/loading.gif" data-original="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\1606189109262.png" alt="1606189109262"></li></ul></li><li><p>特殊情况②   00000000011111111111</p><p>  <img src="/img/loading.gif" data-original="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\1606189376625.png" alt="1606189376625"></p></li></ul></li></ul><ul><li><strong>三分查找</strong><br>  <img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/24/C2aWlMRGDsZpJ9O.png" style="zoom:50%;"></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">P</span><span class="token expression"><span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"%s = %d\n"</span><span class="token expression"><span class="token punctuation">,</span> #func<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">}</span></span></span><span class="token keyword">int</span> <span class="token function">binary_search1</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tail <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">&lt;=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> tail<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> head <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> tail <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//111111000000</span><span class="token comment">//head 虚拟头指针</span><span class="token keyword">int</span> <span class="token function">binary_search2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> tail <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> tail <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> head <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> tail <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//00000011111111</span><span class="token comment">//tail 虚拟尾指针</span><span class="token keyword">int</span> <span class="token function">binary_search3</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tail <span class="token operator">=</span> n<span class="token punctuation">,</span> mid<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> tail<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> tail <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> head <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head <span class="token operator">==</span> n <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arr3<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">P</span><span class="token punctuation">(</span><span class="token function">binary_search1</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">P</span><span class="token punctuation">(</span><span class="token function">binary_search2</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">P</span><span class="token punctuation">(</span><span class="token function">binary_search3</span><span class="token punctuation">(</span>arr3<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><ul><li>时间复杂度：趋近与O(1)</li><li>是一种用来查找的数据结构（下标与值的访问）</li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/25/ndoXIQCP7jWybAG.png" style="zoom: 33%;"></p><ul><li><p>可以将任意一种类型映射成数组下标的形式进行访问 </p><ul><li>冲突处理方法（无法避免，但是可以减少发生的概率） </li><li><strong><em>放入元素</em></strong> ：当前我要插入16这个值  用16取模与当前的容量 放入到下标为【7】的位置中</li><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/25/hS4Otfx91HkzP2Y.png" style="zoom:33%;"></li><li><strong><em>发生冲突</em></strong>： 我要插入7这个值  7%9 = 7  此时我要把7放入到下标为【7】的位置中 但是【7】的位置中已存在值  这时冲突便发生了</li><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/25/Fueh2iabNVHj9TK.png" style="zoom:33%;"></li></ul></li><li><p>这是就引出了哈希表很重要的结构： <strong><em>冲突处理方法</em></strong></p><ul><li>①<strong><em>开放定值</em></strong>： 当前7的位置有值 那我就去寻找后面的位置 是否有值 如果没有值就将7放入8的位置<ul><li>容易产生数据堆聚问题 ：数据会集中存储在空间中的某一块区域 </li></ul></li><li>②<strong><em>再哈希法</em></strong>：在我的哈希表中 我设置了不止一种哈希函数 一种不行 我再用下一种</li><li>③<strong><em>拉链法</em></strong>：在当前位置我不存储一个元素，我们去存储一个链表，将这个值封装一个节点存在链表的后面</li><li>④<strong><em>建立公共溢出区</em></strong>：这个区域专门用来存储冲突元素的</li></ul></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span> Node<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">HashTable</span> <span class="token punctuation">{</span>    Node <span class="token operator">*</span><span class="token operator">*</span>data<span class="token punctuation">;</span><span class="token comment">//哈希表(也是顺序表)里面存储的是一个地址 地址所指向的类型是Node*类型 拉链法</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token punctuation">}</span> HashTable<span class="token punctuation">;</span>Node <span class="token operator">*</span><span class="token function">init_node</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> Node <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>str <span class="token operator">=</span> <span class="token function">strdup</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span> <span class="token comment">//头插法</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span>HashTable <span class="token operator">*</span><span class="token function">init_hashtable</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    HashTable <span class="token operator">*</span>h <span class="token operator">=</span> <span class="token punctuation">(</span>HashTable <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HashTable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//利用率和哈希函数冲突概率有关 我们把n扩大一倍 使其只有50%利用率</span>    h<span class="token operator">-&gt;</span>size <span class="token operator">=</span> n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//哈希表的空间利用率不可能达到100% 一般的空间利用率为50%——90% 工业上达到70%才可以使用</span>    h<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>h<span class="token operator">-&gt;</span>size<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数据的每一位都为0值 都是空地址</span>    <span class="token keyword">return</span> h<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//哈希函数</span><span class="token keyword">int</span> <span class="token function">BKDRHash</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//seed是一个素数就行</span>    <span class="token keyword">int</span> seed <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">,</span> hash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> hash <span class="token operator">=</span> hash <span class="token operator">*</span> seed <span class="token operator">+</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//hash有可能超出整型范围 变成一个负数 </span>    <span class="token comment">//这里的0x7fffffff 表示的是符号位为0 其余位为1的数 </span>    <span class="token keyword">return</span> hash <span class="token operator">&amp;</span> <span class="token number">0x7fffffff</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>h<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">BKDRHash</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ind <span class="token operator">=</span> hash <span class="token operator">%</span> h<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>    <span class="token comment">//将字符串插入到下标为ind的这个位置所对应的链表中</span>    h<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">init_node</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> h<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>ind<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>h<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">BKDRHash</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ind <span class="token operator">=</span> hash <span class="token operator">%</span> h<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>    <span class="token comment">//p指向ind这位链表里存的头节点</span>    Node <span class="token operator">*</span>p <span class="token operator">=</span> h<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>ind<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//沿着链表的头节点 遍历链表的每一位 strcmp返回值不为0时代表没找到</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>str<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token comment">//如果p 不等于NULL 说明是因为strcmp返回值为0退出的循环  也就是说找到了值</span>    <span class="token keyword">return</span> p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear_node</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    Node <span class="token operator">*</span>p <span class="token operator">=</span> node<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        q <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> q<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear_hashtable</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> h<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">clear_node</span><span class="token punctuation">(</span>h<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>h<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> op<span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max_n</span> <span class="token expression"><span class="token number">100</span></span></span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span>max_n <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    HashTable <span class="token operator">*</span>h <span class="token operator">=</span> <span class="token function">init_hashtable</span><span class="token punctuation">(</span>max_n <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>op<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"insert %s to HashTable\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">insert</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"search %s from HashTable result = %d\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token function">search</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">max_n</span></span>    <span class="token function">clear_hashtable</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/11/27/LyTdRX2YDeafEzG.png" alt=""></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/04/9ZMPRS3cLxaWEzg.png" alt=""></p><h2 id="堆与优先队列"><a href="#堆与优先队列" class="headerlink" title="堆与优先队列"></a>堆与优先队列</h2><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/ZwJXE47fyLK1Io6.png" alt="图片" style="zoom: 33%;"></p><ul><li>完全二叉树默认从1开始编号<ul><li>这样可以保证左孩子、右孩子编号简洁</li><li>[否则] 左孩子编号需为2 <em> i + 1，右孩子编号需为2 </em> i + 2</li></ul></li></ul><p>==数据结构： 你定义了一种性质，并且能维护这一种性质，那么这种结构就是一个新的数据结构==</p><ul><li>优先队列是堆的一个别名</li><li>堆在思维逻辑上就是一颗完全二叉树</li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/01/i5F9A1S7zVvZWEN.png" alt=""></p><ul><li><strong>尾部插入元素</strong>(O(logn))   <ul><li>一开始以7为根节点 13为左孩子  右孩子为空 这个三元组进行调整 </li></ul></li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/01/OeKuCUMVABwcJ7R.png" style="zoom:25%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/01/c2NArZGuEwPIJSK.png" style="zoom:25%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/01/h6m3Xrqi1oPJLlW.png" style="zoom:25%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/01/xQ7PGAMoih9fKyb.png" style="zoom:25%;"></p><ul><li><p>头部弹出调整（删除操作）</p><ul><li>从头部删除元素 并维护堆的性质进行调整</li><li><p>我们让最后一个孩子作为头部元素 自上而下进行调整</p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/01/aNEQ9gS1Rwth8fp.png" style="zoom:25%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/01/LTNd3rGywOjWKAZ.png" style="zoom:25%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/01/7MV6siyqCFQLWl2.png" style="zoom:25%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/01/cd8uveO2L3FJbl6.png" style="zoom:25%;"></p></li></ul></li><li><p><strong>堆排序</strong></p><ul><li>我们将堆顶元素和堆尾元素置换  每次调整n-1个元素</li><li>时间复杂度O(nlogn)：因为每次是一层一层遍历 </li><li><p>大顶堆：从小到大排序     小顶堆：从大到小排序</p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/01/dqBPVt6S5MNvuxh.png" alt=""></p></li></ul></li></ul><ul><li><strong>普通队列与堆的比较</strong></li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/01/Mdpj8Afi2TRsJa3.png" style="zoom: 50%;"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">swap</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">__typeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> __temp <span class="token operator">=</span> a<span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression">a <span class="token operator">=</span> b<span class="token punctuation">;</span> b <span class="token operator">=</span> __temp<span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">}</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">priority_queue</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token punctuation">,</span> size<span class="token punctuation">;</span><span class="token comment">//个数， 容量</span><span class="token punctuation">}</span> priority_queue<span class="token punctuation">;</span>priority_queue <span class="token operator">*</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    priority_queue <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token punctuation">(</span>priority_queue <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>priority_queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//由于优先队列是以数组的形式进行存储  且在逻辑上是一棵二叉树 所以在这里多开一位 </span>    <span class="token comment">//目的：可以方便计算</span>    q<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    q<span class="token operator">-&gt;</span>size <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">return</span> q<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">empty</span><span class="token punctuation">(</span>priority_queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> q<span class="token operator">-&gt;</span>cnt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//堆顶弹出元素</span><span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span>priority_queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">push</span><span class="token punctuation">(</span>priority_queue <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>cnt <span class="token operator">==</span> q<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//判断堆是否满</span>    q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token operator">++</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>cnt<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token comment">//++(q-&gt;cnt)是因为我们从1开始存储所以个数要先加1 </span>    <span class="token keyword">int</span> ind <span class="token operator">=</span> q<span class="token operator">-&gt;</span>cnt<span class="token punctuation">;</span>     <span class="token comment">//ind记录的是最后插入元素的下标</span>        <span class="token comment">//由于我们插入一个元素 要进行向上调整 也就是当前节点需要跟父节点进行比较</span>    <span class="token comment">// ind &gt;&gt; 1 表示我们的父节点  维护大顶堆</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ind <span class="token operator">&gt;&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token operator">&gt;</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>ind <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>ind<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>ind <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ind <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//交换后当前节点等于父节点</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span>priority_queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//我们将最后一个节点覆盖掉第一个节点  并让个数减1</span>    q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>q<span class="token operator">-&gt;</span>cnt<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ind <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//调整下标</span>    <span class="token comment">//左孩子的下标没有超过q-&gt;cnt的下标的话  说明ind这个节点有左孩子</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ind <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> q<span class="token operator">-&gt;</span>cnt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//😱(ind &lt;&lt; 1 | 1) 骚操作  表示的是ind * 2 + 1 </span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> ind<span class="token punctuation">,</span> l <span class="token operator">=</span> ind <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> ind <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&gt;</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">)</span> temp <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;=</span> q<span class="token operator">-&gt;</span>cnt <span class="token operator">&amp;&amp;</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&gt;</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">)</span> temp <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> ind<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>ind<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ind <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>priority_queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max_op</span> <span class="token expression"><span class="token number">20</span></span></span>    priority_queue <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span>max_op<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_op<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token function">push</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"insert %d to the priority_queue!\n"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_op<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token function">top</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pop</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">max_op</span></span>    <span class="token function">clear</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><ul><li>根据其性质，全部弹出，将得到一个排好序的序列</li><li>⭐思维转变：堆顶元素的弹出操作 ==&gt; 堆顶元素与堆尾元素交换<ul><li>【如此操作】</li><li><strong>大顶堆</strong>的元素全部弹出👉原数组存储了一个<strong>从小到大</strong>的排序序列</li><li>[至此，从大顶堆，得到一个特殊的小顶堆]</li></ul></li><li>时间复杂度：O(NlogN)<ul><li>消耗的时间在于调整操作，每次调整的时间复杂度是O(logN)，共N个元素，需调整N - 1次</li><li>弹出操作的时间复杂度是O(1)的</li><li>时间效率一定不会退化</li></ul></li></ul><h3 id="建堆"><a href="#建堆" class="headerlink" title="建堆"></a>建堆</h3><p>【若要使用堆排序，首先需要维护一个堆，也就是用普通的序列<strong>建堆</strong>，下面有2种思路】</p><h4 id="常规思路"><a href="#常规思路" class="headerlink" title="常规思路"></a>常规思路</h4><p>又叫插入建堆法</p><ul><li>按照前述尾部插入的调整方法：自下向上<ul><li>从第0层 [默认根结点在第0层] 开始，计算每一层的最多调整次数：</li><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/li25Ec7btFYP68H.png" alt="图片" style="zoom:33%;"></li><li>第 i 层元素的调整次数为 i，第 i 层的结点数为2 ^ i→ 第 i 层的总调整次数为 i * (2 ^ i)</li></ul></li><li>最坏的建堆时间复杂度O(NlogN)，计算过程如下：<ul><li>总的调整次数 S = (n - 1) * 2 ^ (n + 1) + 1，过程如下：<ul><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/1Ierol5t3OMdZvT.png" alt="图片" style="zoom: 50%;"></li><li>利用裂项相消法</li></ul></li><li>上面的n对应层数 - 1 [从第0层开始的]，若令总的结点数为N，则n ≈ log[2]N</li><li>❗【层数n→结点数N的换算】将n ≈ log[2]N代入S，得到S ≈ Nlog[2]N</li><li>即最坏的时间复杂度为：O(NlogN)</li></ul></li></ul><h4 id="线性思路⭐"><a href="#线性思路⭐" class="headerlink" title="线性思路⭐"></a>线性思路⭐</h4><p>也就是【线性建堆法】</p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/xacplE79RSy5nZb.png" alt="图片" style="zoom: 33%;"></p><ul><li><p>如图所示</p><ul><li>常规思路：越到下面层，需要的调整次数越多，也就是权重越大</li><li>❗ 那是否可以思维反转，把大权重放到前面，让下面结点数多的层的权重减小</li><li>线性思路：可以！从倒数第二层开始排，【自上向下】调整</li></ul></li><li><p>🆒最坏的建堆时间复杂度O(N)</p><ul><li>同样利用裂项相消法得到总的调整次数 S = 2 ^ (n + 1) - 2 - n</li><li>把层数n换算到结点数N，得到S ≈ 2N - 2 - log[2]N</li><li>即最坏的时间复杂度为：O(N)</li></ul></li><li><p>⭐推荐视频</p><p>  Linear Time BuildHeap</p><p>  ——Youtube</p><ul><li>比较了常规建堆和线性建堆两种思路，并有直观的动画演示，加深印象</li></ul></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">swap</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">__typeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> __temp <span class="token operator">=</span> a<span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression">a <span class="token operator">=</span> b<span class="token punctuation">;</span> b <span class="token operator">=</span> __temp<span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">}</span></span></span><span class="token keyword">void</span> <span class="token function">downUpdate</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> ind<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ind <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> ind<span class="token punctuation">,</span> l <span class="token operator">=</span> ind <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> ind <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">)</span> temp <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">)</span> temp <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ind <span class="token operator">==</span> temp<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>ind<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ind <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">heap_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//从最后一个结点的父结点开始调整</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">downUpdate</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">downUpdate</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//从上到下调整</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"]\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max_n</span> <span class="token expression"><span class="token number">20</span></span></span>    <span class="token keyword">int</span> <span class="token operator">*</span>arr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> max_n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">output</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> max_n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">heap_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> max_n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">output</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> max_n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">max_n</span></span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="森林与并查集"><a href="#森林与并查集" class="headerlink" title="森林与并查集"></a>森林与并查集</h2><p><strong>并查集能解决的问题：</strong>  具有连通性关系的问题</p><ul><li>确认连通关系：广义上来说 是将两个集合进行合并成具有连通关系的集合</li><li>可以判断我们两个点在一个集合中是否具有连通关系</li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/01/P2gNkn1Kl6hrf5D.png" style="zoom: 50%;"></p><p><strong>==quick-find算法==</strong></p><ul><li>核心思想：染色<ul><li>一个颜色，对应一个类别</li><li>初始化：个体独立，都写成自己的索引，属于一个独立的集合里</li><li>⭐把和自己<strong>连通的所有</strong>点的颜色改成要染的颜色</li></ul></li><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/01/ME1OelXAKCh8oTy.png" style="zoom:50%;"></li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/WqwkN7KaLhMrSsY.png" style="zoom: 33%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/TPQ82X5sUf6uaip.png" style="zoom: 33%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/INyQYtorC2s9HcS.png" style="zoom: 33%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/ntTUIECy5oNiBK3.png" style="zoom: 33%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/OV5Kg3sGFUJ1yzn.png" style="zoom:33%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/GSbncK8QoPh7Agd.png" style="zoom:33%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/ajEWyiRCK9whLuT.png" style="zoom:33%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/THxgoszNDCR4OPb.png" style="zoom:33%;"></p><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/UE1fvsd9CFnGwZa.png" style="zoom:50%;"></p><hr><ul><li><p><strong>==quick_union算法==</strong></p><ul><li>找代表元素👉（找大哥） 对于两个点 我们如果想判断连通性 那么我们就去查看他们的大哥是不是同一个</li><li>对于集合和集合之间建立的连通关系可以认为是集合和集合之间的合并操作 <ul><li>👉 （逻辑上）两颗子树的合并操作</li><li>👉    最终会在一个根结点下面 也就只有一个代表元素</li></ul></li></ul></li><li><p>首先链表是一棵极端的树</p></li><li>当我们用这种算法时两棵子树可能退化成链表 且有n个节点 则此时的树高也为n <ul><li>合并操作将退化为O(n) →O(树高)</li><li>联通操作将退化为O(n) →O(树高)</li></ul></li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/pqUVch8YfDGRPvB.png" alt=""></p><p><strong>==Weighted quick_union算法==</strong></p><ul><li><p>按秩优化</p></li><li><p>如何避免退化？→保证枝繁叶茂</p><ul><li>合并依据1：树高，矮树挂在高树下[两两结合]<ul><li>高度为 h 的树，至少需要的结点个数N为2 ^ (h - 1)</li><li>即树高h = log[2]N + 1 ≈ log[2]N</li><li>[PS] 只有两棵一样树高的树合并，才会使高度增加</li></ul></li><li>合并依据2：结点数量，结点少的树挂在结点多的树下</li><li>两种优化方式都能得到O(logN)，但是合并依据2【结点数量】更优秀一些</li></ul></li><li>⭐为什么合并依据2更优秀<ul><li>【示例】什么是平均查找次数<ul><li>如下图所示，计算了A、B树的平均查找次数</li><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/9Q7TrSfvowusW1i.png" alt="图片" style="zoom: 25%;"></li><li>结点深度即为结点的查找次数，平均查找次数 = 总查找次数 / 总结点数</li><li>此示例，B树的查找操作更快</li></ul></li><li>【推导】合并依据2直接决定平均查找次数<ul><li>对于有SA、SB个结点的A、B树，它们的总查找次数LA、LB分别为：<ul><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/kGLCJWbNK3AUIlo.png" alt="图片" style="zoom:33%;"></li><li>其中，li 代表第 i 个结点的深度</li></ul></li><li>此时进行合并操作，分别计算①A→B和②B→A的平均查找次数<ul><li>①当A树作为子树合并到B树时，为<ul><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/B3hH8jwXaIxoed5.png" alt="图片" style="zoom:33%;"></li><li>A树中的所有结点需要多查找一次</li></ul></li><li>②当B树作为子树合并到A树时，为<ul><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/CSLM1K4NwOuWsnm.png" alt="图片" style="zoom:33%;"></li><li>B树中的所有结点需要多查找一次</li></ul></li></ul></li><li>❗【比较两种方式的平均查找次数】<ul><li>和树高[LA、LB]没有直接关系，而分子的结点数量[SA、SB]【直接】决定查找次数，次数越小越好</li><li>👉谁的结点数少，就作为子树被合并</li><li>❓思考：上面的推导是否证明高度无法作为合并依据呢？<ul><li>❌否，高度间接影响着结点数量，一般情况高度越低，结点数量越少</li><li><strong>但是</strong>，对于特殊情况，A树比B树高，而A树结点数量却比B树少时，还是按照【结点数量】作为合并依据，将A树作为子树合并到B树里</li></ul></li></ul></li></ul></li><li>所以以结点数作为合并依据更优秀！👇合并思路如下</li></ul></li><li>在合并两棵子树时<ul><li>如果结点数一样，就按照普通Quick-Union的思路换</li><li>如果不一样，结点数少的子树的根结点接在👉结点数多的子树的根结点下面</li></ul></li><li>[PS]换句话说<ul><li>在换大哥时</li><li>如果小弟数量一样，就按照普通Quick-Union的思路换</li><li>如果不一样，小弟少的大哥得跟👉小弟多的大哥混</li></ul></li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/03/Q9U6dhz8Bl1eLjf.png" style="zoom: 25%;"></p><ul><li><strong>==Quick-Find vs. Quick-Union==</strong></li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/xyuUOQsW9oiJenL.png" alt="图片" style="zoom: 50%;"></p><ul><li><p>【关键】理解Quick-Union</p><ul><li>0-&gt;1-&gt;2-&gt;4-&gt;5、3-&gt;4-&gt;5；8-&gt;9-&gt;7-&gt;6</li><li>查找、合并边界：自己的代表元素就是本身时，停止</li></ul></li><li><p><strong>==Quick-Union vs. weighted Quick-Union==</strong></p></li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/omhF9JsytLTz13i.png" alt="图片" style="zoom:33%;"></p><ul><li>【关键】理解weighted的含义<ul><li>当两个集合的元素个数不一样时</li><li>元素少的集合的代表元素的值👉元素多的集合的代表元素的值</li><li>小弟少的大哥得跟着小弟多的大哥混</li></ul></li><li>结果可视化<ul><li><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/02/3axleQf7TPc1JEb.png" alt="图片" style="zoom: 33%;"></li><li>很明显，weighted方法得到的树更矮，合并、查找效率更高</li></ul></li></ul><ul><li><strong>从练习题入手并查集</strong></li></ul><p><img src="/img/loading.gif" data-original="https://i.loli.net/2020/12/04/MEo37UCIGHfJZvW.png" alt=""></p><p> 样例输入</p><pre class="line-numbers language-none"><code class="language-none">6 51 1 22 1 31 2 41 4 32 1 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 样例输出</p><pre class="line-numbers language-none"><code class="language-none">NoYes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>quick_find</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">UnionSet</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>color<span class="token punctuation">;</span> <span class="token comment">//需要一片连续的空间存储每个元素的颜色 </span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//color指向这片连续空间的首地址</span><span class="token punctuation">}</span> UnionSet<span class="token punctuation">;</span>UnionSet <span class="token operator">*</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    UnionSet <span class="token operator">*</span>u <span class="token operator">=</span> <span class="token punctuation">(</span>UnionSet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>UnionSet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    u<span class="token operator">-&gt;</span>color <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    u<span class="token operator">-&gt;</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        u<span class="token operator">-&gt;</span>color<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// 将每个元素初始化为自己</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> u<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span>UnionSet <span class="token operator">*</span>u<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> u<span class="token operator">-&gt;</span>color<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//合并</span><span class="token keyword">int</span> <span class="token function">merge</span><span class="token punctuation">(</span>UnionSet <span class="token operator">*</span>u<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//判断a和b是否连通 </span>    <span class="token keyword">int</span> color_a <span class="token operator">=</span> u<span class="token operator">-&gt;</span>color<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//保存前一个变量的颜色</span>    <span class="token comment">//把所有a的颜色 改为 b的颜色</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> u<span class="token operator">-&gt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>color<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> color_a<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">//若当前i的颜色等与a的颜色 则执行下次循环 否则 </span>        u<span class="token operator">-&gt;</span>color<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token operator">-&gt;</span>color<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//将i的颜色改为b的颜色</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>UnionSet <span class="token operator">*</span>u<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    UnionSet <span class="token operator">*</span>u <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token function">merge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"Yes"</span> <span class="token operator">:</span> <span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">clear</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Weighted quick_union + 路径压缩</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">swap</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">__typeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> __temp <span class="token operator">=</span> a<span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression">a <span class="token operator">=</span> b<span class="token punctuation">;</span> b <span class="token operator">=</span> __temp<span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">}</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">UnionSet</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>father<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>size<span class="token punctuation">;</span> <span class="token comment">//记录相关的节点个数  weighted quick-union 优化</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span> UnionSet<span class="token punctuation">;</span>UnionSet <span class="token operator">*</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    UnionSet <span class="token operator">*</span>u <span class="token operator">=</span> <span class="token punctuation">(</span>UnionSet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>UnionSet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    u<span class="token operator">-&gt;</span>father <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    u<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    u<span class="token operator">-&gt;</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        u<span class="token operator">-&gt;</span>father<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        u<span class="token operator">-&gt;</span>size<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//最开始相关的节点数为自己 = 1</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> u<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span>UnionSet <span class="token operator">*</span>u<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//if (u-&gt;father[x] == x) return x;//返回的是当前元素的代表元素</span>    <span class="token comment">//return find(u, u-&gt;father[x]);   //否则我们就递归去找它父亲的父亲</span>    <span class="token comment">//优化 ：路径压缩  找到最直接的父亲  在路径压缩面前 可以去掉按节点合并的优化操作 其效率差不多</span>    <span class="token keyword">return</span> u<span class="token operator">-&gt;</span>father<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>father<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> x <span class="token operator">?</span> x <span class="token operator">:</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> u<span class="token operator">-&gt;</span>father<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">merge</span><span class="token punctuation">(</span>UnionSet <span class="token operator">*</span>u<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> fa <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">,</span> fb <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fa <span class="token operator">==</span> fb<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>size<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">&lt;</span> u<span class="token operator">-&gt;</span>size<span class="token punctuation">[</span>fb<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>fa<span class="token punctuation">,</span> fb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当fa的节点个数小于fb的节点个数 交换它们 保证fa的节点数是最大的</span>    u<span class="token operator">-&gt;</span>father<span class="token punctuation">[</span>fb<span class="token punctuation">]</span> <span class="token operator">=</span> fa<span class="token punctuation">;</span>   <span class="token comment">//把fa当做合并后的根节点</span>    u<span class="token operator">-&gt;</span>size<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">+=</span> u<span class="token operator">-&gt;</span>size<span class="token punctuation">[</span>fb<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//当fb作为子树时 fa整体的节点个数要加上fb的</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>UnionSet <span class="token operator">*</span>u<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>father<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    UnionSet <span class="token operator">*</span>u <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token function">merge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"Yes"</span> <span class="token operator">:</span> <span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">clear</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Data structure, C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之Leetcode刷题集</title>
      <link href="posts/1124.html"/>
      <url>posts/1124.html</url>
      
        <content type="html"><![CDATA[<h1 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h1><ul><li><a href="https://srymaker0.com/posts/d64e">1.链表</a></li><li><a href="https://srymaker0.com/posts/9199">2.栈</a></li><li><a href="https://srymaker0.com/posts/682f">3.队列</a></li><li><a href="https://srymaker0.com/posts/2a0c">4.二叉树</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPP个人笔记</title>
      <link href="posts/db87.html"/>
      <url>posts/db87.html</url>
      
        <content type="html"><![CDATA[<h2 id="冲-兄弟们"><a href="#冲-兄弟们" class="headerlink" title="冲, 兄弟们"></a>冲, 兄弟们</h2><ul><li><a href="https://srymaker0.com/posts/85a7">1.从c到c++</a></li><li><a href="https://srymaker0.com/posts/3bd">2.构造与析构</a></li><li><a href="https://srymaker0.com/posts/8a1e">3.类与对象</a></li><li><a href="https://srymaker0.com/posts/6f17">4.继承</a></li><li><a href="https://srymaker0.com/posts/21f6">5.多态</a></li><li><a href="https://srymaker0.com/posts/b26a">6.c++零碎知识点</a></li><li><a href="https://srymaker0.com/posts/e383">7.模板</a></li><li><a href="https://srymaker0.com/posts/130c">8.异常</a></li><li><a href="https://srymaker0.com/posts/4864">9.C++线程</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C++, 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
